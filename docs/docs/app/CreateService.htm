
<!DOCTYPE html>
<html>

<head>
	<title>CreateService</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" id="themeJQ" href="../css/themes/default/theme-default.min.css"/>
	<link rel="stylesheet" href="../css/themes/default/jquery.mobile.structure-1.2.0.min.css"/>
	<link rel="stylesheet" id="themePrism" href="../css/themes/prism/default.min.css"/>
	<link rel="stylesheet" id="themeDocs" href="../css/docs-default.min.css"/>

	<script src="../js/energize-min.js"></script>
	<script src="../js/jquery-1.8.1.min.js"></script>
	<script src="../../app.js"></script>
	<script src="../js/common.js"></script>
	<script src="../js/example.js"></script>
	<script src="../js/jquery.mobile-1.2.0.min.js"></script>
</head>

<body>
<div data-role="page" data-theme="a">

	<div data-role="header" data-position="fixed">
		<a href='#' class='ui-btn-left' data-icon='arrow-l' onclick="history.back(); return false">Back</a>
		<h1>CreateService</h1>
		<a class="ui-btn-right" data-icon="gear" data-iconpos="notext" onclick="setTheme(getTheme() == 'default' ? 'dark' : 'default')"></a>
	</div>

	<div style="position:fixed; top:40px; width:100%; text-align:center; z-index:1101;">
		<div id="appPopup" class="androidPopup">Hello World</div>
	</div>

	<div data-role="content">
		<p>Services run in the background and can be used to monitor online databases, local communication ports or changes in data on the file system. They can also trigger notifications to the user and launch apps when changes or timeouts occur.<br>
		<br>
		DroidScript Services run in a separate process and can take advantage of multi-CPU devices, this allows CPU intensive calculations or slow procedures to be done in the background without slowing down or interfering with the main application.<br>
		<br>
		Any file in your project with the filename <docstr>“Service.js”</docstr> will run as a hidden background service.<br>
		<br>
		A service can be created and started using the <b>CreateService</b> method of the app object in your main application file:.</p>

		<div class="samp">
		srv = app.CreateService(
			<a href="#pop_str_001" data-transition="pop" data-rel="popup">packageName</a>,
			<a href="#pop_str_002" data-transition="pop" data-rel="popup">className</a>,
			<a href="#pop_fnc_001" data-transition="pop" data-rel="popup">callback</a>,
			<a href="#pop_str_003" data-transition="pop" data-rel="popup">options</a> )
			→ <b>app object:</b> Service
		</div>

		<p>Use <docstr>“this”</docstr> for the <i>packageName</i> and <i>className</i> parameters.<br>
		<br>
		Your service will start running when it's created and a foreground app must exist to manage the service and this foreground app must be run at least one time by the user.<br>
		<br>
		You can set the service to start automatically when the device is booted if required; with the <b>SetAutoBoot</b> method of the <b>app</b> object.<br>
		<code class="samp samp-inline">app<span class="token punctuation">.</span><span class="token function">SetAutoBoot</span><span class="token punctuation">(</span> <span class="token string">"Service"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code><br>
		<br>
		Stop a service using the Stop method.<br>
		<code class="samp samp-inline">svc<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><br>
		<br>
		Messages can be sent from your app to the service using the SendMessage method on the service object:<br>
		<code class="samp samp-inline">svc<span class="token punctuation">.</span><span class="token function">SendMessage</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span></code><br>
		<br>
		You will need to provide a message handler to receive and process the messages (see example below).<br>
		<br>
		Send messages from the service to the main app by using the SendMessage method of the app object:<br>
		<code class="samp samp-inline">app<span class="token punctuation">.</span><span class="token function">SendMessage</span><span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span></code><br>
		<br>
		This will also need a message handler on the application (see example below).<br>
		<br>
		Adding services to your application is best done working with the WiFi editor (browser IDE) because you will need to edit more than one file and also see debug message from the service. Debug and error messages are shown in gray on the debug tab of the WiFi editor. Pressing the stop button in this IDE will stop both the service and the app, but pressing the back button on your device will stop the app but leave the service running.</p>

		<div data-role="collapsible" data-collapsed="true" data-mini="true" data-theme="a" data-content-theme="a">
			<h3>Example - Services</h3>
			<div id="examp1" style="font-size:70%">
				<span class="token comment">//our Service.js code.</span><br>
				<span class="token comment">//In regular usage move this code to a separate Service.js file</span><br>
				<span class="token keyword">var</span> servicejs <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br>
				//Init variables.<br>
				var count = 0;<br>
				var diff = 1;<br>
				<br>
				//Called when service is started.<br>
				function OnStart()<br>
				{<br>
				    app.ShowPopup( "Hello from Service!" );<br>
				    <br>
				    //Start a timer to do some regular work.<br>
				    setInterval( DoWork, 500 );<br>
				}<br>
				<br>
				//Called when we get a message from main app.<br>
				function OnMessage( msg )<br>
				{<br>
				    app.Debug( msg );<br>
				    <br>
				    //Handle commands from main App.<br>
				    if( msg == "change" ) diff = (diff > 0 ? -1 : 1);<br>
				}<br>
				<br>
				//This is where we do some regular background task<br>
				//(here we just modify a counter and send it back to the app, if its running).<br>
				function DoWork()<br>
				{<br>
				    count += diff;<br>
				    app.SendMessage( count );<br>
				}</span><span class="token template-punctuation string">`</span></span><br>
				<br>
				<span class="token keyword">function</span> <span class="token function">OnStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br>
				<span class="token punctuation">{</span><br>
				    <span class="token comment">//Create the Service.js file</span><br>
				    <span class="token comment">//(In regular usage create the file yourself)</span><br>
				    app<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token string">"Service.js"</span><span class="token punctuation">,</span> servicejs <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    <br>
				    <span class="token comment">//Create a layout.</span><br>
				    lay <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">CreateLayout</span><span class="token punctuation">(</span> <span class="token string">"linear"</span><span class="token punctuation">,</span> <span class="token string">"VCenter,FillXY"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    <br>
				    <span class="token comment">//Create text control to display data from the service.</span><br>
				    txt <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">CreateText</span><span class="token punctuation">(</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">0.4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    txt<span class="token punctuation">.</span><span class="token function">SetTextSize</span><span class="token punctuation">(</span> <span class="token number">22</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    lay<span class="token punctuation">.</span><span class="token function">AddChild</span><span class="token punctuation">(</span> txt <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    <br>
				    <span class="token comment">//Create an 'Send Message' button.</span><br>
				    btn <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">CreateButton</span><span class="token punctuation">(</span> <span class="token string">"Send Message to Service"</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">,</span> <span class="token number">0.1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    lay<span class="token punctuation">.</span><span class="token function">AddChild</span><span class="token punctuation">(</span> btn <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    btn<span class="token punctuation">.</span><span class="token function">SetOnTouch</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> svc<span class="token punctuation">.</span><span class="token function">SendMessage</span><span class="token punctuation">(</span><span class="token string">"change"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    <br>
				    <span class="token comment">//Create a 'Stop Service' button.</span><br>
				    btn <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">CreateButton</span><span class="token punctuation">(</span> <span class="token string">"Stop Service"</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">,</span> <span class="token number">0.1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    lay<span class="token punctuation">.</span><span class="token function">AddChild</span><span class="token punctuation">(</span> btn <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    btn<span class="token punctuation">.</span><span class="token function">SetOnTouch</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> svc<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    <br>
				    <span class="token comment">//Add layout to app.</span><br>
				    app<span class="token punctuation">.</span><span class="token function">AddLayout</span><span class="token punctuation">(</span> lay <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    <br>
				    <span class="token comment">//Start/connect to our service.</span><br>
				    svc <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">CreateService</span><span class="token punctuation">(</span> <span class="token string">"this"</span><span class="token punctuation">,</span> <span class="token string">"this"</span><span class="token punctuation">,</span> OnServiceReady <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    svc<span class="token punctuation">.</span><span class="token function">SetOnMessage</span><span class="token punctuation">(</span> OnServiceMessage <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    <br>
				    <span class="token comment">//This will cause your service to start at boot.</span><br>
				    <span class="token comment">//(Set it to "none" if you need to stop it starting)</span><br>
				    <span class="token comment">//app.SetAutoBoot( "Service" );</span><br>
				<span class="token punctuation">}</span><br>
				<br>
				<span class="token comment">//Called after our service has started.</span><br>
				<span class="token keyword">function</span> <span class="token function">OnServiceReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br>
				<span class="token punctuation">{</span><br>
				    app<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span> <span class="token string">"Service Ready"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				<span class="token punctuation">}</span><br>
				<br>
				<span class="token comment">//Called when messages comes from our service.</span><br>
				<span class="token keyword">function</span> <span class="token function">OnServiceMessage</span><span class="token punctuation">(</span> <span class="token parameter">msg</span> <span class="token punctuation">)</span><br>
				<span class="token punctuation">{</span><br>
				    txt<span class="token punctuation">.</span><span class="token function">SetText</span><span class="token punctuation">(</span> <span class="token string">"Count: "</span> <span class="token operator">+</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				<span class="token punctuation">}</span>
			</div>
			<div name="divCopy" align="right">
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy( examp1 )">Copy All</a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo( examp1 )">      Run      </a>
			</div>
		</div>

		<p>Inspect the debug console and see the log messages from the service in gray.</p>
		<p>The following methods are available on the <b>Service</b> object:</p>

		<div class="samp">
			<a href="#pop_dsc_001" data-transition="pop" data-rel="popup">GetType</a>() → <b>string:</b> <docstr>“Service”</docstr>
		</div>
		<div class="samp">
			<a href="#pop_dsc_002" data-transition="pop" data-rel="popup">SendMessage</a>(
			<a href="#pop_std_str" data-transition="pop" data-rel="popup">message</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_003" data-transition="pop" data-rel="popup">SetInBackground</a>()
		</div>
		<div class="samp">
			<a href="#pop_dsc_004" data-transition="pop" data-rel="popup">SetInForeground</a>(
			<a href="#pop_std_str" data-transition="pop" data-rel="popup">title</a>,
			<a href="#pop_std_str" data-transition="pop" data-rel="popup">text</a>,
			<a href="#pop_str_pth" data-transition="pop" data-rel="popup">largeIcon</a>,
			<a href="#pop_str_pth" data-transition="pop" data-rel="popup">smallIcon</a>,
			<a href="#pop_str_004" data-transition="pop" data-rel="popup">importance</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_005" data-transition="pop" data-rel="popup">SetOnMessage</a>(
			<a href="#pop_fnc_002" data-transition="pop" data-rel="popup">callback</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_006" data-transition="pop" data-rel="popup">Stop</a>()
		</div>
	<br>
	</div>

	<div data-role="popup" id="pop_str_001" class="ui-content"><b>string:</b> <docstr>“this”</docstr> or <docstr>“&lt;package&gt;”</docstr></div>
	<div data-role="popup" id="pop_str_002" class="ui-content"><b>string:</b> <docstr>“this”</docstr> or <docstr>“&lt;class&gt;”</docstr></div>
	<div data-role="popup" id="pop_fnc_001" class="ui-content"><b>function</b>()</div>
	<div data-role="popup" id="pop_str_003" class="ui-content"><b>string:</b> <i>comma <docstr>“,”</docstr> separated:</i> <docstr>“<a href="" onclick="app.ShowPopup('attempts to force restart if service killed')">Persist</a>”</docstr></div>

	<div data-role="popup" id="pop_dsc_001" class="ui-content"><b>srv.GetType</b><br>Returns the control class name.</div>
	<div data-role="popup" id="pop_dsc_002" class="ui-content"><b>srv.SendMessage</b><br>Sends a message to the service.</div>
	<div data-role="popup" id="pop_std_str" class="ui-content"><b>string</b></div>

	<div data-role="popup" id="pop_dsc_003" class="ui-content"><b>srv.SetInBackground</b><br>Run service in background.</div>
	<div data-role="popup" id="pop_dsc_004" class="ui-content"><b>srv.SetInForeground</b><br>Run service in foreground.</div>
	<div data-role="popup" id="pop_str_pth" class="ui-content"><b>string:</b> <i>path to file or folder ( <docstr>“/absolute/...”</docstr> or <docstr>“relative/...”</docstr> )</i></div>
	<div data-role="popup" id="pop_str_004" class="ui-content"><b>string:</b> <docstr>“none”</docstr> or <docstr>“min”</docstr> or <docstr>“low”</docstr> or <docstr>“high”</docstr></div>

	<div data-role="popup" id="pop_dsc_005" class="ui-content"><b>srv.SetOnMessage</b><br>Define a callback function which is called when a message arrived from the service.</div>
	<div data-role="popup" id="pop_fnc_002" class="ui-content"><b>function</b>(
		<a href="" onclick="app.ShowPopup('string')">message</a>
	)</div>

	<div data-role="popup" id="pop_dsc_006" class="ui-content"><b>srv.Stop</b><br>Stop the service.</div>
</div>
</body>

</html>
