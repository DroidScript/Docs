
<!DOCTYPE html>
<html>

<head>
	<title>GetJoystickState</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" id="themeJQ" href="../css/themes/default/theme-default.min.css"/>
	<link rel="stylesheet" href="../css/themes/default/jquery.mobile.structure-1.2.0.min.css"/>
	<link rel="stylesheet" id="themeDocs" href="../css/docs-default.css"/>
	<script src="../js/energize-min.js"></script>
	<script src="../js/jquery-1.8.1.min.js"></script>
	<script src="../../app.js"></script>
	<script src="../js/common.js"></script>
	<script src="../js/example.js"></script>
	<script src="../js/jquery.mobile-1.2.0.min.js"></script>
</head>

<body>
	<div data-role="page" data-theme="a">

		<div data-role="header" data-position="fixed">
			<a href='#' class='ui-btn-left' data-icon='arrow-l' onclick="history.back(); return false">Back</a>
			<h1>GetJoystickState</h1>
		</div>

		<div data-role="content">
			<p>Returns the state of a connected joystick.</p>

			<div class="samp">
			app.GetJoystickState( <a href="#pop_num_int" data-transition="pop" data-rel="popup">id</a>, <a href="#pop_str_001" data-transition="pop" data-rel="popup">key</a> ) → <b>number</b>
			</div>

			<p>The key can have many values depending on the used controller. The axis-n keys are for different joystick x/y/z axes or the D-Pad - you will best try which key stands for which button with the attached example.</p>
			<div data-role="collapsible" data-collapsed="true" data-mini="true" data-theme="a" data-content-theme="a">
				<h3>Example - Show States</h3>
				<div id="examp0" style="font-size:70%">
					function OnStart()<br>
				{<br>
				&#160;&#160;&#160;&#160;lay = app.CreateLayout( &quot;linear&quot; );<br>
				<br>
				&#160;&#160;&#160;&#160;txt = app.CreateText( &quot;&quot;, 1, 1, &quot;monospace,left,multiline&quot; );<br>
				&#160;&#160;&#160;&#160;lay.AddChild( txt );<br>
				<br>
				&#160;&#160;&#160;&#160;app.AddLayout( lay );<br>
				<br>
				&#160;&#160;&#160;&#160;app.SetDebug( &quot;console&quot; );<br>
				&#160;&#160;&#160;&#160;app.Animate( ShowStates, 10 );<br>
				}<br>
				<br>
				function ShowStates()<br>
				{<br>
				&#160;&#160;&#160;&#160;var keys = &quot;A|B|C|X|Y|Z|R1|L1|Up|Down|Left|Right|Start|ThumbLeft|ThumbRight|&quot; +<br>
				&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;axis-0|axis-1|axis-2|axis-3|axis-4|axis-5|axis-6|axis-7|axis-8|axis-9&quot;;<br>
				<br>
				&#160;&#160;&#160;&#160;keys = keys.split(&quot;|&quot;);<br>
				<br>
				&#160;&#160;&#160;&#160;var lst = [];<br>
				&#160;&#160;&#160;&#160;for(var i in keys)<br>
				&#160;&#160;&#160;&#160;{<br>
				&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<b id = "snip0"  style = "font-size:100%">var state = app.GetJoystickState(0, keys[i]);</b><br>
				&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;lst.push(keys[i] + &quot;: &quot; + state);<br>
				&#160;&#160;&#160;&#160;}<br>
				<br>
				&#160;&#160;&#160;&#160;txt.SetText( lst.join( &quot;\n&quot; ) );<br>
				}
				</div>
				<div name="divCopy" align="right">
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy( snip0 )">&#160;&#160;&#160;&#160;Copy&#160;&#160;&#160;&#160;</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy( examp0 )">Copy All</a>
				<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo( examp0 )">&#160;&#160;&#160;&#160;&#160;&#160;Run&#160;&#160;&#160;&#160;&#160;&#160;</a>
				</div>
			</div>

			
			
			<br>
		</div>

		<div data-role="popup" id="pop_num_int" class="ui-content"><b>number:</b> <i>integer</i></div>
		<div data-role="popup" id="pop_str_001" class="ui-content"><b>string:</b> “A” or “B” or “C” or “X” or “Y” or “Z” or “R1” or “L1” or “Left” or “Right” or “Up” or “Down” or “Start” or “ThumbLeft” or “ThumbRight” or “axis-0..9”</div>

	</div>
</body>

</html>
