
<!DOCTYPE html>
<html>

<head>
	<title>CreateGLView</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" id="themeJQ" href="../css/themes/default/theme-default.min.css"/>
	<link rel="stylesheet" href="../css/themes/default/jquery.mobile.structure-1.2.0.min.css"/>
	<link rel="stylesheet" id="themePrism" href="../css/themes/prism/default.min.css"/>
	<link rel="stylesheet" id="themeDocs" href="../css/docs-default.min.css"/>

	<script src="../js/energize-min.js"></script>
	<script src="../js/jquery-1.8.1.min.js"></script>
	<script src="../../app.js"></script>
	<script src="../js/common.js"></script>
	<script src="../js/example.js"></script>
	<script src="../js/jquery.mobile-1.2.0.min.js"></script>
</head>

<body>
<div data-role="page" data-theme="a">

	<div data-role="header" data-position="fixed">
		<a href='#' class='ui-btn-left' data-icon='arrow-l' onclick="history.back(); return false">Back</a>
		<h1>CreateGLView</h1>
		<a class="ui-btn-right" data-icon="gear" data-iconpos="notext" onclick="setTheme(getTheme() == 'default' ? 'dark' : 'default')"></a>
	</div>

	<div style="position:fixed; top:40px; width:100%; text-align:center; z-index:1101;">
		<div id="appPopup" class="androidPopup">Hello World</div>
	</div>

	<div data-role="content">
		<p>GLView is a fast 2D canvas suitable for drawing and moving graphics around on the screen quickly, ideal for games. The options parameter should be always set to <docstr>“Fast2d”</docstr>.</p>

		<div class="samp">
		glv = app.CreateGLView(
			<a href="#pop_num_srw" data-transition="pop" data-rel="popup">width</a>,
			<a href="#pop_num_srh" data-transition="pop" data-rel="popup">height</a>,
			<a href="#pop_str_001" data-transition="pop" data-rel="popup">options</a> )
			→ <b>app object:</b> GLView
		</div>

		<p>Use the <b>CreateImage</b> method of the GLView object to create an image that can be used with the GLView.<br>
		You can specity a <b>callback</b> function too which will be called once the image is ready to use.<br>
		<br>
		To draw the sprite on the canvas use the <b>DrawImage</b> method.<br>
		<red>Note: don't forget to specify all parameters, including angle. Otherwise the image will not be drawn.</red><br>
		You can leave either width or height -1 to scale the other parameter according to the sprite aspect ratio.<br>
		<br>
		Once all drawing has been done, the <b>Render</b> method must be called to render all the GLView graphics to the screen.</p>

		<div data-role="collapsible" data-collapsed="true" data-mini="true" data-theme="a" data-content-theme="a">
			<h3>Example - DrawImage</h3>
			<div id="examp1" style="font-size:70%">
				<span class="token keyword">function</span> <span class="token function">OnStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br>
				<span class="token punctuation">{</span><br>
				    lay <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">CreateLayout</span><span class="token punctuation">(</span> <span class="token string">"Linear"</span><span class="token punctuation">,</span> <span class="token string">"FillXY"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    <br>
				    <b id="snip1" style="font-size:100%">glview <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">CreateGLView</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Fast2d"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    lay<span class="token punctuation">.</span><span class="token function">AddChild</span><span class="token punctuation">(</span> glview <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    <br>
				    img <span class="token operator">=</span> glview<span class="token punctuation">.</span><span class="token function">CreateImage</span><span class="token punctuation">(</span> <span class="token string">"/Sys/Img/Hello.png"</span><span class="token punctuation">,</span> DrawFrame <span class="token punctuation">)</span><span class="token punctuation">;</span></b><br>
				    <br>
				    app<span class="token punctuation">.</span><span class="token function">AddLayout</span><span class="token punctuation">(</span> lay <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				<span class="token punctuation">}</span><br>
				<br>
				<span class="token keyword">function</span> <span class="token function">DrawFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br>
				<span class="token punctuation">{</span><br>
				    glview<span class="token punctuation">.</span><span class="token function">DrawImage</span><span class="token punctuation">(</span> img<span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">45</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    glview<span class="token punctuation">.</span><span class="token function">Render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				<span class="token punctuation">}</span>
			</div>
			<div name="divCopy" align="right">
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy( snip1 )">    Copy    </a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy( examp1 )">Copy All</a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo( examp1 )">      Run      </a>
			</div>
		</div>

		<h3>Render Loop</h3>
		<p>To create a rendering loop for a game, use the setInterval JavaScript function to call your drawing function at regular intervals.<br>
		The example below draws a continuously rotating image by calling the DrawFrame function 30 times each second, updating the angle each time:</p>

		<div data-role="collapsible" data-collapsed="true" data-mini="true" data-theme="a" data-content-theme="a">
			<h3>Example - Render Loop</h3>
			<div id="examp2" style="font-size:70%">
				<span class="token keyword">var</span> angle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br>
				<br>
				<span class="token keyword">function</span> <span class="token function">OnStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br>
				<span class="token punctuation">{</span><br>
				    lay <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">CreateLayout</span><span class="token punctuation">(</span> <span class="token string">"Linear"</span><span class="token punctuation">,</span> <span class="token string">"FillXY"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    <br>
				    <b id="snip2" style="font-size:100%">glview <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">CreateGLView</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Fast2d"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    lay<span class="token punctuation">.</span><span class="token function">AddChild</span><span class="token punctuation">(</span> glview <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    <br>
				    img <span class="token operator">=</span> glview<span class="token punctuation">.</span><span class="token function">CreateImage</span><span class="token punctuation">(</span> <span class="token string">"/Sys/Img/Hello.png"</span><span class="token punctuation">,</span> StartRendering <span class="token punctuation">)</span><span class="token punctuation">;</span></b><br>
				    <br>
				    app<span class="token punctuation">.</span><span class="token function">AddLayout</span><span class="token punctuation">(</span> lay <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				<span class="token punctuation">}</span><br>
				<br>
				<span class="token keyword">function</span> <span class="token function">StartRendering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br>
				<span class="token punctuation">{</span><br>
				    <span class="token function">setInterval</span><span class="token punctuation">(</span> DrawFrame<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token operator">/</span><span class="token number">30</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				<span class="token punctuation">}</span><br>
				<br>
				<span class="token keyword">function</span> <span class="token function">DrawFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br>
				<span class="token punctuation">{</span><br>
				    glview<span class="token punctuation">.</span><span class="token function">DrawImage</span><span class="token punctuation">(</span> img<span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> angle <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    <br>
				    angle <span class="token operator">=</span> angle <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><br>
				    <span class="token keyword">if</span><span class="token punctuation">(</span> angle <span class="token operator">==</span> <span class="token number">360</span> <span class="token punctuation">)</span> angle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br>
				    <br>
				    glview<span class="token punctuation">.</span><span class="token function">Render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				<span class="token punctuation">}</span>
			</div>
			<div name="divCopy" align="right">
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy( snip2 )">    Copy    </a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy( examp2 )">Copy All</a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo( examp2 )">      Run      </a>
			</div>
		</div>

		<h3>Sprite Touch Detection</h3>
		<p>If you need to want to simulate OnTouch for a GLView Image, you will need to keep track of the position, width and height that it has been drawn with. Then use the GLView OnTouch event to determine if the touch coordinates are within the GLView Image yourself. To prevent touch detect on all sprites on the touch position define a drawing order according to a list.</p>

		<div data-role="collapsible" data-collapsed="true" data-mini="true" data-theme="a" data-content-theme="a">
			<h3>Example - Sprite Touch</h3>
			<div id="examp4" style="font-size:70%">
				objects <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><br>
				<br>
				<span class="token comment">//Called when application is started.</span><br>
				<span class="token keyword">function</span> <span class="token function">OnStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>
				    <span class="token comment">//Create layout</span><br>
				    lay <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">CreateLayout</span><span class="token punctuation">(</span> <span class="token string">"linear"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    <br>
				    <span class="token comment">//Create GLView</span><br>
				    glv <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">CreateGLView</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Fast2d"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    glv<span class="token punctuation">.</span><span class="token function">SetOnTouchUp</span><span class="token punctuation">(</span> touch <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    <br>
				    <span class="token comment">//set first image</span><br>
				    img1 <span class="token operator">=</span> glv<span class="token punctuation">.</span><span class="token function">CreateImage</span><span class="token punctuation">(</span> <span class="token string">"/Sys/Img/Hello.png"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    img1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"img1"</span><span class="token punctuation">;</span><br>
				    img1<span class="token punctuation">.</span><span class="token constant">X</span> <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span> img1<span class="token punctuation">.</span><span class="token constant">Y</span> <span class="token operator">=</span> <span class="token number">0.3</span><span class="token punctuation">;</span><br>
				    img1<span class="token punctuation">.</span><span class="token constant">W</span> <span class="token operator">=</span> <span class="token number">0.7</span><span class="token punctuation">;</span> img1<span class="token punctuation">.</span><span class="token constant">H</span> <span class="token operator">=</span> <span class="token number">0.4</span><span class="token punctuation">;</span><br>
				    objects<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>img1<span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    <br>
				    <span class="token comment">//set second image</span><br>
				    img2 <span class="token operator">=</span> glv<span class="token punctuation">.</span><span class="token function">CreateImage</span><span class="token punctuation">(</span> <span class="token string">"/Sys/Img/Droid1.png"</span><span class="token punctuation">,</span> startRender <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    img2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"img2"</span><span class="token punctuation">;</span><br>
				    img2<span class="token punctuation">.</span><span class="token constant">X</span> <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span> img2<span class="token punctuation">.</span><span class="token constant">Y</span> <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span><br>
				    img2<span class="token punctuation">.</span><span class="token constant">W</span> <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span> img2<span class="token punctuation">.</span><span class="token constant">H</span> <span class="token operator">=</span> <span class="token number">0.3</span><span class="token punctuation">;</span><br>
				    objects<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>img2<span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    <br>
				    lay<span class="token punctuation">.</span><span class="token function">AddChild</span><span class="token punctuation">(</span> glv <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    <br>
				    <span class="token comment">//Add layout to app.</span><br>
				    app<span class="token punctuation">.</span><span class="token function">AddLayout</span><span class="token punctuation">(</span> lay <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				<span class="token punctuation">}</span><br>
				<br>
				<span class="token comment">// Draw images</span><br>
				<span class="token keyword">function</span> <span class="token function">startRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>
				    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> objects<span class="token punctuation">)</span> <span class="token function">draw</span><span class="token punctuation">(</span>objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    glv<span class="token punctuation">.</span><span class="token function">Render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				<span class="token punctuation">}</span><br>
				<br>
				<span class="token comment">// Check which image was touched</span><br>
				<span class="token keyword">function</span> <span class="token function">touch</span><span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>
				    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> objects<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>
				        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">touched</span><span class="token punctuation">(</span> objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ev <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><br>
				            app<span class="token punctuation">.</span><span class="token function">ShowPopup</span><span class="token punctuation">(</span> <span class="token string">"touched "</span> <span class="token operator">+</span> objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				            <span class="token keyword">break</span><span class="token punctuation">;</span><br>
				        <span class="token punctuation">}</span><br>
				    <span class="token punctuation">}</span><br>
				<span class="token punctuation">}</span><br>
				<br>
				<span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token parameter">img<span class="token punctuation">,</span> ev</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>
				    glv<span class="token punctuation">.</span><span class="token function">DrawImage</span><span class="token punctuation">(</span> img<span class="token punctuation">,</span> img<span class="token punctuation">.</span><span class="token constant">X</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span><span class="token constant">Y</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span><span class="token constant">W</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span><span class="token constant">H</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				<span class="token punctuation">}</span><br>
				<br>
				<span class="token keyword">function</span> <span class="token function">touched</span><span class="token punctuation">(</span><span class="token parameter">img<span class="token punctuation">,</span> ev</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><br>
				    <span class="token keyword">return</span> img<span class="token punctuation">.</span><span class="token constant">X</span> <span class="token operator">&lt;</span> ev<span class="token punctuation">.</span><span class="token constant">X</span> <span class="token operator">&amp;&amp;</span> img<span class="token punctuation">.</span><span class="token constant">X</span> <span class="token operator">+</span> img<span class="token punctuation">.</span><span class="token constant">W</span> <span class="token operator">></span> ev<span class="token punctuation">.</span><span class="token constant">X</span><br>
				        <span class="token operator">&amp;&amp;</span> img<span class="token punctuation">.</span><span class="token constant">Y</span> <span class="token operator">&lt;</span> ev<span class="token punctuation">.</span><span class="token constant">Y</span> <span class="token operator">&amp;&amp;</span> img<span class="token punctuation">.</span><span class="token constant">Y</span> <span class="token operator">+</span> img<span class="token punctuation">.</span><span class="token constant">H</span> <span class="token operator">></span> ev<span class="token punctuation">.</span><span class="token constant">Y</span><span class="token punctuation">;</span><br>
				<span class="token punctuation">}</span>
			</div>
			<div name="divCopy" align="right">
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy( examp4 )">Copy All</a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo( examp4 )">      Run      </a>
			</div>
		</div>

		<h3>Sprite Animations</h3>
		<p>GLView supports the use of Sprite Sheets. The DrawSprite method can be used to draw part of an image to the GLView.<br>
		The following example uses a sprite sheet containing 8 stages of a character running. The DrawSprite method is used to draw each of the 8 sections in turn to give the effect of the character continuously running:</p>

		<div data-role="collapsible" data-collapsed="true" data-mini="true" data-theme="a" data-content-theme="a">
			<h3>Example - Sprite Sheet Animation</h3>
			<div id="examp3" style="font-size:70%">
				<span class="token keyword">var</span> spriteCount <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><br>
				<span class="token keyword">var</span> srcWidth <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><br>
				<span class="token keyword">var</span> srcHeight <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span><br>
				<span class="token keyword">var</span> frameCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br>
				<br>
				<span class="token keyword">function</span> <span class="token function">OnStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br>
				<span class="token punctuation">{</span><br>
				    lay <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">CreateLayout</span><span class="token punctuation">(</span> <span class="token string">"Linear"</span><span class="token punctuation">,</span> <span class="token string">"FillXY"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    <br>
				    <b id="snip3" style="font-size:100%">glview <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">CreateGLView</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Fast2d"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    lay<span class="token punctuation">.</span><span class="token function">AddChild</span><span class="token punctuation">(</span> glview <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    <br>
				    img <span class="token operator">=</span> glview<span class="token punctuation">.</span><span class="token function">CreateImage</span><span class="token punctuation">(</span> <span class="token string">"/Sys/Img/Sprint.png"</span><span class="token punctuation">,</span> StartRendering <span class="token punctuation">)</span><span class="token punctuation">;</span></b><br>
				    <br>
				    app<span class="token punctuation">.</span><span class="token function">AddLayout</span><span class="token punctuation">(</span> lay <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				<span class="token punctuation">}</span><br>
				<br>
				<span class="token keyword">function</span> <span class="token function">StartRendering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br>
				<span class="token punctuation">{</span><br>
				    <span class="token function">setInterval</span><span class="token punctuation">(</span>DrawFrame<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token operator">/</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				<span class="token punctuation">}</span><br>
				<br>
				<span class="token keyword">function</span> <span class="token function">DrawFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br>
				<span class="token punctuation">{</span><br>
				    <span class="token keyword">var</span> spriteIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>frameCount <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> spriteCount<span class="token punctuation">;</span><br>
				    <br>
				    <span class="token keyword">var</span> sx <span class="token operator">=</span> spriteIndex <span class="token operator">*</span> srcWidth<span class="token punctuation">;</span><br>
				    <span class="token keyword">var</span> sy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><br>
				    <br>
				    glview<span class="token punctuation">.</span><span class="token function">DrawSprite</span><span class="token punctuation">(</span> img<span class="token punctuation">,</span> sx<span class="token punctuation">,</span> sy<span class="token punctuation">,</span> srcWidth<span class="token punctuation">,</span> srcHeight<span class="token punctuation">,</span><br>
				                <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    <br>
				    glview<span class="token punctuation">.</span><span class="token function">Render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    frameCount<span class="token operator">++</span><span class="token punctuation">;</span><br>
				<span class="token punctuation">}</span>
			</div>
			<div name="divCopy" align="right">
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy( snip3 )">    Copy    </a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy( examp3 )">Copy All</a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo( examp3 )">      Run      </a>
			</div>
		</div>

		<p>The following methods are available on the <b>GLView</b> object:</p>

		<div class="samp">
			<a href="#pop_dsc_001" data-transition="pop" data-rel="popup" class="baseFunc">ClearFocus</a>()
		</div>
		<div class="samp">
			<a href="#pop_dsc_002" data-transition="pop" data-rel="popup">CreateImage</a>(
			<a href="#pop_str_pth" data-transition="pop" data-rel="popup">file</a>,
			<a href="#pop_fnc_001" data-transition="pop" data-rel="popup">callback</a> )
			→ <b>app object</b>
		</div>
		<div class="samp">
			<a href="#pop_dsc_003" data-transition="pop" data-rel="popup">DrawImage</a>(
			<a href="#pop_obj_001" data-transition="pop" data-rel="popup">image</a>,
			<a href="#pop_num_frc" data-transition="pop" data-rel="popup">x</a>,
			<a href="#pop_num_frc" data-transition="pop" data-rel="popup">y</a>,
			<a href="#pop_num_frc" data-transition="pop" data-rel="popup">w</a>,
			<a href="#pop_num_frc" data-transition="pop" data-rel="popup">h</a>,
			<a href="#pop_num_deg" data-transition="pop" data-rel="popup">angle</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_004" data-transition="pop" data-rel="popup">DrawSprite</a>(
			<a href="#pop_obj_002" data-transition="pop" data-rel="popup">sheet</a>,
			<a href="#pop_num_pxl" data-transition="pop" data-rel="popup">sx</a>,
			<a href="#pop_num_pxl" data-transition="pop" data-rel="popup">sy</a>,
			<a href="#pop_num_pxl" data-transition="pop" data-rel="popup">sw</a>,
			<a href="#pop_num_pxl" data-transition="pop" data-rel="popup">sh</a>,
			<a href="#pop_num_frc" data-transition="pop" data-rel="popup">dx</a>,
			<a href="#pop_num_frc" data-transition="pop" data-rel="popup">dy</a>,
			<a href="#pop_num_frc" data-transition="pop" data-rel="popup">dw</a>,
			<a href="#pop_num_frc" data-transition="pop" data-rel="popup">dh</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_005" data-transition="pop" data-rel="popup" class="baseFunc">Focus</a>()
		</div>
		<div class="samp">
			<a href="#pop_dsc_006" data-transition="pop" data-rel="popup" class="baseFunc">GetAbsHeight</a>() → <b>number:</b> <i>integer</i>
		</div>
		<div class="samp">
			<a href="#pop_dsc_007" data-transition="pop" data-rel="popup" class="baseFunc">GetAbsWidth</a>() → <b>number:</b> <i>integer</i>
		</div>
		<div class="samp">
			<a href="#pop_dsc_008" data-transition="pop" data-rel="popup">GetContext</a>() → <b>object:</b> ctx
		</div>
		<div class="samp">    <i>
			<a href="#pop_dsc_009" data-transition="pop" data-rel="popup">ctx.capture</a>(
			<a href="#pop_num_pxl" data-transition="pop" data-rel="popup">x</a>,
			<a href="#pop_num_pxl" data-transition="pop" data-rel="popup">y</a>,
			<a href="#pop_num_pxl" data-transition="pop" data-rel="popup">w</a>,
			<a href="#pop_num_pxl" data-transition="pop" data-rel="popup">h</a>,
			<a href="#pop_str_002" data-transition="pop" data-rel="popup">fileName</a>,
			<a href="#pop_std_fnc" data-transition="pop" data-rel="popup">successCallback</a>,
			<a href="#pop_std_fnc" data-transition="pop" data-rel="popup">errorCallback</a> )</i>
		</div>
		<div class="samp">    <i>
			<a href="#pop_dsc_00a" data-transition="pop" data-rel="popup" class="deprHint">ctx.clearRect</a>(
			<a href="#pop_num_pxl" data-transition="pop" data-rel="popup">x</a>,
			<a href="#pop_num_pxl" data-transition="pop" data-rel="popup">y</a>,
			<a href="#pop_num_pxl" data-transition="pop" data-rel="popup">width</a>,
			<a href="#pop_num_pxl" data-transition="pop" data-rel="popup">height</a> )</i>
		</div>
		<div class="samp">    <i>
			<a href="#pop_dsc_00b" data-transition="pop" data-rel="popup">ctx.drawImage</a>(
			<a href="#pop_obj_003" data-transition="pop" data-rel="popup">image</a>,
			<a href="#pop_num_pxl" data-transition="pop" data-rel="popup">sx</a>,
			<a href="#pop_num_pxl" data-transition="pop" data-rel="popup">sy</a>,
			<a href="#pop_num_pxl" data-transition="pop" data-rel="popup">sw</a>,
			<a href="#pop_num_pxl" data-transition="pop" data-rel="popup">sh</a>,
			<a href="#pop_num_pxl" data-transition="pop" data-rel="popup">dx</a>,
			<a href="#pop_num_pxl" data-transition="pop" data-rel="popup">dy</a>,
			<a href="#pop_num_pxl" data-transition="pop" data-rel="popup">dw</a>,
			<a href="#pop_num_pxl" data-transition="pop" data-rel="popup">dh</a> )</i>
		</div>
		<div class="samp">    <i>
			<a href="#pop_dsc_00c" data-transition="pop" data-rel="popup">ctx.render</a>()</i>
		</div>
		<div class="samp">    <i>
			<a href="#pop_dsc_00d" data-transition="pop" data-rel="popup">ctx.resetTransform</a>()</i>
		</div>
		<div class="samp">    <i>
			<a href="#pop_dsc_00e" data-transition="pop" data-rel="popup">ctx.restore</a>()</i>
		</div>
		<div class="samp">    <i>
			<a href="#pop_dsc_00f" data-transition="pop" data-rel="popup">ctx.rotate</a>(
			<a href="#pop_num_rad" data-transition="pop" data-rel="popup">angle</a> )</i>
		</div>
		<div class="samp">    <i>
			<a href="#pop_dsc_010" data-transition="pop" data-rel="popup">ctx.save</a>()</i>
		</div>
		<div class="samp">    <i>
			<a href="#pop_dsc_011" data-transition="pop" data-rel="popup">ctx.scale</a>(
			<a href="#pop_num_frc" data-transition="pop" data-rel="popup">a</a>,
			<a href="#pop_num_frc" data-transition="pop" data-rel="popup">d</a> )</i>
		</div>
		<div class="samp">    <i>
			<a href="#pop_dsc_012" data-transition="pop" data-rel="popup">ctx.setTransform</a>(
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">a</a>,
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">b</a>,
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">c</a>,
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">d</a>,
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">tx</a>,
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">ty</a> )</i>
		</div>
		<div class="samp">    <i>
			<a href="#pop_dsc_013" data-transition="pop" data-rel="popup">ctx.transform</a>(
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">a</a>,
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">b</a>,
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">c</a>,
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">d</a>,
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">tx</a>,
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">ty</a> )</i>
		</div>
		<div class="samp">    <i>
			<a href="#pop_dsc_014" data-transition="pop" data-rel="popup">ctx.translate</a>(
			<a href="#pop_num_pxl" data-transition="pop" data-rel="popup">tx</a>,
			<a href="#pop_num_pxl" data-transition="pop" data-rel="popup">ty</a> )</i>
		</div>
		<div class="samp">
			<a href="#pop_dsc_015" data-transition="pop" data-rel="popup" class="baseFunc">GetHeight</a>(
			<a href="#pop_str_003" data-transition="pop" data-rel="popup">options</a> )
			→ <b>number</b>
		</div>
		<div class="samp">
			<a href="#pop_dsc_016" data-transition="pop" data-rel="popup" class="baseFunc">GetLeft</a>(
			<a href="#pop_str_004" data-transition="pop" data-rel="popup">options</a> )
			→ <b>number</b>
		</div>
		<div class="samp">
			<a href="#pop_dsc_017" data-transition="pop" data-rel="popup" class="baseFunc">GetParent</a>() → <b>app object</b>
		</div>
		<div class="samp">
			<a href="#pop_dsc_018" data-transition="pop" data-rel="popup" class="baseFunc">GetPosition</a>(
			<a href="#pop_str_005" data-transition="pop" data-rel="popup">options</a> )
			→ <b>object:</b> {
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">left</a>,
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">top</a>,
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">right</a>,
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">bottom</a> }
		</div>
		<div class="samp">
			<a href="#pop_dsc_019" data-transition="pop" data-rel="popup" class="baseFunc">GetTop</a>(
			<a href="#pop_str_006" data-transition="pop" data-rel="popup">options</a> )
			→ <b>number</b>
		</div>
		<div class="samp">
			<a href="#pop_dsc_01a" data-transition="pop" data-rel="popup">GetType</a>() → <b>string:</b> <docstr>“GLView”</docstr>
		</div>
		<div class="samp">
			<a href="#pop_dsc_01b" data-transition="pop" data-rel="popup" class="baseFunc">GetVisibility</a>() → <b>string:</b> <docstr>“Show”</docstr> or <docstr>“Hide”</docstr> or <docstr>“Gone”</docstr>
		</div>
		<div class="samp">
			<a href="#pop_dsc_01c" data-transition="pop" data-rel="popup" class="baseFunc">GetWidth</a>(
			<a href="#pop_str_007" data-transition="pop" data-rel="popup">options</a> )
			→ <b>number</b>
		</div>
		<div class="samp">
			<a href="#pop_dsc_01d" data-transition="pop" data-rel="popup" class="baseFunc">Gone</a>()
		</div>
		<div class="samp">
			<a href="#pop_dsc_01e" data-transition="pop" data-rel="popup" class="baseFunc">Hide</a>()
		</div>
		<div class="samp">
			<a href="#pop_dsc_01f" data-transition="pop" data-rel="popup" class="baseFunc">IsEnabled</a>() → <b>boolean</b>
		</div>
		<div class="samp">
			<a href="#pop_dsc_020" data-transition="pop" data-rel="popup">IsOverlap</a>(
			<a href="#pop_std_dso" data-transition="pop" data-rel="popup">obj</a>,
			<a href="#pop_num_frc" data-transition="pop" data-rel="popup">depth</a> )
			→ <b>boolean</b>
		</div>
		<div class="samp">
			<a href="#pop_dsc_021" data-transition="pop" data-rel="popup" class="baseFunc">IsVisible</a>() → <b>boolean</b>
		</div>
		<div class="samp">
			<a href="#pop_dsc_022" data-transition="pop" data-rel="popup" class="premHint">Method</a>(
			<a href="#pop_std_str" data-transition="pop" data-rel="popup">name</a>,
			<a href="#pop_lst_001" data-transition="pop" data-rel="popup">types</a>,
			<a href="#pop_std_str" data-transition="pop" data-rel="popup">p1</a>,
			<a href="#pop_std_str" data-transition="pop" data-rel="popup">p2</a>,
			<a href="#pop_std_str" data-transition="pop" data-rel="popup">p3</a>,
			<a href="#pop_std_str" data-transition="pop" data-rel="popup">p4</a> )
			→ <b>all types</b>
		</div>
		<div class="samp">
			<a href="#pop_dsc_023" data-transition="pop" data-rel="popup">Render</a>()
		</div>
		<div class="samp">
			<a href="#pop_dsc_024" data-transition="pop" data-rel="popup" class="baseFunc">SetBackColor</a>(
			<a href="#pop_str_col" data-transition="pop" data-rel="popup">color</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_025" data-transition="pop" data-rel="popup" class="baseFunc">SetBackGradient</a>(
			<a href="#pop_str_col" data-transition="pop" data-rel="popup">color1</a>,
			<a href="#pop_str_col" data-transition="pop" data-rel="popup">color2</a>,
			<a href="#pop_std_ukn" data-transition="pop" data-rel="popup">color3</a>,
			<a href="#pop_str_008" data-transition="pop" data-rel="popup">options</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_026" data-transition="pop" data-rel="popup" class="baseFunc">SetBackGradientRadial</a>(
			<a href="#pop_num_frc" data-transition="pop" data-rel="popup">x</a>,
			<a href="#pop_num_frc" data-transition="pop" data-rel="popup">y</a>,
			<a href="#pop_num_frc" data-transition="pop" data-rel="popup">radius</a>,
			<a href="#pop_str_col" data-transition="pop" data-rel="popup">color1</a>,
			<a href="#pop_str_col" data-transition="pop" data-rel="popup">color2</a>,
			<a href="#pop_std_ukn" data-transition="pop" data-rel="popup">color3</a>,
			<a href="#pop_std_ukn" data-transition="pop" data-rel="popup">options</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_027" data-transition="pop" data-rel="popup" class="baseFunc">SetBackground</a>(
			<a href="#pop_str_pth" data-transition="pop" data-rel="popup">file</a>,
			<a href="#pop_str_009" data-transition="pop" data-rel="popup">options</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_028" data-transition="pop" data-rel="popup" class="baseFunc">SetEnabled</a>(
			<a href="#pop_std_bin" data-transition="pop" data-rel="popup">enable</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_029" data-transition="pop" data-rel="popup" class="baseFunc">SetMargins</a>(
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">left</a>,
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">top</a>,
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">right</a>,
			<a href="#pop_num_frc" data-transition="pop" data-rel="popup">bottom</a>,
			<a href="#pop_str_00a" data-transition="pop" data-rel="popup">mode</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_02a" data-transition="pop" data-rel="popup">SetOnTouch</a>(
			<a href="#pop_fnc_002" data-transition="pop" data-rel="popup">callback</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_02b" data-transition="pop" data-rel="popup">SetOnTouchDown</a>(
			<a href="#pop_fnc_003" data-transition="pop" data-rel="popup">callback</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_02c" data-transition="pop" data-rel="popup">SetOnTouchMove</a>(
			<a href="#pop_fnc_004" data-transition="pop" data-rel="popup">callback</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_02d" data-transition="pop" data-rel="popup">SetOnTouchUp</a>(
			<a href="#pop_fnc_005" data-transition="pop" data-rel="popup">callback</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_02e" data-transition="pop" data-rel="popup" class="baseFunc">SetPadding</a>(
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">left</a>,
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">top</a>,
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">right</a>,
			<a href="#pop_num_frc" data-transition="pop" data-rel="popup">bottom</a>,
			<a href="#pop_str_00b" data-transition="pop" data-rel="popup">mode</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_02f" data-transition="pop" data-rel="popup" class="baseFunc">SetPosition</a>(
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">left</a>,
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">top</a>,
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">width</a>,
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">height</a>,
			<a href="#pop_str_00c" data-transition="pop" data-rel="popup">options</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_030" data-transition="pop" data-rel="popup" class="baseFunc">SetScale</a>(
			<a href="#pop_num_fac" data-transition="pop" data-rel="popup">x</a>,
			<a href="#pop_num_fac" data-transition="pop" data-rel="popup">y</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_031" data-transition="pop" data-rel="popup" class="baseFunc">SetSize</a>(
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">width</a>,
			<a href="#pop_std_num" data-transition="pop" data-rel="popup">height</a>,
			<a href="#pop_str_00d" data-transition="pop" data-rel="popup">options</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_032" data-transition="pop" data-rel="popup">SetTouchable</a>(
			<a href="#pop_std_bin" data-transition="pop" data-rel="popup">touchable</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_033" data-transition="pop" data-rel="popup" class="baseFunc">SetVisibility</a>(
			<a href="#pop_str_00e" data-transition="pop" data-rel="popup">mode</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_034" data-transition="pop" data-rel="popup" class="baseFunc">Show</a>()
		</div>
		<div class="samp">
			<a href="#pop_dsc_035" data-transition="pop" data-rel="popup" class="baseFunc">Tween</a>(
			<a href="#pop_obj_008" data-transition="pop" data-rel="popup">target</a>,
			<a href="#pop_num_mls" data-transition="pop" data-rel="popup">duration</a>,
			<a href="#pop_str_00f" data-transition="pop" data-rel="popup">type</a>,
			<a href="#pop_num_int" data-transition="pop" data-rel="popup">repeat</a>,
			<a href="#pop_std_bin" data-transition="pop" data-rel="popup">yoyo</a>,
			<a href="#pop_fnc_006" data-transition="pop" data-rel="popup">callback</a> )
		</div>
	<br>
	</div>

	<div data-role="popup" id="pop_num_srw" class="ui-content"><b>number</b></div>
	<div data-role="popup" id="pop_num_srh" class="ui-content"><b>number</b></div>
	<div data-role="popup" id="pop_str_001" class="ui-content"><b>string:</b> <docstr>“fast2d”</docstr></div>

	<div data-role="popup" id="pop_dsc_001" class="ui-content"><b>glv.ClearFocus</b><br>Removes the focus of the control so that the user no longer has immediate access to it.</div>
	<div data-role="popup" id="pop_dsc_002" class="ui-content"><b>glv.CreateImage</b><br>create dso_glv can be drawn on GLV</div>
	<div data-role="popup" id="pop_str_pth" class="ui-content"><b>string:</b> <i>path to file or folder ( <docstr>“/absolute/...”</docstr> or <docstr>“relative/...”</docstr> )</i></div>
	<div data-role="popup" id="pop_fnc_001" class="ui-content"><b>function</b>()</div>

	<div data-role="popup" id="pop_dsc_003" class="ui-content"><b>glv.DrawImage</b><br>Draws an image to the canvas</div>
	<div data-role="popup" id="pop_obj_001" class="ui-content"><b>object:</b> glv Image</div>
	<div data-role="popup" id="pop_num_frc" class="ui-content"><b>number:</b> <i>fraction (0..1)</i></div>
	<div data-role="popup" id="pop_num_deg" class="ui-content"><b>number:</b> <i>angle in degrees (0..360)</i></div>

	<div data-role="popup" id="pop_dsc_004" class="ui-content"><b>glv.DrawSprite</b><br>Draws a part of an image to the canvas.</div>
	<div data-role="popup" id="pop_obj_002" class="ui-content"><b>object:</b> GLV Image</div>
	<div data-role="popup" id="pop_num_pxl" class="ui-content"><b>number:</b> <i>pixel</i></div>

	<div data-role="popup" id="pop_dsc_005" class="ui-content"><b>glv.Focus</b><br>Set the focus to the control so that the user can interact with it immediately.</div>
	<div data-role="popup" id="pop_dsc_006" class="ui-content"><b>glv.GetAbsHeight</b><br>Get the absolute height of the control in pixels.</div>
	<div data-role="popup" id="pop_dsc_007" class="ui-content"><b>glv.GetAbsWidth</b><br>Get the absolute width of the control in pixels.</div>
	<div data-role="popup" id="pop_dsc_008" class="ui-content"><b>glv.GetContext</b><br>Returns the current FastCanvas context</div>
	<div data-role="popup" id="pop_dsc_009" class="ui-content"><b>glv.ctx.capture</b><br>Captures the current cached context to a png image.<br>The path is relative to /sdcard but requires a leading '/', ie <docstr>“/Pictures/mycapture.png”</docstr></div>
	<div data-role="popup" id="pop_str_002" class="ui-content"><b>string:</b> <i><docstr>“/sdcard_relative”</docstr></i></div>
	<div data-role="popup" id="pop_std_fnc" class="ui-content"><b>function</b></div>

	<div data-role="popup" id="pop_dsc_00a" class="ui-content"><b>glv.ctx.clearRect</b><br><div class='deprHint'><b>Note: This function is deprecated. ctx is automatically cleared after render()</b></div></div>
	<div data-role="popup" id="pop_dsc_00b" class="ui-content"><b>glv.ctx.drawImage</b><br>Draws a part of a glv image to the glv context, where s are source coordinates and d destination coordinates.</div>
	<div data-role="popup" id="pop_obj_003" class="ui-content"><b>object:</b> glv Image</div>

	<div data-role="popup" id="pop_dsc_00c" class="ui-content"><b>glv.ctx.render</b><br>render the draw commands to the context</div>
	<div data-role="popup" id="pop_dsc_00d" class="ui-content"><b>glv.ctx.resetTransform</b><br>Reset all transformations to default</div>
	<div data-role="popup" id="pop_dsc_00e" class="ui-content"><b>glv.ctx.restore</b><br>Restore a previously saved context state</div>
	<div data-role="popup" id="pop_dsc_00f" class="ui-content"><b>glv.ctx.rotate</b><br>Rotates the current applied transformation</div>
	<div data-role="popup" id="pop_num_rad" class="ui-content"><b>number:</b> <i>angle in radient (0..2*π)</i></div>

	<div data-role="popup" id="pop_dsc_010" class="ui-content"><b>glv.ctx.save</b><br>Saves the current context state</div>
	<div data-role="popup" id="pop_dsc_011" class="ui-content"><b>glv.ctx.scale</b><br>Scales the current applied transformation matrix</div>
	<div data-role="popup" id="pop_dsc_012" class="ui-content"><b>glv.ctx.setTransform</b><br>Set the current transformation matrix</div>
	<div data-role="popup" id="pop_std_num" class="ui-content"><b>number</b></div>

	<div data-role="popup" id="pop_dsc_013" class="ui-content"><b>glv.ctx.transform</b><br>Apply an other transformation matrix to the current one</div>
	<div data-role="popup" id="pop_dsc_014" class="ui-content"><b>glv.ctx.translate</b><br>'Moves' the current applied transformation matrix</div>
	<div data-role="popup" id="pop_dsc_015" class="ui-content"><b>glv.GetHeight</b><br>Get the height of the control as screen height relative float or in pixels with the <b>px</b> option.</div>
	<div data-role="popup" id="pop_str_003" class="ui-content"><b>string:</b> <docstr>“px”</docstr></div>

	<div data-role="popup" id="pop_dsc_016" class="ui-content"><b>glv.GetLeft</b><br>Get the distance from the control to the left parent border as width relative float or in pixels with the <b>px</b> option.</div>
	<div data-role="popup" id="pop_str_004" class="ui-content"><b>string:</b> <docstr>“px”</docstr></div>

	<div data-role="popup" id="pop_dsc_017" class="ui-content"><b>glv.GetParent</b><br>Returns the parent control object where the object was added to - commonly a layout.</div>
	<div data-role="popup" id="pop_dsc_018" class="ui-content"><b>glv.GetPosition</b><br>Returns data about the position and size of the control.<br>If the <b>screen</b> option is given the position on the screen will be returned. Otherwise relative to the parent control.<br>The <b>px</b> options turns the relative values into pixels.</div>
	<div data-role="popup" id="pop_str_005" class="ui-content"><b>string:</b> <docstr>“screen”</docstr>, <docstr>“px”</docstr></div>

	<div data-role="popup" id="pop_dsc_019" class="ui-content"><b>glv.GetTop</b><br>Get the distance from the control to the upper parent border as height relative float or in pixels with the <b>px</b> option.</div>
	<div data-role="popup" id="pop_str_006" class="ui-content"><b>string:</b> <docstr>“px”</docstr></div>

	<div data-role="popup" id="pop_dsc_01a" class="ui-content"><b>glv.GetType</b><br>Returns the control class name.</div>
	<div data-role="popup" id="pop_dsc_01b" class="ui-content"><b>glv.GetVisibility</b><br>Returns the current visibility state of the control. The Values are:<br><b>Show</b>: visible<br><b>Hide</b>: invisible but still consuming space<br><b>Gone</b>: invisible and not consuming space</div>
	<div data-role="popup" id="pop_dsc_01c" class="ui-content"><b>glv.GetWidth</b><br>Get the width of the control as screen width relative float or in pixels with the <b>px</b> option.</div>
	<div data-role="popup" id="pop_str_007" class="ui-content"><b>string:</b> <docstr>“px”</docstr></div>

	<div data-role="popup" id="pop_dsc_01d" class="ui-content"><b>glv.Gone</b><br>Hides the control without consuming any more layout space as if it were never there.</div>
	<div data-role="popup" id="pop_dsc_01e" class="ui-content"><b>glv.Hide</b><br>Hide the control but keep the layout space free.</div>
	<div data-role="popup" id="pop_dsc_01f" class="ui-content"><b>glv.IsEnabled</b><br>Returns whether the control is currently useable by the user.</div>
	<div data-role="popup" id="pop_dsc_020" class="ui-content"><b>glv.IsOverlap</b><br>Returns whether the control overlaps with another by a given distance.</div>
	<div data-role="popup" id="pop_std_dso" class="ui-content"><b>app object</b></div>

	<div data-role="popup" id="pop_dsc_021" class="ui-content"><b>glv.IsVisible</b><br>Returns whether the control is currently visible to the user, ignoring overlaying controls.</div>
	<div data-role="popup" id="pop_dsc_022" class="ui-content"><b>glv.Method</b><br>Allows access to other functions defined on the object in Java via reflection.<br><br><div class='premHint'><b>Note: This function is a premium feature. Please consider subscribing to Premium to use this feature and support DroidScript in its further development.</b></div></div>
	<div data-role="popup" id="pop_std_str" class="ui-content"><b>string</b></div>
	<div data-role="popup" id="pop_lst_001" class="ui-content"><b>list:</b> boolean,char,byte,short,int,long,float,double,String,CharSequence,...</div>

	<div data-role="popup" id="pop_dsc_023" class="ui-content"><b>glv.Render</b><br>Render all draw commands to the canvas</div>
	<div data-role="popup" id="pop_dsc_024" class="ui-content"><b>glv.SetBackColor</b><br>Changes the background color of the control.</div>
	<div data-role="popup" id="pop_str_col" class="ui-content"><b>string:</b> <i><br>  hexadecimal: <docstr>“#rrggbb”</docstr>, <docstr>“#aarrggbb”</docstr><br>  colourName: <docstr>“red”</docstr>, <docstr>“green”</docstr>, ...</i></div>

	<div data-role="popup" id="pop_dsc_025" class="ui-content"><b>glv.SetBackGradient</b><br>Define the background color of the control with a gradient. The default gradient direction is from top to bottom, but you can change it from left to right and the reversed versions of course.</div>
	<div data-role="popup" id="pop_std_ukn" class="ui-content"><b>unknown</b></div>
	<div data-role="popup" id="pop_str_008" class="ui-content"><b>string:</b> <docstr>“left-right”</docstr> or <docstr>“right-left”</docstr> or <docstr>“top-bottom”</docstr> or <docstr>“bottom-top”</docstr> or <docstr>“bl-tr”</docstr> or <docstr>“br-tl”</docstr> or <docstr>“tl-br”</docstr> or <docstr>“tr-bl”</docstr></div>

	<div data-role="popup" id="pop_dsc_026" class="ui-content"><b>glv.SetBackGradientRadial</b><br>Define a radial color gradient for the background of control.</div>
	<div data-role="popup" id="pop_dsc_027" class="ui-content"><b>glv.SetBackground</b><br>Changes the background to an image which can be repeated using the <b>repeat</b> option.<br>An image which is often used with that option is '/res/drawable/pattern_carbon' - try it out!</div>
	<div data-role="popup" id="pop_str_009" class="ui-content"><b>string:</b> <docstr>“repeat”</docstr></div>

	<div data-role="popup" id="pop_dsc_028" class="ui-content"><b>glv.SetEnabled</b><br>En/Disable the control physically and visually so that the user can/can not access the control. Events like OnTouch will still be fired.</div>
	<div data-role="popup" id="pop_std_bin" class="ui-content"><b>boolean</b></div>

	<div data-role="popup" id="pop_dsc_029" class="ui-content"><b>glv.SetMargins</b><br>Define a distance to other controls on each side of the control.</div>
	<div data-role="popup" id="pop_str_00a" class="ui-content"><b>string:</b> <docstr>“px”</docstr> or <docstr>“sp”</docstr> or <docstr>“dip”</docstr> or <docstr>“mm”</docstr> or <docstr>“pt”</docstr></div>

	<div data-role="popup" id="pop_dsc_02a" class="ui-content"><b>glv.SetOnTouch</b><br>Define a callback function that is called when the user touches the control. In addition, an <b>event</b> object is passed to the callback function to obtain information about the touch <b>type</b>, the touch <b>position(s)</b>, the <b>amount</b> of touches and the <b>control</b> that was touched.</div>
	<div data-role="popup" id="pop_obj_004" class="ui-content"><b>object:</b> { <a href="" onclick="app.ShowPopup('app object')">source</a>, <a href="" onclick="app.ShowPopup('string: “Down” or “Move” or “Up”')">action</a>, <a href="" onclick="app.ShowPopup('number: integer')">count</a>, x: [ <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">x1</a>, <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">x2</a>, <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">x3</a> ], y: [ <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">y1</a>, <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">y2</a>, <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">y3</a> ] }</div>
	<div data-role="popup" id="pop_fnc_002" class="ui-content"><b>function</b>(
		<a href="" onclick="switchPopup(this, '#pop_obj_004')" data-transition="pop" data-rel="popup">event</a>
	)</div>

	<div data-role="popup" id="pop_dsc_02b" class="ui-content"><b>glv.SetOnTouchDown</b><br>Define a callback function which is called when the user started toching the control.</div>
	<div data-role="popup" id="pop_obj_005" class="ui-content"><b>object:</b> { <a href="" onclick="app.ShowPopup('app object')">source</a>, <a href="" onclick="app.ShowPopup('string: “Down”')">action</a>, <a href="" onclick="app.ShowPopup('number: integer')">count</a>, x: [ <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">x1</a>, <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">x2</a>, <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">x3</a> ], y: [ <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">y1</a>, <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">y2</a>, <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">y3</a> ] }</div>
	<div data-role="popup" id="pop_fnc_003" class="ui-content"><b>function</b>(
		<a href="" onclick="switchPopup(this, '#pop_obj_005')" data-transition="pop" data-rel="popup">event</a>
	)</div>

	<div data-role="popup" id="pop_dsc_02c" class="ui-content"><b>glv.SetOnTouchMove</b><br>Define a callback function which is called when the user drags his finger over the screen.</div>
	<div data-role="popup" id="pop_obj_006" class="ui-content"><b>object:</b> { <a href="" onclick="app.ShowPopup('app object')">source</a>, <a href="" onclick="app.ShowPopup('string: “Move”')">action</a>, <a href="" onclick="app.ShowPopup('number: integer')">count</a>, x: [ <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">x1</a>, <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">x2</a>, <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">x3</a> ], y: [ <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">y1</a>, <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">y2</a>, <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">y3</a> ] }</div>
	<div data-role="popup" id="pop_fnc_004" class="ui-content"><b>function</b>(
		<a href="" onclick="switchPopup(this, '#pop_obj_006')" data-transition="pop" data-rel="popup">event</a>
	)</div>

	<div data-role="popup" id="pop_dsc_02d" class="ui-content"><b>glv.SetOnTouchUp</b><br>Define a callback function which is called when the users finger leaves the screen.</div>
	<div data-role="popup" id="pop_obj_007" class="ui-content"><b>object:</b> { <a href="" onclick="app.ShowPopup('app object')">source</a>, <a href="" onclick="app.ShowPopup('string: “Up”')">action</a>, <a href="" onclick="app.ShowPopup('number: integer')">count</a>, x: [ <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">x1</a>, <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">x2</a>, <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">x3</a> ], y: [ <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">y1</a>, <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">y2</a>, <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">y3</a> ] }</div>
	<div data-role="popup" id="pop_fnc_005" class="ui-content"><b>function</b>(
		<a href="" onclick="switchPopup(this, '#pop_obj_007')" data-transition="pop" data-rel="popup">event</a>
	)</div>

	<div data-role="popup" id="pop_dsc_02e" class="ui-content"><b>glv.SetPadding</b><br>Define distances that elements within the control are to maintain from the control borders.</div>
	<div data-role="popup" id="pop_str_00b" class="ui-content"><b>string:</b> <docstr>“px”</docstr> or <docstr>“sp”</docstr> or <docstr>“dip”</docstr> or <docstr>“mm”</docstr> or <docstr>“pt”</docstr></div>

	<div data-role="popup" id="pop_dsc_02f" class="ui-content"><b>glv.SetPosition</b><br>Defines the position and size for the control if the parent is an absolute layout.</div>
	<div data-role="popup" id="pop_str_00c" class="ui-content"><b>string:</b> <docstr>“px”</docstr></div>

	<div data-role="popup" id="pop_dsc_030" class="ui-content"><b>glv.SetScale</b><br>Scales the control along with its contents by the factors passed to the function.</div>
	<div data-role="popup" id="pop_num_fac" class="ui-content"><b>number:</b> <i>factor</i></div>

	<div data-role="popup" id="pop_dsc_031" class="ui-content"><b>glv.SetSize</b><br>Change the size of the control in either screen relative values or in pixels if the <b>px</b> option was given.</div>
	<div data-role="popup" id="pop_str_00d" class="ui-content"><b>string:</b> <docstr>“px”</docstr> or <docstr>“sp”</docstr> or <docstr>“dip”</docstr> or <docstr>“dp”</docstr> or <docstr>“mm”</docstr> or <docstr>“pt”</docstr></div>

	<div data-role="popup" id="pop_dsc_032" class="ui-content"><b>glv.SetTouchable</b><br>En/Disables touch events to be fired on the control. Other events like OnChange will still be fired.</div>
	<div data-role="popup" id="pop_dsc_033" class="ui-content"><b>glv.SetVisibility</b><br>Change the visibility of the control to one of the available modes:<br><b>Show:</b> visible<br><b>Hide:</b> invisible but still consuming space<br><b>Gone:</b> invisible and not consuming space</div>
	<div data-role="popup" id="pop_str_00e" class="ui-content"><b>string:</b> <docstr>“Show”</docstr> or <docstr>“Hide”</docstr> or <docstr>“Gone”</docstr></div>

	<div data-role="popup" id="pop_dsc_034" class="ui-content"><b>glv.Show</b><br>Set the visibility of the control to <docstr>“Show”</docstr>.</div>
	<div data-role="popup" id="pop_dsc_035" class="ui-content"><b>glv.Tween</b><br>Performs an animation on the control.<br>The <b>target</b> object is for the position, size and rotation that the control has at the end of the animation.<br><br>The <b>type</b> specifies the behavior and the speed of the animation. Separated by a dot, you must also specify whether you want to apply this behavior to the beginning (In), end (Out), or to both (InOut) times of the animation.<br><br>With the amount of <b>repeat</b>s you can control how many times you want to play the animation.<br><br>If you have <b>jojo</b> activated, the animation will alternate between forward and backward playback, so that if the repetition value is odd, the control will be at the start position again at the end of the animation.<br><br>Finally the <b>callback</b> function will be called after the animation has finished. Well, it's about time!</div>
	<div data-role="popup" id="pop_obj_008" class="ui-content"><b>object:</b> { <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">x</a>, <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">y</a>, <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">sw</a>, <a href="" onclick="app.ShowPopup('number: fraction (0..1)')">sh</a>, <a href="" onclick="app.ShowPopup('number: angle in degrees (0..360)')">rot</a> }</div>
	<div data-role="popup" id="pop_num_mls" class="ui-content"><b>number:</b> <i>milliseconds</i></div>
	<div data-role="popup" id="pop_str_00f" class="ui-content"><b>string:</b> <docstr>“Linear.None”</docstr> or <docstr>“Quadratic.In/Out”</docstr> or <docstr>“Cubic.In/Out”</docstr> or <docstr>“Quartic.In/Out”</docstr> or <docstr>“Quintic.In/Out”</docstr> or <docstr>“Sinusoidal.In/Out”</docstr> or <docstr>“Exponential.In/Out”</docstr> or <docstr>“Circular.In/Out”</docstr> or <docstr>“Elastic.In/Out”</docstr> or <docstr>“Back.In/Out”</docstr> or <docstr>“Bounce.In/Out”</docstr></div>
	<div data-role="popup" id="pop_num_int" class="ui-content"><b>number:</b> <i>integer</i></div>
	<div data-role="popup" id="pop_fnc_006" class="ui-content"><b>function</b>()</div>
</div>
</body>

</html>
