
<!DOCTYPE html>
<html>

<head>
	<title>CreateNode</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" id="themeJQ" href="../css/themes/default/theme-dark.min.css"/>
	<link rel="stylesheet" href="../css/themes/default/jquery.mobile.structure-1.2.0.min.css"/>
	<link rel="stylesheet" id="themePrism" href="../css/themes/prism/dark.min.css"/>
	<link rel="stylesheet" id="themeDocs" href="../css/docs-dark.min.css"/>

	<script src="../js/forward.js"></script>
	<script src="../js/energize-min.js"></script>
	<script src="../js/jquery-1.8.1.min.js"></script>
	<script src="../js/jquery.mark.es6.min.js"></script>
	<script src="../../app.js"></script>
	<script src="../js/common.js"></script>
	<script src="../js/example.js"></script>
	<script src="../js/jquery.mobile-1.2.0.min.js"></script>
</head>

<body>
<div data-role="page" data-theme="a">

	<div data-role="header" data-position="fixed">
		<a href='#' class='ui-btn-left' data-icon='arrow-l' onclick="history.back(); return false">Back</a>
		<h1>CreateNode</h1>
		<a class="ui-btn-right" data-icon="gear" data-iconpos="notext" onclick="tglTheme()"></a>
	</div>

	<div style="position:fixed; top:40px; width:100%; text-align:center; z-index:1101;">
		<div id="appPopup" class="androidPopup">Hello World</div>
	</div>

	<div data-role="content">

		<div class="samp samp-inline" style="font-size:revert; padding:10px 15px">
		<b>Content:</b><br>
		<span style="display:inline-block;padding-left:2em;">
				- <a href="" onclick="jumpTo('Methods')">Methods</a><br>
			</span><br>
		</div>

		<p>Creates a NodeJS background process with all the functionality of common node.js.</p>

		<div class="samp">
		node = app.CreateNode(
			<a href="#pop_str_001" data-transition="pop" data-rel="popup">paths</a>,
			<a href="#pop_str_002" data-transition="pop" data-rel="popup">options</a> )
		</div>

		<p>Note that to define private functions (functions that are invisible by the main app) you have to declare them as global variable without usign the var keyword.<br>
		This is actually a safer way of working as it prevents name clashes and libraries overwriting each other's functions and variables accidentally.  Ideally you should put your code into objects or classes for better protection and avoid using many globals.</p>

		<div class="samp">
		<span class="token keyword">var</span> myLocalVariable <span class="token operator">=</span> <span class="token string">"Local Hello"</span><span class="token punctuation">;</span><br>
		myGlobalVariable <span class="token operator">=</span> <span class="token string">"Global Hello"</span><br>
		<br>
		<span class="token keyword">function</span> <span class="token function">myLocalFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"Local Hello"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><br>
		<span class="token function-variable function">myGlobalFunction</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"Global Hello"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
		</div>

		<p>For more details have a look at the Node docs in the <a href="../Plugins.htm" data-ajax="false">Plugins</a> page</p>
		<div data-role="collapsible" data-collapsed="true" data-mini="true" data-theme="a" data-content-theme="a">
			<h3>Example - Basic</h3>
			<div id="examp1" style="font-size:70%">
				<span class="token keyword">var</span> nodeJs <span class="token operator">=</span> <span class="token string">'console.log("Hello World");\nconsole.error("Hello Error");\n'</span><br>
				<br>
				<span class="token keyword">function</span> <span class="token function">OnStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br>
				<span class="token punctuation">{</span><br>
				    app<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token string">"node_script.js"</span><span class="token punctuation">,</span> nodeJs<span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    <br>
				    lay <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">CreateLayout</span><span class="token punctuation">(</span><span class="token string">"linear"</span><span class="token punctuation">,</span> <span class="token string">"VCenter, FillXY"</span><span class="token punctuation">)</span><br>
				    txt <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">AddText</span><span class="token punctuation">(</span>lay<span class="token punctuation">,</span> <span class="token string">"Debug Log:"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Log"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    <br>
				    <b id="snip1" style="font-size:100%">node <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">CreateNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    node<span class="token punctuation">.</span><span class="token function">SetOnOutput</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> txt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    node<span class="token punctuation">.</span><span class="token function">SetOnError</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> txt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    node<span class="token punctuation">.</span><span class="token function">SetOnMessage</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> txt<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				    node<span class="token punctuation">.</span><span class="token function">SetOnReady</span><span class="token punctuation">(</span>node_OnReady<span class="token punctuation">)</span><span class="token punctuation">;</span></b><br>
				    <br>
				    app<span class="token punctuation">.</span><span class="token function">AddLayout</span><span class="token punctuation">(</span>lay<span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				<span class="token punctuation">}</span><br>
				<br>
				<span class="token keyword">function</span> <span class="token function">node_OnReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><br>
				<span class="token punctuation">{</span><br>
				    node<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"node_script.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>
				<span class="token punctuation">}</span>
			</div>
			<div name="divCopy" align="right">
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy( snip1 )">    Copy    </a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="copy( examp1 )">Copy All</a>
			<a href="#" data-role="button" data-mini="true" data-inline="true" onclick="demo( examp1 )">      Run      </a>
			</div>
		</div>


		<h3>Methods</h3>
		<p>The following methods are available on the <strong>Node</strong> object:</p>

		<div class="samp">
			<a href="#pop_dsc_001" data-transition="pop" data-rel="popup">AddModule</a>(
			<a href="#pop_str_003" data-transition="pop" data-rel="popup">name</a>,
			<a href="#pop_str_004" data-transition="pop" data-rel="popup">dir</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_002" data-transition="pop" data-rel="popup">CloseMsgPipe</a>(
			<a href="#pop_std_bin" data-transition="pop" data-rel="popup">isCmd</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_003" data-transition="pop" data-rel="popup">Execute</a>(
			<a href="#pop_str_jsc" data-transition="pop" data-rel="popup">js</a>,
			<a href="#pop_str_005" data-transition="pop" data-rel="popup">id</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_004" data-transition="pop" data-rel="popup">GetEnv</a>(
			<a href="#pop_std_str" data-transition="pop" data-rel="popup">name</a> )
			→ <b>String</b>
		</div>
		<div class="samp">
			<a href="#pop_dsc_005" data-transition="pop" data-rel="popup">GetVersion</a>() → <b>Number</b>
		</div>
		<div class="samp">
			<a href="#pop_dsc_006" data-transition="pop" data-rel="popup">IsDone</a>() → <b>Boolean</b>
		</div>
		<div class="samp">
			<a href="#pop_dsc_007" data-transition="pop" data-rel="popup">IsReady</a>() → <b>Boolean</b>
		</div>
		<div class="samp">
			<a href="#pop_dsc_008" data-transition="pop" data-rel="popup">OpenMsgPipe</a>(
			<a href="#pop_std_bin" data-transition="pop" data-rel="popup">isCmd</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_009" data-transition="pop" data-rel="popup">Run</a>(
			<a href="#pop_str_pth" data-transition="pop" data-rel="popup">file</a>,
			<a href="#pop_str_005" data-transition="pop" data-rel="popup">id</a>,
			<a href="#pop_str_lst" data-transition="pop" data-rel="popup">newPaths</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_00a" data-transition="pop" data-rel="popup">SendMessage</a>(
			<a href="#pop_std_str" data-transition="pop" data-rel="popup">msg</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_00b" data-transition="pop" data-rel="popup">SendPipeMsg</a>(
			<a href="#pop_std_str" data-transition="pop" data-rel="popup">msg</a>,
			<a href="#pop_std_bin" data-transition="pop" data-rel="popup">isCmd</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_00c" data-transition="pop" data-rel="popup">SetEnv</a>(
			<a href="#pop_std_str" data-transition="pop" data-rel="popup">name</a>,
			<a href="#pop_std_str" data-transition="pop" data-rel="popup">val</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_00d" data-transition="pop" data-rel="popup">SetOnDone</a>(
			<a href="#pop_fnc_001" data-transition="pop" data-rel="popup">cb</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_00e" data-transition="pop" data-rel="popup">SetOnError</a>(
			<a href="#pop_fnc_002" data-transition="pop" data-rel="popup">cb</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_00f" data-transition="pop" data-rel="popup">SetOnMessage</a>(
			<a href="#pop_fnc_002" data-transition="pop" data-rel="popup">cb</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_010" data-transition="pop" data-rel="popup">SetOnOutput</a>(
			<a href="#pop_fnc_003" data-transition="pop" data-rel="popup">cb</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_011" data-transition="pop" data-rel="popup">SetOnReady</a>(
			<a href="#pop_fnc_001" data-transition="pop" data-rel="popup">cb</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_012" data-transition="pop" data-rel="popup">Start</a>(
			<a href="#pop_lst_001" data-transition="pop" data-rel="popup">args</a>,
			<a href="#pop_std_lst" data-transition="pop" data-rel="popup">paths</a> )
		</div>

	</div>

	<div data-role="popup" id="pop_std_bin" class="ui-content"><b>Boolean</b></div>
	<div data-role="popup" id="pop_std_lst" class="ui-content"><b>List</b></div>
	<div data-role="popup" id="pop_std_str" class="ui-content"><b>String</b></div>
	<div data-role="popup" id="pop_str_jsc" class="ui-content"><b>String:</b> <i>javascript code</i></div>
	<div data-role="popup" id="pop_str_lst" class="ui-content"><b>String:</b> <i>separated</i></div>
	<div data-role="popup" id="pop_str_pth" class="ui-content"><b>String:</b> <i>path to file or folder ( <docstr>“/absolute/...”</docstr> or <docstr>“relative/...”</docstr> )</i></div>
	<div data-role="popup" id="pop_str_001" class="ui-content"><b>String:</b> <i>path to file or folder ( <docstr>“/absolute/...”</docstr> or <docstr>“relative/...”</docstr> ):</i> <docstr>“NODE_PATH env variable”</docstr></div>
	<div data-role="popup" id="pop_str_002" class="ui-content"><b>String:</b> <docstr>“<a href="" onclick="app.ShowPopup('allow app')">extended</a>.* methods in default main instance”</docstr>, <docstr>“ <a href="" onclick="app.ShowPopup('dont use named pipes for messaging”, “ nostart:disable auto start”, “ esm:use EcmaScript-Modules')">legacy</a>”</docstr></div>
	<div data-role="popup" id="pop_str_003" class="ui-content"><b>String:</b> <docstr>“name”</docstr> or <docstr>“name^ver”</docstr></div>
	<div data-role="popup" id="pop_str_004" class="ui-content"><b>String:</b> <i>optional target directory</i></div>
	<div data-role="popup" id="pop_str_005" class="ui-content"><b>String:</b> <i>Context ID</i></div>
	<div data-role="popup" id="pop_lst_001" class="ui-content"><b>List:</b> argument array</div>
	<div data-role="popup" id="pop_fnc_001" class="ui-content"><b>function</b>()</div>
	<div data-role="popup" id="pop_fnc_002" class="ui-content"><b>function</b>(
		<a href="" onclick="app.ShowPopup('String')">msg</a>
	)</div>
	<div data-role="popup" id="pop_fnc_003" class="ui-content"><b>function</b>(
		<a href="" onclick="app.ShowPopup('String')">stdout</a>
	)</div>
	<div data-role="popup" id="pop_dsc_001" class="ui-content"><b>node.AddModule</b><br>Install a node module from npmjs.org<br>$ node.AddModule(name, dir) $</div>
	<div data-role="popup" id="pop_dsc_002" class="ui-content"><b>node.CloseMsgPipe</b><br>Close a message pipe<br>$ node.CloseMsgPipe(isCmd) $</div>
	<div data-role="popup" id="pop_dsc_003" class="ui-content"><b>node.Execute</b><br>Execute a line of code in the node process.<br>$ node.Execute(js, id) $</div>
	<div data-role="popup" id="pop_dsc_004" class="ui-content"><b>node.GetEnv</b><br>Get a process environment variable.<br>$ node.GetEnv(name) $</div>
	<div data-role="popup" id="pop_dsc_005" class="ui-content"><b>node.GetVersion</b><br>Returns the plugin version<br>$ node.GetVersion() $</div>
	<div data-role="popup" id="pop_dsc_006" class="ui-content"><b>node.IsDone</b><br>Returns if the node process exited<br>$ node.IsDone() $</div>
	<div data-role="popup" id="pop_dsc_007" class="ui-content"><b>node.IsReady</b><br>Returns if the Node component is ready for use<br>$ node.IsReady() $</div>
	<div data-role="popup" id="pop_dsc_008" class="ui-content"><b>node.OpenMsgPipe</b><br>Open a message pipe<br>$ node.OpenMsgPipe(isCmd) $</div>
	<div data-role="popup" id="pop_dsc_009" class="ui-content"><b>node.Run</b><br>Run a NodeJS source file. Use id to run in a new context<br>$ node.Run(file, id, newPaths) $</div>
	<div data-role="popup" id="pop_dsc_00a" class="ui-content"><b>node.SendMessage</b><br>Send a message to the running node process. Calls cb of parent.SetOnMessage<br>$ node.SendMessage(msg) $</div>
	<div data-role="popup" id="pop_dsc_00b" class="ui-content"><b>node.SendPipeMsg</b><br>Send a message over the message pipe<br>$ node.SendPipeMsg(msg, isCmd) $</div>
	<div data-role="popup" id="pop_dsc_00c" class="ui-content"><b>node.SetEnv</b><br>Set a process environment variable.<br>$ node.SetEnv(name, val) $</div>
	<div data-role="popup" id="pop_dsc_00d" class="ui-content"><b>node.SetOnDone</b><br>Define a callback function which is called when the node process has exited.<br>$ node.SetOnDone(cb) $</div>
	<div data-role="popup" id="pop_dsc_00e" class="ui-content"><b>node.SetOnError</b><br>Define a callback function which is called when the node process prints to stderr.<br>$ node.SetOnError(cb) $</div>
	<div data-role="popup" id="pop_dsc_00f" class="ui-content"><b>node.SetOnMessage</b><br>Define a callback function which is called when a system/pipe message was received from the node process.<br>$ node.SetOnMessage(cb) $</div>
	<div data-role="popup" id="pop_dsc_010" class="ui-content"><b>node.SetOnOutput</b><br>Define a callback function which is called when the node process prints to stdout.<br>$ node.SetOnOutput(cb) $</div>
	<div data-role="popup" id="pop_dsc_011" class="ui-content"><b>node.SetOnReady</b><br>Define a callback function which is called when the Node component is ready for use.<br>$ node.SetOnReady(cb) $</div>
	<div data-role="popup" id="pop_dsc_012" class="ui-content"><b>node.Start</b><br>Start the main Node process<br>$ node.Start(args, paths) $</div>
</div>
</body>

</html>
