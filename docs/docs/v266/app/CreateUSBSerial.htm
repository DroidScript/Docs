
<!DOCTYPE html>
<html>

<head>
	<title>CreateUSBSerial</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" id="themeJQ" href="../css/themes/default/theme-dark.min.css"/>
	<link rel="stylesheet" href="../css/themes/default/jquery.mobile.structure-1.2.0.min.css"/>
	<link rel="stylesheet" id="themePrism" href="../css/themes/prism/dark.min.css"/>
	<link rel="stylesheet" id="themeDocs" href="../css/docs-dark.min.css"/>

	<script src="../js/forward.js"></script>
	<script src="../js/energize-min.js"></script>
	<script src="../js/jquery-1.8.1.min.js"></script>
	<script src="../js/jquery.mark.es6.min.js"></script>
	<script src="../../app.js"></script>
	<script src="../js/common.js"></script>
	<script src="../js/example.js"></script>
	<script src="../js/jquery.mobile-1.2.0.min.js"></script>
</head>

<body>
<div data-role="page" data-theme="a">

	<div data-role="header" data-position="fixed">
		<a href='#' class='ui-btn-left' data-icon='arrow-l' onclick="history.back(); return false">Back</a>
		<h1>CreateUSBSerial</h1>
		<a class="ui-btn-right" data-icon="gear" data-iconpos="notext" onclick="tglTheme()"></a>
	</div>

	<div style="position:fixed; top:40px; width:100%; text-align:center; z-index:1101;">
		<div id="appPopup" class="androidPopup">Hello World</div>
	</div>

	<div data-role="content">

		<div class="samp samp-inline" style="font-size:revert; padding:10px 15px">
		<b>Content:</b><br>
		<span style="display:inline-block;padding-left:2em;">
				- <a href="" onclick="jumpTo('Methods')">Methods</a><br>
			</span><br>
		</div>

		<p>The USBSerial component can be used to communicate with other USB devices connected to yours.</p>

		<div class="samp">
		usb = app.CreateUSBSerial(
			<a href="#pop_num_001" data-transition="pop" data-rel="popup">baudRate</a>,
			<a href="#pop_num_002" data-transition="pop" data-rel="popup">dataBits</a>,
			<a href="#pop_num_003" data-transition="pop" data-rel="popup">stopBits</a>,
			<a href="#pop_num_004" data-transition="pop" data-rel="popup">parity</a>,
			<a href="#pop_num_005" data-transition="pop" data-rel="popup">device</a> )
			→ <b>app object:</b> USBSerial
		</div>

		<p>The default constructor values are:<br>
		<span style="display:inline-block;padding-left:1em;">
			baudrate: 9600<br>
			To find out more about RTD and DTR or USB serial at all visit <a href="https://en.wikipedia.org/wiki/RS-232#Data_and_control_signals" onclick="return OpenUrl(this.href);">Wikipedia: RS-232</a><br>
		</span><br>
		<br>
		<red>Note: this application only works on devices that support OTG and allow access to external serial devices.</red><br>
		<b>Known to work:</b> Nexus7, GalaxyS3/S4, ExperiaZUltra, TescoHudl<br>
		<b>Dont work:</b> Nexus4, GalaxyS1, AsusMemo</p>
		<h3>Methods</h3>
		<p>The following methods are available on the <strong>USBSerial</strong> object:</p>

		<div class="samp">
			<a href="#pop_dsc_001" data-transition="pop" data-rel="popup">Batch</a>(
			<a href="#pop_obj_001" data-transition="pop" data-rel="popup">properties</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_002" data-transition="pop" data-rel="popup">GetCD</a>()
		</div>
		<div class="samp">
			<a href="#pop_dsc_003" data-transition="pop" data-rel="popup">GetDTR</a>()
		</div>
		<div class="samp">
			<a href="#pop_dsc_004" data-transition="pop" data-rel="popup">GetRTS</a>()
		</div>
		<div class="samp">
			<a href="#pop_dsc_005" data-transition="pop" data-rel="popup">GetType</a>() → <b>String:</b> <docstr>“USBSerial”</docstr>
		</div>
		<div class="samp">
			<a href="#pop_dsc_006" data-transition="pop" data-rel="popup">IsConnected</a>() → <b>Boolean</b>
		</div>
		<div class="samp">
			<a href="#pop_dsc_007" data-transition="pop" data-rel="popup" class="premHint">Method</a>(
			<a href="#pop_std_str" data-transition="pop" data-rel="popup">name</a>,
			<a href="#pop_lst_001" data-transition="pop" data-rel="popup">types</a>,
			<a href="#pop_std_str" data-transition="pop" data-rel="popup">p1</a>,
			<a href="#pop_std_str" data-transition="pop" data-rel="popup">p2</a>,
			<a href="#pop_std_str" data-transition="pop" data-rel="popup">p3</a>,
			<a href="#pop_std_str" data-transition="pop" data-rel="popup">p4</a> )
			→ <b>all types</b>
		</div>
		<div class="samp">
			<a href="#pop_dsc_008" data-transition="pop" data-rel="popup">SetDataMode</a>(
			<a href="#pop_str_001" data-transition="pop" data-rel="popup">mode</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_009" data-transition="pop" data-rel="popup">SetDTR</a>(
			<a href="#pop_std_bin" data-transition="pop" data-rel="popup">onOff</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_00a" data-transition="pop" data-rel="popup">SetMaxRead</a>(
			<a href="#pop_num_int" data-transition="pop" data-rel="popup">bytes</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_00b" data-transition="pop" data-rel="popup">SetMaxWrite</a>(
			<a href="#pop_num_int" data-transition="pop" data-rel="popup">bytes</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_00c" data-transition="pop" data-rel="popup">SetOnReceive</a>(
			<a href="#pop_fnc_001" data-transition="pop" data-rel="popup">callback</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_00d" data-transition="pop" data-rel="popup">SetRTS</a>(
			<a href="#pop_std_bin" data-transition="pop" data-rel="popup">onOff</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_00e" data-transition="pop" data-rel="popup">SetSplitMode</a>(
			<a href="#pop_str_002" data-transition="pop" data-rel="popup">mode</a>,
			<a href="#pop_mul_001" data-transition="pop" data-rel="popup">p2</a>,
			<a href="#pop_mul_001" data-transition="pop" data-rel="popup">p3</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_00f" data-transition="pop" data-rel="popup">SetTimeout</a>(
			<a href="#pop_num_mls" data-transition="pop" data-rel="popup">ms</a> )
		</div>
		<div class="samp">
			<a href="#pop_dsc_010" data-transition="pop" data-rel="popup">Start</a>()
		</div>
		<div class="samp">
			<a href="#pop_dsc_011" data-transition="pop" data-rel="popup">Stop</a>()
		</div>
		<div class="samp">
			<a href="#pop_dsc_012" data-transition="pop" data-rel="popup">Write</a>(
			<a href="#pop_std_str" data-transition="pop" data-rel="popup">text</a>,
			<a href="#pop_str_003" data-transition="pop" data-rel="popup">encoding</a> )
		</div>

	</div>

	<div data-role="popup" id="pop_std_bin" class="ui-content"><b>Boolean</b></div>
	<div data-role="popup" id="pop_std_str" class="ui-content"><b>String</b></div>
	<div data-role="popup" id="pop_num_int" class="ui-content"><b>Number:</b> <i>integer</i></div>
	<div data-role="popup" id="pop_num_mls" class="ui-content"><b>Number:</b> <i>milliseconds</i></div>
	<div data-role="popup" id="pop_num_001" class="ui-content"><b>Number:</b> <i>integer:</i> 300 or 600 or 1200 or 2400 or 4800 or 9600 or 19200 or 38400 or 57600 or 115200 or 230400 or 460800 or 921600</div>
	<div data-role="popup" id="pop_num_002" class="ui-content"><b>Number:</b> <i>integer:</i> 5 or 6 or 7 or 8</div>
	<div data-role="popup" id="pop_num_003" class="ui-content"><b>Number:</b> <i>integer:</i> 1 or 2 or 15</div>
	<div data-role="popup" id="pop_num_004" class="ui-content"><b>Number:</b> <i>integer:</i> <a href="" onclick="app.ShowPopup('none')">0</a> or <a href="" onclick="app.ShowPopup('odd')">1</a> or <a href="" onclick="app.ShowPopup('even')">2</a> or <a href="" onclick="app.ShowPopup('mark')">3</a> or <a href="" onclick="app.ShowPopup('space')">4</a></div>
	<div data-role="popup" id="pop_num_005" class="ui-content"><b>Number:</b> pid</div>
	<div data-role="popup" id="pop_str_001" class="ui-content"><b>String:</b> <docstr>“<a href="" onclick="app.ShowPopup('comma separated text value')">Hex</a>”</docstr> or <docstr>“<a href="" onclick="app.ShowPopup('comma separated byte numbers')">Int</a>”</docstr> or <docstr>“<a href="" onclick="app.ShowPopup('string of text characters')">Text</a>”</docstr> or <docstr>“&lt;<a href="" onclick="app.ShowPopup('UTF-16L/BE')">encoding</a>&gt;”</docstr></div>
	<div data-role="popup" id="pop_str_002" class="ui-content"><b>String:</b> <docstr>“End”</docstr> or <docstr>“Start-End”</docstr> or <docstr>“Size”</docstr></div>
	<div data-role="popup" id="pop_str_003" class="ui-content"><b>String:</b> <docstr>“US-ASCII”</docstr> or <docstr>“UTF16L/BE”</docstr></div>
	<div data-role="popup" id="pop_mul_001" class="ui-content"><b>String</b><br><b>Number:</b> <i>integer</i></div>
	<div data-role="popup" id="pop_obj_001" class="ui-content"><b>Object:</b> { <a href="" onclick="app.ShowPopup('List: args')">COMMAND</a> }</div>
	<div data-role="popup" id="pop_lst_001" class="ui-content"><b>List:</b> boolean,char,byte,short,int,long,float,double,String,CharSequence,...</div>
	<div data-role="popup" id="pop_fnc_001" class="ui-content"><b>function</b>(
		<a href="" onclick="app.ShowPopup('String')">data</a>
	)</div>
	<div data-role="popup" id="pop_dsc_001" class="ui-content"><b>usb.Batch</b><br>Batch method calls to be able to set all object's properties at once.<br>Note that you need to specify each parameter (use <docstr>“”</docstr> or <span class="token keyword">null</span> to leave some out)<br>Inherited methods can be called by appending an underscore to the function name (ie. txt<span class="token punctuation">.</span><span class="token function">Batch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">SetBackColor_</span><span class="token operator">:</span> <span class="token punctuation">[</span><docstr>“red”</docstr><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></div>
	<div data-role="popup" id="pop_dsc_002" class="ui-content"><b>usb.GetCD</b><br>Raises the <b>C<strong>arrier </strong>D</b>etect bit from the unterlying UART protocol. It can usually be used to detect if a serial device is connected or has been terminated.</div>
	<div data-role="popup" id="pop_dsc_003" class="ui-content"><b>usb.GetDTR</b><br>Get the <b>D<strong>ata </strong>T<strong>erminal </strong>R</b>eady state which indicates the terminal is ready for communications and may initiate a communication channel.</div>
	<div data-role="popup" id="pop_dsc_004" class="ui-content"><b>usb.GetRTS</b><br>Get the <b>R<strong>equest </strong>T</b>o <b>S</b>end state that indicates that you may send data to the target device.</div>
	<div data-role="popup" id="pop_dsc_005" class="ui-content"><b>usb.GetType</b><br>Returns the control class name.</div>
	<div data-role="popup" id="pop_dsc_006" class="ui-content"><b>usb.IsConnected</b><br>Returns whether a USB serial device is connected by actively checking the presence of a device.</div>
	<div data-role="popup" id="pop_dsc_007" class="ui-content"><b>usb.Method</b><br>Allows access to other functions defined on the object in Java via reflection.<br><br><div class='premHint'><strong>Note: This function is a premium feature. Please consider subscribing to Premium to use this feature and support DroidScript in its further development.</strong></div></div>
	<div data-role="popup" id="pop_dsc_008" class="ui-content"><b>usb.SetDataMode</b><br>Enable sending data in several modes.</div>
	<div data-role="popup" id="pop_dsc_009" class="ui-content"><b>usb.SetDTR</b><br>Raises the <b>D<strong>ata </strong>T<strong>erminal </strong>R</b>eady state to indicate that you may now receive data from the target device.</div>
	<div data-role="popup" id="pop_dsc_00a" class="ui-content"><b>usb.SetMaxRead</b><br>Define the maximum amount of bytes you want to receive at once.</div>
	<div data-role="popup" id="pop_dsc_00b" class="ui-content"><b>usb.SetMaxWrite</b><br>Define maximum amount of bytes to send at once.</div>
	<div data-role="popup" id="pop_dsc_00c" class="ui-content"><b>usb.SetOnReceive</b><br>The SetOnReceive callback is called automatically after data has been received via the USB serial connection.</div>
	<div data-role="popup" id="pop_dsc_00d" class="ui-content"><b>usb.SetRTS</b><br>Raises the <b>R<strong>equest </strong>T</b>o <b>S</b>end state to indicate that you want to send data to the target device.</div>
	<div data-role="popup" id="pop_dsc_00e" class="ui-content"><b>usb.SetSplitMode</b><br>Tells the serial listener how to split received data. Splitted data will result in multiple OnReceive calls.<br>p2 and p3 have different purposes for different modes:<br><table><tr><th>mode</th><th>p1</th><th>p2</th></tr><tr><td>Size</td><td>Size of one data package</td><td>-</td></tr><tr><td>End</td><td>Byte indicating end of data</td><td>-</td></tr><tr><td>Start-End</td><td>Byte indicating start of data</td><td>Byte indicating end of data</td></tr></table></div>
	<div data-role="popup" id="pop_dsc_00f" class="ui-content"><b>usb.SetTimeout</b><br>Set timeout</div>
	<div data-role="popup" id="pop_dsc_010" class="ui-content"><b>usb.Start</b><br>Start listening to the USB serial connection.</div>
	<div data-role="popup" id="pop_dsc_011" class="ui-content"><b>usb.Stop</b><br>Stop listening on USB serial connection</div>
	<div data-role="popup" id="pop_dsc_012" class="ui-content"><b>usb.Write</b><br>Send data over the USB serial connection to the other device.</div>
</div>
</body>

</html>
