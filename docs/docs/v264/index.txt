intro/00ReleaseNotes.htm := Release Notes Back Release Notes Hello World Content: - DS 2.64b1(05-Oct 2023) - DS 2.63b1(21-Sep 2023) - DS 2.62b3 - DS 2.62b2(23-Jul 2023) - DS 2.62b1(15-Jun 2023) • DS 2.61(23-Mar-2023) - DS 2.60b1(28-Feb-2023) - DS 2.58b1(08-Jan-2023) • DS 2.57(24-Nov-2022) - DS 2.56b1(15-Nov-2022) - DS 2.55b1(23-Oct-2022) - DS 2.54b1(11-Sep-2022) - DS 2.53b1(24-Aug-2022) - DS 2.52b1(07-Jun-2022) - DS 2.51b1(02-Mar-2022) - DS 2.51a1(15-Feb-2022) • DS 2.50(31-Dec-2021) - DS 2.17b1(23-Dec-2021) - DS 2.14b1(07-Dec-2021) - DS 2.13b1(18-Nov-2021) - DS 2.12b1(23-Jul-2021) - DS 2.11b2(23-Jul-2021) - DS 2.11b1(16-Jul-2021) - DS 210b1(20-May-2021) • DS 209(06-May-2021) - DS 208b2(04-May-2021) - DS 208b1(20-Apr-2021) - DS 207b1(18-Mar-2021) • DS 206(04-Mar-2021) • DS 205(03-Mar-2021) - DS 204b1(18-Feb-2021) - DS 203b1(08-Feb-2021) • DS 202(08-Feb-2021) • DS 1.80(20-Jan-2020) • DS 1.78(27-Oct-2019) • DS 1.76(27-Aug-2019) • DS 1.74(19-Jun-2019) • DS 1.71(13-Jan-2019) • DS 1.70(09-Jan-2019) • DS 1.68(30-Aug-2018) • DS 1.65(23-Aug-2018) • DS 1.61(22-12-2017) • DS 1.59(23-Dec-2017) • DS 1.57(09-Nov-2017) • DS 1.56(18-Aug-2017) • DS 1.54(16-Jun-2017) • DS 1.50(30-Apr-2017) • DS 1.45 • DS 1.42(02-Dec-2016) • DS 1.41 • DS 1.38 • DS 1.36(26-Sep-2016) • DS 1.34(29-Apr-2016) • DS 1.32(15-Dec-2015) • DS 1.15 • DS 1.11 • DS 1.09 • DS 1.08 • DS 1.06 • DS 1.05(24-May-2014) ])/$1\\$2/ /:/:/ --> DS 2.64b1(05-Oct 2023) - Added usb.GetDTR(), usb.GetRTS(), usb.GetCD() methods. - Changed to usb.IsConnected() method to actively check for device presence. - Fixed AAB builds ignoring build.json on scoped storage. - Added webview 'Persist' option, keeps file cache, history and form data between re-loads/startups. - Added webview 'ClearCookies' option, clears cookies at startup. - Added webview.ClearCookies() method. - Added webview.SetInject( file ) injects a script immediately after page load. - Added warning about non-latin chars on package name. - Fixed AAB building with non-latin chars in app title. - Fixed Saving/Loading of SPKs with non-latin names. - Added 'spk' option to app.ZipFolder() method, creates an SPK from a DS project folder. - Added support for showing Img/app-icon.png in device IDE apps list. - Removed image file case sensitivity check in APKs (for speed). - Added warning about non-latin file names during apk/aab builds. - Fixed issue with "No Permissions" on Android 13 APK installs. DS 2.63b1(21-Sep 2023) - Default AAB/APK target API is now 33. - Upgraded app.CreatePlayStore() to use Android Billing library 6.0.1 - Added 'version' field to getinfo end-point response (for wifi ide). - Added 'ScratchPad' extension to device IDE. - Updated UI libs/Layout editor to v0.26 (for experiments mode) - Added 'local' option to webview, loads urls starting with / from /Storage/[AppName]/ instead. - Added READ_SMS permission to X version of DS. - Added Python support under 'experiments' mode. DS 2.62b3 - Added app.IsDebugVisible() method. - Added 'dialog' and 'clear' options to app.ShowDebug() method. - Added ext.Post( extName, msg ) method for posting between IDE extensions. - Added 'add' option to web/app.SetUserAgent() appends to default user agent. - Added support for Img/app-icon.png as alternative source of app icon. - Small bugfix in XMLHttpRequest polyfill for V8/cgf.Fast mode. - Added new cfg.Serv option, serves html/hybrid apps from a built-in http server. - Prevented _Init function being called from app.js when not in DS webview. - Fixed docs/samps animation flicker after disconnecting wifi editor. - Stopped the 'Blocked a frame' error on Hybrid i-frames with CORS. - Changed app.Alert to use standard alert() function if no title specified. - Prevented screen lock while app is running inside IDE. - Debug overlay now shown before OnStart() is called. - Added new ext.isConnected() method + ext_OnConnect/ext_OnDisconnect callbacks for extensions. - Added new ext_OnProject callback, called when new project is loaded by IDE. - Fixed CodeEdit control calling OnChange when the SetText method is called. - Fixed app.CreateNode() missing error logging issue. - Added new cfg.Console option, shows console instead of GUI (drawers still work). - Added new app.GetDebug() method to return the current debug switches. - Added web.LoadFailed() method to detect WebView page load errors. - Added web.GetHomeUrl() to get starting url. - Updated DroidStore to use Justin's latest minimal dark version. DS 2.62b2(23-Jul 2023) - Added 'NoCors' option to app.SetOptions() for Hybrid apps. - Enabled 'NoCors' option by default for Hybrid apps. - Update UI components to version 0.24. - Fixed DS 'Light' Theme not working when phone in dark-mode. - Allowed users to build APK even if builder is out of date. - Fixed Job scheduler not working in APKs. - Updated the extension.js to support ext_OnOpen. - Added 'NoAccel' option to WebView (allow use on OrangePi 3). DS 2.62b1(15-Jun 2023) - Added support for full screen mode in WebView. - Added 'NoScrollbar' option to ScrollView. - Added webView.SetContextMenus( "Copy URL,Open URL", "Download Image" ) - Added webView.SetOnContextMenu callback (=> item, url, img, type ) - Removed 'annoying' dot from debug output of NodeJs. - Added optional 'newPaths' parameter to node.Run method (sets new module search folders). - Changed Node component not to use named pipes for messaging (use 'legacy' option to revert). - Enabled DS extensions to run server side node scripts (/Extensions/Test/Server/node_Test.js) - Added 'DS_DIR' environment variable for DS extensions to get full path to DS folder. - Added 'NoCors' option to webview (attempts to disable CORS and i-frame restrictions) - Fixed issue with css and json files with the same name as app being renamed to _main_. - Added 'ShowWhenLocked', 'TurnScreenOn' and 'KeepScreenOn' options to app.CreateOverlay method. DS 2.61(23-Mar-2023) - Updated UI plugin to v0.22 DS 2.60b_p4(21-Mar-2023) - FileManager extension now supports remote install of APKs/SPKs/PPKs. - FileManager extension now allows diff comparison of two text files. - Device now displays multiple remote (wifi ide) connections. - Fixed crash when switching to terminal. - Fixed crash after subscribing to monthly premium. - Added yearly premium subscription option (cheaper). DS 2.60b_p3(28-Feb-2023) - Extension API func ext.Open() now switches to coding tabs when loading/displaying a file. - Added new 'options' param to ide.Obfuscate(), use 'noswap' to prevent app* swapify. - Fixed missing 'Billing' permission in AABs when using app.CreatePlayStore. - Fixed missing 'Accounts' permission in AABs when using app.GetUser/Accounts. - Fixed the double-tap wifi "EADDRINUSE" error in wifi ide. - Added DS build number to About box + new app.GetDSBuild() method. - Tidied up app.CreateBluetoothList() layout. - Prevented ide.AddModule from firing more than once per run. DS 2.60b_p2(21-Feb-2023) - Fixed issue with using ctrl.Batch() method with obfuscation. - Removed troublesome bytecode file. DS 2.60b1(28-Feb-2023) - Added FLA_MUTABLE to app.SetInForeground() and others to stop API 31 error. - Added app.GetIsBatteryOptimized() detects if app is being optimized. - Added app.ShowBatterySettings() show user battery optimization settings. - Added foreground location service support for Android 10+. - Project dir is now added to module search paths for cfg.Node apps. - Added new obfuscate option to build.json (array of extra files to obfuscate). - Added ide.Obfuscate( src,dest ) method (useful for building extensions/plugins). - Added new !clean IDE command (cleans internal cache/temp dirs and re-extracts internal assets) - Added new !reset IDE command (resets to fresh install state, keeps projects & prefs) - Fixed bug with app.HttpRequest() and docs sample. - Upgraded Node from version 12 to version 16. - Fixed issue with ide.AddModule() randomly missing out modules. - Fixed problem with multiple @ symbols in ide.AddModule() method. - Added new cfg.NodeESM option to support use of ES modules. - Added new 'esm' option to app.CreateNode() to support ES modules. - Added new 'debug' option to app.CreateNode() enables generic debug trace for express and others. - Added new 'id' parameter to node.Run/Execute calls (for isolating script contexts in extended mode). - Fixed issue with BLE onUartReceive returning atob wrapped values. - Fixed issue building APKs with non-english characters in app title. - Fixed bug with quotes in debug run box causing DS crash. - Update internal docs to v237. - Fixed mail.Send for Android 11. - GameView: Added default loading splash screen. - GameView: Added gfx.SetSplash() (allows use of animated gif during load). - GameView: Fixed bug where OnReady called too early when loading text. - GameView: Added gfx.useCanvas property (use outside of OnLoad). - GameView: Added new gfx.debug=true option to visualise physics objects (use outside OnLoad) - GameView: Added new AddShape( 'polygon', [[x,y],[x,y],..] ) option to physics. - GameView: Fixed keyboard bug where keydown not being called in OnControl function. - GameView: Fixed bug where natural size of sprites was not available after load. - GameView: Added new ide.Export("GameView",src,dest) command to export game as HTML. DS 2.58b1(08-Jan-2023) - UI plugin now automatically added to APKs when building Hybrid apps. - Fixed atob2 errors in Hybrid apps. - Fixed plugin sub-folders unwanted .js extension swaps in APK builds. - Fixed building APK with Hybrid apps. - Fixed missing options parameter on app.UpdateProgressBar. - Added 'shallow' option to app.ExtractAssets() method (only extracts top level). - Added 'extended' option to app.CreateNode() method (allows use of app* methods). - Added 'documents' to app.GetSpecialFolder() method. - Added new Bluetooth permissions for Android 12. - Improved notification listener robustness. - Added app.GetPublicFolder() - Added app.GetTempFolder() method (Android automatically deletes old files if needed) - Added '/Public' file path support (maps to scoped/sandbox public folder for app). - Added '/Private' file path support (maps to app's private folder). - Added '/Temp' file path support (maps to app's cache/temp folder). - Added 'uri' type to app.SendIntent() extras. - Added 'Camera Photo' sample (uses built-in camera app) - Changed app.SaveJson() to take any object type. - Added node.SetEnv( name, val ) method to nodejs component. - Fixed list control not auto-expanding when calling SetTextSize or SetDivider. - Added 'Expand' method to list control. - Fixed app.Uri2Path for folder names containing blanks. - Fixed issue with drawer not displaying in cfg.Fast mode. - Fixed edit.setCursorColor() for Android 10+. - Added new edit.SetSelectColor() method. DS 2.57(24-Nov-2022) - Chat extension now deleted on install (using Discord now). - UpdateProgressBar now has 'doevents' option to force ui update in v8 mode. - Fixed issue with slow APK builds. - Fixed issue with APK install just showing folder after build. - Hybrid apps are now auto-detected (don't need cfg.Hybrid) - Hybrid apps now removed from samples list, use UI plugin docs instead. - Main DS App class changed to DsApp, so won't clash with Hybrid/Enjine apps. - Added include() function for compatibility with Hybrid/Enjine apps. - Updated Hybrid templates. - Fixed crash with Notification listener during WhatsApp messages. DS 2.56b1(15-Nov-2022) - Hybrid components docs now visible after UI plugin install. - Layout extension now automatically installed from UI plugin. - Progress bar now shown when extracting assets at startup. DS 2.55b1(23-Oct-2022) - Added new 'CloudStore' tab to device IDE. - Added new SSH/Device Terminal tab to device IDE. - Switched device IDE 'Chat' tab to use Discord. - Added new 'RemoteTerminal' SSH extension to wifi IDE. - Move UI controls into an updatable internal DS plugin. - Support for ds:/* style paths in HTML elements (eg. ds:/Sys/app.js). - The 'FontAwesome' option can now be used with app.CreateTabs. - Changed wifi IDE right side tabs to show icons only. - Changed node.Run() method to use separate VM contexts on each call. - Changed FileDiff extension to full browser width. - Fixed problem of ide.AddModule() only working once after DS restart. - Added link to Playstore unsubscribe page. DS 2.54b1(11-Sep-2022) - Added 'YouTube Player' and 'Google Maps' samples. - Added 'Card Flip' and 'Card Animation' samples. - Added 'Shopping Cart' sample. - Fixed bugs with device IDE image chooser. - Added ext.displayWidth + ext.displayHeight to extensions API. - Added ext.Play, ext.Stop, ext.Save to extensions API. - Fixed bug causing notification listener to fail. - Fixed bug with fine/coarse location in AABs. - Made AAB builder more reliable (was often getting stuck at 99%) - Added new WYSIWYG Layout extension to WiFi IDE (in experiments mode) - Added version number to APK/AAB build output files. - Added SPK auto-save feature when building APKs/AABs. - Fixed problem with Turkish characters in control callbacks. DS 2.53b1(24-Aug-2022) - Added new app.eventSource property. - Fixed extraction issues with APK asset files containing 'dots'. - Fixed mui.js not found bug when building Node APKs. - Fixed build.json being ignored for AAB files. - Fixed debug messages from NodeJS apps not readable. - Improved !addmodule command to support versions (eg. mi...@1.6.0) - Added new GitHub feature for premium users. DS 2.52b1(07-Jun-2022) - Added SetSpeed and SetPitch methods to MediaPlayer. - Plugins can now contain sub-folders ('docs' sub-folder is removed in APK build). - Added support for Cancel(id) or Cancel('*') in notification listener. - JS errors from remote pages are now ignored for HTML and Hybrid apps. - Multiple cfg.Hybrid app samples added when in 'experiments' mode. - Re-organized app templates. DS 2.51b_p3(21-Mar-2022) - Fixed app.SaveText() causing 'Storage' permission request. - Added 'fillscreen' and 'fullscreen' options for Custom Dialogs. DS 2.51b_p2(16-Mar-2022) - Updated app.ChooseFile() to support GoogleDrive,OneDrive and DropBox. - Added 'nodownload' option to app.ChooseFile (just returns uri, no downloading of files). - Added 'persist' option to app.ChooseFile (persists file permission after reboot). - Added 'pretty' option to app.Uri2Path (returns DS style paths). - AddPermission 'alert' bug fixed (introduced in 2.51b1). DS 2.51b_p1(10-Mar-2022) - AddPermission 'alert' bug fixed. - Added 'pretty path' parameter to app.GetPermission() callback. DS 2.51b1(02-Mar-2022) - Fixed playback of transparent animated gifs in Image control. - APKBuilder is no longer sensitive to spaces around brackets of LoadPlugin call. - List.OnTouch() event now returns unicode chars with correct upper case hex codes. - Transparent apps now startup with zero size (to prevent black flash). - Added cfg.Legacy option to enable various legacy transparent app behaviour. - Added app.UpdateUI() method for forcing UI drawing during heavy processing. - Enabled 3rd party cookies by default for webviews, fetch and xmlHttpRequest. - Fixed broken app.SetAlarm() method. - app.ListFolder() now supports SAF (can list outside scoped storage). DS 2.51a1(15-Feb-2022) - Added support for /Internal/* and /External/* SAF paths. - app.GetPermission() now supports 'external' and 'internal' keywords. - Replaced 'Sdcard Access' sample with 'Storage Access' sample. - Improved permissions detection for file:///android_asset paths. - Fixed 'Share SPK' for scoped storage devices. - Fixed app.SendFile, app.SendImage, app.SendMail for scoped storage devices. - Added QUERY_ALL_PACKAGES permission to X version. - Removed default params from edit/mui.js (older webviews don't not like it) - Added web.Func(name,args...) for easy calling of functions defined in a WebView. - Added app.Func(name,args...) for easy calling of main script functions from a WebView. - app.SimulateTouch() now copes with lower case keywords. - Fixed 'atob' issue with console logging in NodeJS apps. - Added new GetDocumentFile() method to Plugin parent object. - Added new app.GetRouterAddress() method. - Added tabs.SetTextSize(size,mode) method. - Added cfg.Fast mode for premium users (3x faster apps!) - Added XMLHttpRequest polyfill for Fast mode. DS 2.5_p1(06-Jan-2022) - Added 'Query Images' and 'Query Videos' samples. - Fixed crash when building APKs/AABs for Html apps. DS 2.50(31-Dec-2021) - Fixed ctrl.Batch call for base methods (use underscore) - Added app.PreventWifiSleep() to IDE server code (not sure it will help). - Fixed crash issues on ListView related to blurry icon fix. - Sped up app icon list even more and fixed its light mode text color. - Hidden 'SDK' menu for Android 10 or newer (scoped storage issues). DS 2.17b1(23-Dec-2021) - Added new 'Node' app type - cfg.Node. - Sped up app icon list display and app startup. - Added typeId field to every DS object. - Added app.Show/Hide methods. - Added obj.Batch() for faster batched method calls (set ctrl props all at once). - Added ReadFile and WriteFile to extension.js. - Introduced new 'glob' object for storing global variables (shorter alternative to app.data) - Improved MUI code completion/help in wifi-ide. - Increased size of wifi-ide tooltip docs jump link, changed from '?' to '...'. - Improved ide.AddModule() method (now shows yes/no dialog) - Fixed zip path traversal vulnerability (causes Google Play warning) - Added app.WalkFolder for recursive listing (use same options as listFolder). - Added 'NoEmpty' option to app.ListFolder and app.WalkFolder (hides empty folders) - Added 'Project' option to app.ListFolder (shows DS project folders only) - Added new extension function - openEditorFile( filename, lineOrPattern ) DS 2.14b1(07-Dec-2021) - Added 'Music Sequencer' sample. - Added 'Synth Song Player' sample. - Fixed Music docs dark theme issue in wifi ide. - Fixed blurry icons in list control (when > 64dip). - Improved app -> node messaging reliability. - Added ide.AddModule() method (adds a node module from code) - app.Script() now 'defers' execution by default. - app.Script() now has noDefer parameter (causes inline load of script) - Errors in app.Script() includes are now highlighted. - Fixed language extension bug that caused loss of code changes. - Added new CloudStore extension to the WiFi IDE (for premium users). - Modified app.GetAppPath() to return full path to resources when in APK. - Added app.ReadFileData(file,mode) method ('base64','hex','int','ascii'). - Fixed music component so it works inside APKs. - DS and all exported APKs are both 64bit and 32bit compatible by default. - mui: Added Add*** methods to MUI. - mui: Added SetColor method to Buttons - mui: Added SetColor method to FABs - mui: Button padding is added to button with null width. - mui: Add SetText method to FAB - mui: Added Add*** method to each control. - mui: Pass TextEdit control as param to pickers. - mui: Added SetTextEdit method to pickers. - mui: Added touch discovery to TextEdits - mui: Added SetOnTouch method to TextEdits - mui: Added 1 Outlined Button. A true material outline button. - mui: Added SetOnClose to AddBanner. - mui: Added SetOnClose to AddDialog. - mui: Redesign Modal dialog control. - mui: Added SetOnClose to AddModal. - mui: Added 'Full' options to AddModal. - mui: Fixed minor glitches on CreateDialog. - mui: Added SetTextEdit method to ListDialogs. - mui: Added SetOnReady and SetOnProgress method on DataTable DS 2.13b1(18-Nov-2021) - Fixed !addmodule command on slower devices. - Icon buttons sample fixed. - Plugin exceptions are now shown in debug log. - SysProc component now sets HOME and TMPDIR environment vars if none provided. - Fixed bug in 'packages' param of app.SetKioskMode() method. - Added 'Background Job' template to device IDE. - Fixed bug where version part of plugin names were not stripped off. - Blocked the use of 'Service' and 'Job' as app names. - MUI assets are now excluded from APKs if not used. - Changed camera profile for front camera recording. - Updated to newer APK/AAB v3 signature method. - Added RealPath() conversion to app.OpenDatabase() method. - Fixed app.GetIPAddress() for Android 11. - Fixed CustomTabs on Android 11. - Added 'Custom Browser Tabs' sample. - Fixed Speech Recognition on Android 11. - Fixed TextToSpeech on Android 11. - Fixed Background services for Android 11. - AAB files are now automatically signed with user.keystore file. - Added OnDone() callback to Node object. DS 2.12b1(23-Jul-2021) - Updated to Google Play Billing libraries v4. - Fixed case sensitivity issue with Desyrel font. - Allowed use of lib sub folder in plugins (for .so files) - Old Plugin folders are deleted when re-installing plugins - app.CreateNode() now supports 'paths' parameter (same as nodejs NOD_PATH env variable) - mui: Added ShowMenu() method to show menu on a given control - mui: Added SetList() method to all list control - mui: Added animation to spinner - mui: Added SetHint to Spinner - mui: Added SetList to Spinner - mui: Added SetList to Menu - mui: Added SetOnIconTouch to TextEdits with icons DS 2.11b2(23-Jul-2021) - Fixed issues with Node on 64bit devices and scoped devices. - Added app.RealPath method. Converts short file paths to full paths. - Improved 'plugin not licensed' error handling. DS 2.11b1(16-Jul-2021) - Added support for NodeJS scripts and modules! - Added new !addmodule command to wifi ide command box. - Improved wifi ide file browser drag-drop handling. - Removed 'UseBasicInput' option from chat webview. - Removed 'ongoing notification' (not effective at keeping DS alive). DS 210b1(20-May-2021) - Added new Chat tab to right slide panel of mobile IDE. - Fixed chat (red dot on tab) message indicator on wifi editor. - Added app.CreateCustomTabs (thanks to Candlelight) - Added more fine grain control over COSU Kiosk mode (for >= Android 9). - Added GetCurrentTabName() method to tab control. - Added 'NoMargins' option to tab control. - Improved app startup time slightly. - BuildAPK dialog now saves version and package name for each project. - autoPermissions value in build.json now also checked when running app in ide. - App now shows warning before exiting if required dangerous permissions are missing. - Added new noPermsAction field in build.json (set to 'exit', 'continue', 'default'). - Added new !getperms command to wifi ide (gets dangerous permissions of current app). - Added app.SaveJson and app.LoadJson methods (thanks to HJCD Studios) - Fixed broken wiki link in docs/resources. - External storage access (SAF) is now available to non-premium users. - Added 'NoVibrate' and 'Low' (priority) options to app.CreateNotification() method. - Added ongoing notification to keep DS alive in background. DS 209(06-May-2021) - Version number update only. DS 208b2(04-May-2021) - Created separate plugins page for premium (more plugins available). - app.AddCameraView() is now detected in permissions scan. DS 208b1(20-Apr-2021) - Added extra support for deep linking with 'urlScheme' tag in build.json. - Added default deep link scheme 'ds://*' and 'http://ds/*' for testing apps in IDE. - Fixed img.Play() method (should start animated gifs). - mui: Added new Spinner control. - mui: Added SetOnTouch method to DataTable. - mui: Added 'color' property on ListModern data for avatar color. - mui: To change badge color, set MUI.theme.badgeColor=color after initializing MUI. - Removed support for Admob (Google requirement). - Updated Chat component (now shows count of logged on users). DS 207b1(18-Mar-2021) - Added new 'cleartask' option to app.SendIntent(). - Fixed issue with i-frames opening separate window in html apps. - Fixed issue with IDE hiding after running app on Android10+. DS 206(04-Mar-2021) - Fix for new projects created in Wifi IDE having old 'holo' look. - mui: Fix for DataTable column sorting with duplicate vals. - Chat extension moved to 'experiments' mode. DS 205(03-Mar-2021) - Default theme for wifi ide is now dark. - mui: SetOnSelectionStatus bug in CreateDataTable docs fixed. - mui: Icons in CreateDataTable headers now showing properly. - Fixed banner add clicks always going to Premium dialog. - Improved reliability of language extension. DS 204b1(18-Feb-2021) - Added new "/Plugins" keyword to get path to plugins. - Added gfx.GetJoystick() gets object containing joystick states. - Added new gfx.multiTouch=true option to GameView (x/y vals will be arrays). - Wifi IDE app icons is now refreshed after spk installs. - GameView: Fixed gfx.Reload() not working on some devices. - Enabled the download and install of .ppk files from the DroidStore. - Fixed bug preventing multiple plugin installs at once. - app.AutoWifi and app.AutoStart now deprecated in favour of ide.AutoWifi, ide.AutoStart. - app.AutoBoot() can now contain both 'app' and 'service' keywords at same time. - Fixed app.IsStarted() to work for multi-page html apps. - Added app.ScheduleJob() method to schedule background jobs (using Job.js file). - Added 'Background Job' app template for premium users. - Added app.PinScreen() method (screen pinning must be enabled in settings). DS 203b1(08-Feb-2021) - Fixed bug with SendDataGrams showing EADDRINUSE error. - Added datagram buffer size options to Send/ReceiveDatagram (1k,2k,4k,8k,16k,32k,64k) - Added new app.GetJoystickStates() method, returns single object with all states. - Removed semi-colons from device code completion. - Download component and WebView/Html Apps now support 'content-disposition' header. - Added US_FUL_SCREE_INTENT permission if required. - Removed deprecated funcs SetLanguage, Language2Code. - Fixed obfuscation issues related to SetAppLanguage and GetAppLangCode. - Added app.CreateCanvas() method, creates blank image with auto-update turned off. - Fixed SE_ALARM permission having wrong path. - Added new ide.MakePlugin method (turns current project into a plugin and installs it). - Updated Wifi IDE toolbar and button styles. - Scoped storage state remembered from first run (safe to install your APKs on Android 10) - Added app.IsScoped() method to indicate 'scoped storage' on Android 10+. - Added SetOnRequest() to detect all WebView requests (params: url,method,isMain,isRedirect). - Added Stop() method to WebView, cancels current page load. - Added SetBlockedUrls() to WebView, comma seperated list of urls to block. DS 202(08-Feb-2021) - Fixed bad link in documentation to CloudStore component. - Update CloudStore documentation. DS 201b1 - Fixed imagegrid showing black squares after 200b1 scoped storage changes. - Added new app.Path2Uri method (gets a 'content:/*' path for images and videos). - MUI: Fixed MenuWithIcon error. - MUI: Fixed DataTable selectable icons. DS 200b1 - Fixed many file access issues on Android 10/11 with fresh DS installs. - Added '/Storage' keyword as new alternative to '/sdcard'. - Added '/External' keyword as new alternative to '/extsdcard'. - Added support for 'content:' paths on app.ReadFile() and for Image Controls. - APKBuilder now uses private storage for its temp files. - Fixed bug in plugin docs extraction (non-doc file deletion code failed). - app.ChooseFile() method now returns a second 'name' parameter in callback. DS 195b1 - Fixed bug with APK builder corrupting user assets. - Fixed issue with scoped storage re-directs. - Updated new improved search extension (thanks to Cemal) - Added new premium file differencing extension (thanks to Cemal) - Fixed assets not being added from phone Downloads folder. - Fixed issue with app.Execute obfuscation. - MUI: app.InitializeUIKit(color) to change color. - MUI: app.InitializeUIKit(color, theme) to force change the theme to dark or light. - MUI: Added new DataTable control. - MUI: Dialogs and pickers displayed on the center will now close when back key is click. - MUI: Added SetText,SetHtml,SetTextColor, SetTextSize method to banner. - MUI: Added SetTitle, SetTitleColor, SetText, SetHtml, SetTextColor, SetTextSize method to dialogs. - MUI: Added SetTitle, SetText, SetTextColor, SetHeaderColor to modal. - MUI: Added SetText, SetHtml, SetTextColor to AlertSimple. - MUI: Added SetHeight method to ListDialog and CheckList dialogs for long list. DS 194b1 - Allowed 'app' query parameter on wifi IDE urls. - Added 'Launch in new tab' option to wifi IDE app icons. - Obfuscated MUI APKs now work. - Added new built-in Music Engine (thanks to Cemal) - Updated CloudStore component to use enjine.io - Fixed bug with installing spks over existing ones. - Added SetDescription method to all controls (for accessibility) DS 193b1 - Switched to use scoped storage for user scripts in Android 10/11. - The 'Store' tab now shows a stripped down version of the DroidStore. - Added new 'Search' extension to wifi ide (thanks to Cemal) - Plugins can be uninstalled in the docs. - Extensions now show up in the docs too. - Added 'List Colors' sample. - List control can now cope with missing values between semi-colons in list. - Added basic intellisense for MUI controls. - Added intellisense for plugins to Wifi IDE. - Callbacks from BT,USB and Plugins now return source webview. - Wifi IDE now starts with code window expanded. - Added Alt-Enter key combo for forward search on highlighted word. - Wifi IDE code window now defaults to wide. - Added SetItemColor() and SetItemColorByIndex() methods to List control. - Added hidden option cfg.NoSwapify (prevents func name swapping during obfuscation) - app.Execute() is no longer obfuscated (now works from webviews inside APKs) - Added new ide command !addpackage - Plugins with version number after _underscore now installed correctly. - Refactored code suggestions (thanks to Symbroson). - Clicking the method preview in mobile ide now opens the corresponding docs page. - !addplugin behaves better when given bad plugin names. - Added Disconnect() method to WebServer (disconnects websock clients) - Added websocket buffer size options to WebServer (ws_64k,ws_128k,ws_512k,ws_1M,ws_5M,ws_10M) DS 1.92b1(28-Sep-2020) - Added latest docs with MUI and GameView updates. - Add new 'Store' tab along side standard samples (soon to show DroidStore). - Speeded up/improved app launcher page. - Added new 'ScratchPad' extension. - Added auto-translation to Language extension. - Added extension.js to DS internal assets. - Added ext.Log() function to extension.js - Added missing app.AddTabs() method. - Tabs: increased layTop height to 0.06. - Tabs: setting tab text widths based on dynamic width if unspecified. - Tabs: added "fade" option to Tabs. - Tabs: showing new tab first before hiding others to prevent flicker. - added _SetTmpDebug() and _RestoreDebug() for use in pure JS plugins/Libs. DS 1.91b2(23-Jul-2020) - DS now offers to install and run your APK after build - Added app.LaunchApp() method, launches apps if installed else tries GPlay. - Fixed app.ShowProgress can now take null as first parameter. - Fixed app background not defaulting to dark mode (grey). - Fixed APK installs from DS launching second instance of DS. - Fixed scanfile bug in 'Create Shortcut' option. - Fixed issue with custom button colors in APKs for holo theme. DS 1.91b1(16-Jul-2020) - Added new MUI* material controls for premium users! - Added MUI controls demo app to docs. - Added new 'Class' file/template. - Upgraded obfuscator to support ES6 classes properly. - Added M(ctx,func) macro for using class methods as callbacks (maintains 'this' context) - Fixed issue with Text control autoshrink mode on first draw. - Added Work-a-round for recent Android Speech recognition double results bug. - Fixed spelling of app.GetSpeechEngines(). - Added SetProgressOptions method to theme component. - Added 'Solid' option to app.ShowProgress (shows solid background behind spinner). - DS now uses app.InstallApp() to install APKs (needed for Android 10). - Fixed "Install" permission automatically added when using app.InstallApp(). - Enabled DS method auto debugging/tracing in APKs (disabled by default). - Added 'VCenter' and 'Bottom' options to text controls. - Improved extension support in Wifi IDE. - Created demo Wifi IDE extension. - You can hide your projects and files from DS by putting a ~ at front of folder/file name. - SPKs now contain a new hidden file '~package.json' with the DS version used. - Older SPKs and DS projects now default to Holo theme. - Added "Biometric" permission option. - Fixed problem with the word Add being incorrectly replaced when using Ad* methods. - NoIcons now defaults to true if a screen reader is detected. - Fixed app.GetThemeInfo() unset colours. Now returns null. - app.Install() now returns (packageName,status) params in callback. - Added new !plugindocs IDE command to fix docs for a plugin after deleting .edit folder. DS 1.90b1(26-May-2020) - Added new cfg.Dark, cfg.Light, cfg.Holo theming options. - New dark theme is used by default (use cfg.holo to go back to old look). - Added app.GetThemeInfo() method (gets main settings of current theme). - Added 'Controls Light' and 'Controls Dark' samples. - Added new switch control (slider switch). - Intermitent obfuscation errors fixed. - Added app.InstallApp(apk,callback) method (callback returns error/success status). - Added 'AllProgress' option to WebView (shows progress for all loads). - Fixed some issues with 'AutoSize/Scale' mode for text and buttons. - Disabled BaselineAligned mode for Linear Layouts (use 'BaseAlign' if needed) - Added app.GetTextBounds() to calc size of text for given font size (most params optional) - Added TW(txt,size) function to as shorthand way of getting text width (size param optional). - Added DW() and DH() convenience funcs (same as app.GetDisplayWidth/Height). - Dialog.AdjustColor is now applied before Dialog.SetDividerColor. - Added 'dialog' option to button control (picks up dialog button theme). - Added web.SetOnUrl() method to intercept url clicks (passes url to callback). - Error descriptions in the WebView no longer include "net::" on the front. - Spinner bug fixed when using spn.SetList and spn.SelectItem right after creation. - Added 'vertical' option to toggle button (makes LED go to bottom). - All controls are now automatically dimmed when disabled. - app.GetObjects() now removes destroyed child controls before returning. - Added 'external' option to app.GetPrivateFolder() method. - Added app.GetAccessibility() to check for screen readers etc (thanks to Jason Custer for Java) - Added app.GetSpeachEngines() to list installed TTS engines (thanks to Jason Custer for Java) - Fixed issues with auto-complete on device when using app.Add* methods. DS 1.82b2(24-Apr-2020) - Added Merge(), List() and Delete() methods to CloudStore component. - Added "Network" permission when using app.CreateCloudStore(). - Updated Obfuscator to ES6. - Added app.SetMargins() to set default margins for controls. - Added app.SetTextSize() to set default text size for controls. - Enabled GameView to work in IOS and Android browsers. - Enabled GameView touch events to work in mobile browsers. - Improved GameView asset loading checks. - Fixed app.ShowCheckList button size issues. - Added 'AutoSize' option to button control (Auto-sizes text to fit). - Added 'AutoShrink' option to button and text control (Auto-shrinks text to fit). - Fixed GLview (added missing libs). - Added app.SetAppLanguage(), app.GetAppLanguages(), app.GetAppLangCode(). - Deprecated app.Language2Code(), app.SetLanguage(). - Added language translation premium sample. - Added initial version of GameView docs (thanks to Symbroson). DS 1.82b1(11-Apr-2020) - Moved manifest minSdkVersion to 21 (Android 5.0) - Added new app.Add* funcs for all controls. - Added new CloudStore component + sample (premium only). - Added Listen() and SetOnNotify() methods to Notification component . - Added 'Notification Listener' sample. - Added 'action' param to SetOnBroadcast (for catching generic Android broadcasts). - Prevented OnConfig firing after screen unlock. - Fixed DS repeated re-draw after screen unlock. - Fixed use of gfx.Script() calls in GameView. - Fixed GameView issue with batched sprites not showing. - Fixed GameView to wait till all assets are loaded before calling OnReady(). - Added app.data object for storing user data globally. - Added SetOnStatus method to AdView. - Enabled the use of #rrggbb colors with gfx.SetBackColor. - Fixed "Cannot read property SetAlpha of null error" when using keyboards. - Added 'NoIcons' option to settings for screen reader support. - Updated Terminal extension to use dark theme. - Fixed wrong heading on copy app menu. DS 1.81a1(24-Jan-2020) - Fixed GLView failure. DS 1.80(20-Jan-2020) DS 1.80b2(12-Jan-2020) - Fixed problem with screen height measurement on phones with hardware buttons. DS 1.80b1(10-Jan-2020) - Added Admob support + sample for premium users. - Added net.ReceiveVideoStream() for premium users. - Added new 'Card' Layout type + sample. - Added app.SetNavBarColor/SetStatusBarColor for premium users + sample. - Added 'btn-1' to 'btn-12' to app.GetJoystickState() method. - Added __BUILD_TIME__ macro. - Added SetCorderRadius(radius) method to Linear layout control. - Fixed issue with miscalculated display height for devices with soft nav bars. - Added app.IsPortrait() convenience function. - Added 'Location' permission automatically for app.CreateBluetoothSerial() method. - Fixed missing leading zero in hexmode response for BtSerial,File,NetClient,UsbSerial objects. - Added option to BTSerial for packet length headers, eg. bt.SetSplitMode( "Head", 2, "LE" ). - Added raw 'Direct Commands' Nxt serial BT sample (same techique should work for EV3). DS 1.79a4(12-Dec-2019) - Fixed problem with loading DS plugins on Android7 and lower. DS 1.79a3(06-Dec-2019) - Added .startsWith polyfill older Androids. - Fixed crash on OrangePi Zero. - _AddPermissions() now works in IDE. - PuckJS Plugin now requests Location permission in IDE. - 3dp accuracy now supported on seekbars. - Default seekbar max-rate changed from 20ms to 100ms. - Added app.RedirectAssets. (Reads Img,Snd,Html,Misc assets from given folder not APK). - Added 'NoRedirect' to web.LoadUrl() and web.LoadHtml() methods (blocks asset redirect). - Added 'Move' touch events to GameView (and blocked null events) DS 1.79a2 - Fixed app.ShowTip error on touching tooltip. - app.WifiScan() now supports 'detail' option (returns array with details). DS 1.79a1(05-Nov-2019) - Added obj.Animate + animation sample. - Changed ListView to use normal font by default (can use 'bold' option) - Dialog titles are now thinner by default (use 'old' option to revert). - Dialog corners are now rounded by default (use 'old' option to revert). - Dialog title text size is smaller by default (use 'old' option to revert). - Added optional radius param to Dialog.SetBackColor() method. - Added Theme.SetDialogCornerRadius(), Theme.SetTitleDividerHeight(), Theme.SetTitleTextSize(). - Added Dialog.SetTitleDividerColor(), Dialog.SetTitleDividerHeight(), Dialog.SetTitleTextSize(). - Smartened up the Custom Dialog sample. - Fixed UDP send method (was broken in v178). - Fixed UDP ReceiveDatagrams() method. - Improved Wifi Broadcast sample. DS 1.78(27-Oct-2019) - Fixed 127.0.0.1 IDE error for Chromebooks. - Removed method tips question mark link for non app.* methods. DS 1.77b1(16-Oct-2019) - Improved dark mode support on device editor. - Added 'BlackGrad' option to list control. - Added gfx.GetTime() method, returns time since last gfx.Pause() or gfx.Play(). - Fixed sound.Pause() method in GameView. - Enabled OnControl() callbacks in GameView even when game is paused. - Added gfx.IsPaused() to GameView. - Added gfx.Reload() to GameView (reloads game from scratch). - Added app.SetMockLocation() for premium users. - Prevented background touch during app.ShowProgress (use 'NonModal' to revert). - Changed 'device' parameter of app.CreateUSBSerial() to select by PID not index. - Allowed app.GetPermission( "usb:"+pid ) for USB devices. - Added app.Translate(cancel,ok) method to translate buttons globally. - NetClient now supports SetSplitMode and SetDataMode (for use with AutoReceive). - Added SetTitleHeight() and SetTitleColor() methods to custom dialog. DS 1.77a1(19-Sep-2019) - Added lots of new docs (thanks to Symbroson). - Docs now support dark/light mode (thanks to Symbroson). - Remote terminal now available by default for premium users. - Fixed 'Game' template for non-premium Wifi IDE users. - Fixed Service SetInForeground permission issue. - Added btn.SetOnLongTouch method. - APK 'Debug Build' option now defaults to off and obfuscate to on. - Added app.ShowCheckList() method + sample. - Fixed problem with building APKs on Android 9. - Added optional angle parameter to glview.DrawSprite method. - Added new optional 'folder' parameter to app.ChooseFile method. DS 1.76(27-Aug-2019) - Added support for ublox-7 USB GPS module + Sample. - Added android:directBootAware to enable USB serial devices at boot. - Changed Hello World sample so it's not re-created every time. - Fixed problem with NV21toRGB32 function during camera image processing. DS 1.76b1(19-Aug-2019) - Fixed problem with NV21toRGB32 function during camera image processing. - Added support for ublox-7 USB GPS module + Sample. - Added android:directBootAware to enable USB serial devices at boot. - Changed Hello World sample so it's not re-created every time. DS 1.75b2(02-Aug-2019) - Added missing 64 bit libs for FastCanvas. DS 1.75b1(01-Aug-2019) - Fixed logic of app.SetOptions( "usebrowser") was inverted for HTML apps. - Fixed anchor tags with local relative file paths in HTML apps and WebViews. - Removed admin filter from manifest (please use 'X' version of DS for kiosk apps) DS 1.75a3(01-Aug-2019) - Fixed Webview data dir prefix issue for Android 9. - lst.SetEllipsize now sets both title and body. - GameView physics enabled for Text objects. - GameView Tween method fixed for Text objects. - obj.IsOverlap() fixed for Linear Layouts. - Temporarily removed support for NoDom option. - Removed support for GameView 'gles' mode. DS 1.75a2(23-Jul-2019) - Added support for 64bit and API28 (required by Google Play) - app.SetKioskMode( "LockTask", true ) enables proper Android COSU kiosk apps. - app.SetKioskMode( "Pin", true ) enables proper pinning/unpinning of tasks. - app.ReplaceInFile() options param can now be left blank. - app.ReplaceInFile() now accepts regex strings. - Updated GameView intellisense to include Text object. - Improved gfx.CreateText() to allow numerics (previously had to use .toString()). - Added gfx.RemoveText(), gfx.RemoveGraphic(), gfx.RemoveBackground() methods. - Added sprite.Contains(x,y) method. - Added sprite.Flip( sprite, horiz, vert ) method. DS 1.75a1 - Updated some samples to use 'this' instead of app.GetLast* - Removed app.CreateListView(), use app.CreateListDialog instead. - Sped up SQLite callbacks again. - Added 'modal' and 'kiosk' option to app.CreateDialog(). - Fixed custom dialog sizing issue when using app.SetDensity(). DS 1.74(19-Jun-2019) - Changed to darker look and feel for Wifi IDE. - Added dark mode in Wifi IDE for Premium users. - Added app.SendImage() method. - Modified internal _Cbm function slightly to allow use of local scope callback funcs. - More docs added (thanks to Symbroson) - Added _AddPlugins() function to allow manual inclusion of plugins. - Added web.SetTextZoom( zoom ). - app.CreateBluetoothList now requests permission "Location" for > Android 8. - Changed app.WifiScan now returns list with pipe | instead of comma delimeters. - Fixed app.ChooseWifi now removes duplicate ssids. - Added gfx.CreateText() method to GameView (allows use of bitmap fonts) - Fixed GameView bounce sample. DS 1.74b2(14-Jun-2019) - Changed to darker look and feel for Wifi IDE. - Added dark mode in Wifi IDE for Premium users. - Added app.SendImage() method. - Modified internal_Cbm function slightly to allow use of local scope callback funcs. - More docs added (thanks to Symbroson) - Added_AddPlugins() function to allow manual inclusion of plugins. - Added web.SetTextZoom( zoom ). - app.CreateBluetoothList now requests permission "Location" for > Android 8. - Changed app.WifiScan now returns list with pipe | instead of comma delimeters. - Fixed app.ChooseWifi now removes duplicate ssids. - Added gfx.CreateText() method to GameView (allows use of bitmap fonts) - Fixed GameView bounce sample. DS 1.73b1(03-May-2019) - Added 'boolean' type for obj.Method(). - WebViews/HTML apps now pause when not in foreground (can use 'NoPause' option). - Added CHANGE_NETWORK_STATE permission for app.SetWifiApEnabled method (for Orange-Pi). - Fixed AdjustColor() exception when dialog has not title. - Added public Object GetObject( String id ) to plugin parent object (gets a DS object). - Added "Wifi Access Point" and "IOT Device" samples. - Added "GPIO Banana-Pi" and "UART Banana-Pi" samples. - Added app.Quit( msg,[title],[options] ) method (shows message and force quits app). - Added premium nag popup every month (for non-premium users). DS 1.73a8(17-Apr-2019) - Added intellisense to device editor for GameView methods and objects. - Allowed on device function info/tips to scale up as well as shrink to fit. - Added new 'AutoSize' option to TextView (scales up and down towards target size). - Added new config keywords - cfg.NoDom, cfg.Game, cfg.Transparent, cfg.Landscape, cfg.Portrait. - Deprecated _AddOptions() method in favour of cfg.* keywords. - Added 'Bunny Storm' GameView demo. - Removed HScroll, VScroll and GLView game demos. DS 1.73a7(16-Apr-2019) - Added new app.CreateGame() method (create GameView apps with one line of code). - Disabled app.* exception logging in release builds. - Invalid id's in V8 engine clearTimeout/clearInterval calls now ignored. - Changed "Game Bounce" demo to use GameView. DS 1.73a6(11-Apr-2019) - Fixed IsDebugging results for release builds when not calling app.SetDebug. - Fixed services throwing ADB exception in APK builds. - Fixed exception when pressing back button in NoDom mode. - Fixed launcher sample for package names that contained the sequence ".gif". DS 1.73a5(07-Apr-2019) - obj.GetWidth/GetHeight/GetAbsWidth/GetAbsHeight/GetLeft/Right now all return numeric vals. - Disabled internal ADB debugging for release APKs. - Added app.SetDebug() for finer logging control (use optional switches 'console,ds,adb' or true/false). - Added app.IsDebugging() in favour of IsDebugEnabled() - Deprecated app.SetDebugEnabled() and app.IsDebugEnabled(). - Fixed gles libs included in APKs when 'gles' option not used. DS 1.73a4(28-Mar-2019) - Added 'Alarms' permission option. - Fixed AutoBoot mode for services on Oreo+ (must call app.SetInForeground). - Updated the services template for Oreo+. DS 1.73a3 - Added 'long' and 'bool' types to SendIntent extras. - Added 'ExactIdle' option to app.SetAlarm(). - Added 'NavRight' mode option to app.SetKioskMode(). DS 1.73a2(27-Mar-2019) - Added app.IsNavBarOnRight() method. - Fixed issue with web.SetOnConsole 'bad token'. - Added public void CallScript(Bundle b,String webViewId) to plugin API. - Added new I() function to force unique instance of callbacks. DS 1.73a1(07-Mar-2019) - Added 'UseBrowser' option for HTML apps. - Enabled file downloading in HTML apps. - Added 'Screen' option to obj.GetPosition()- returns screen relative posn. - Added app.GetParent() method to get parent layout object (if set). - GameView methods now added to intellisense in wifi ide. - Added exception handling to onActivityResult (protect against plugin crashes). - Removed wallpaper service from APK manifests. - Internal super.onDestroy() now called when permissions not given by user. - Enabled all FTDI usb device types for serial comms. - Added tooltip/help sample. - Added app.ChooseWifi() method (popup to choose wifi ssid). - Added app template selector to on-device editor. - Plugin extraction now shows progress spinner for APK builds. DS 1.72(06-Feb-2019) DS 1.72b2(02-Feb-2019) - GameView now defaults to using WebView/WebGL rather than GLES. - Fixed slow GameView performance on Chromebooks (switched to WebGL mode). - GameView sprites without width and height now looks same size all devices. - GameView now has an Execute method to run JavaScript inside game. - Added 'NoActionBar' option to webview (prevents copy/paste popup). - Got rid of annoying popup copy/paste/action bar on Chromebooks. - Enabled APK builder is out of date warning. - Added SetOnTouch event to webviews. - Fixed 'JavaScript' section of Wifi Editor docs. DS 1.72b1(27-Jan-2019) - Re-instated the app.js file (so plugin docs/intellisense work again). - Added (experimental)_DoEvents method NoDom mode. - Fixed app.SetOnError() for NoDom mode. DS 1.71(13-Jan-2019) - Chromebook blocks game template now working. - Fixed black background on 'SDK' menu on Chromebook. - Delayed homepage load by 2 seconds (else sometimes fails). - Chromebook Terminal tab now fixed (for premium users) - Terminal extension now works after second wifi button press. - Fixed app.Execute() double quotes bug. - SQLite now works with NODOM option. - Switched from Locale.ENGLISH to Locale.ROOT to prevent missing lang issues. - Using NoDom now works with Transparent apps and DS shortcuts. DS 1.70(09-Jan-2019) - Added italian language. - Add 'Experiments' option (terminal,blockly) - SDK menu now enabled by default. - Add new auto-wifi option. - Removed SMS permissions for GPlay version of DS. DS 1.69a4 - Added !delplugin command to wifi ide (eg. !delplugin bluetoothle) - WifiConnect now works for Android 4.4 with WPA_PSK routers. - Added app.WifiScan(callback) method (returns list of ssids). - Added 3rd 'status' param to app.HttpRequest() callback function. - Added option to use '~' character instead of '=' between params. - Fixed app.CreateNxt() method. - Improved debug overlay auto scrolling + made monospace for IOT devices. - app.Execute() now supported in NoDOM mode. - Enabled replacement of 'Basic' app template using "/sdcard/DroidScript/Template.js". DS 1.69a3(06-Dec-2018) - Upgraded internally to Font-Awesome 4.47 - Added void OnNewIntent event to plugin API. - app.GetAppPath() now returns correct path for services running in IDE. - Fixed SQLlite query callbacks not working in services. - Fixed plugin callbacks inside services not working. - Service Stop() method now disables action of 'Persist' option. - Fixed calling cam.Stop() twice in row crash. - Fixed IDE bug causing repeated load of extension html file. - Added new 'combine' option app.CreateSysProc() to combine output and error stream. - Added new 'builder' option app.CreateSysProc() to force use of proc builder - app.CreateSysProc() can now accept '|' separated command list. DS 1.69a2(26-Oct-2018) - Fixed app.SysExec() timeout param had no effect. - Added 'su' and 'sh' options to app.SysExec(), runs commands in a shell. - Added UART and GPIO banana-pi samples for DS-IO. - Changed Wifi IDE debug tab $ commands to run via 'sh' shell. - Added !getplugin command to DS-IO (eg. !getplugin bluetoothle) - Added !getspk command (eg. !getspk http://www.me.org/spks/hello.spk). - Added !buildapk command (eg. !buildapk com.test.puck 1.0 false). - Changed Wifi IDE home page for DS-IO. - Changed USB Serial devices only vendor id match now required (not device id). - Added 'ShowUI' option to app.SetVolume(), also level of -1 keeps current volume. - Added SetOnInput and SetOnError methods to SysProc object. - Changed Terminal sample to use callbacks. - Added .data JavaScript property to all DS object for safely storing user data. - Fixed small memory leak related to anonymous functions as callbacks. - Added 'id' property to websockets and websocket callbacks. - Remote Android shell Terminal added to Wifi IDE (premium only). - Added 'Persist' option to app.CreateService() (attempts to force restart if service killed). - Added app/svc.SetInForeground( title,text,largeIcon,smallIcon,importance ) for services. - Added app/svc.SetInBackground() for services. - Added app.ToFront() method (moves app to foreground). - Added 'Tasks' option to app.SetKioskMode (prevents recent tasks button working) - Removed sony smartwatch and pebble entries from manifest - Added OnPause, OnResume, OnConfig, OnMenu events to plugin API. - Added app.GetDrawerState() method ('Open', 'Closed', 'Sliding'). - Added SetOnFocus method to TextEdit control (callback returns state true/false). - Made FlappyDinos demo for GameView + fixed some bugs. DS 1.68(30-Aug-2018) - "Install" permission now auto added only when necessary. - "SysWin" permission now auto added when using app.CreateOverlay(). - Fixed permissions problem with Overlays on Oreo. - app.StartApp() can now be used without any params to launch the current app. DS 1.68b1(29-Aug-2018) DS 1.68a1(18-Sep-2018) DS 1.67b1(27-Aug-2018) - app.SetKioskMode() now asks for appropriate permissions when required. - app.GetPermission() now suppports the 'overlay' keyword. - Added app.CreateOverlay() method (Premium only). - Added "Chat Heads" sample (Premium only). - Added 'rawX','rawY',screenX,screenY params to Image and Layout OnTouch callbacks. - Fixed Launcher sample for >= Oreo. - Added app.ChooseAccount() to request user's device email address. - Fixed dodgy chars in docs for CreateSeekBar, CreateSensor, CreateWebServer and CreateWebView. DS 1.66b3(24-Aug-2018) - Fix plugin onActivityResult issue. - Added 'nokeys' option to app.CreateDialog() method. - Added 'nokeys' and 'showkeys' options to app.SetOptions(). - Removed dodgy html characters from some of the docs examples. DS 1.66b2 - List control onclick event params now cope with double quotes. - Fixed recently introduced bug with spinner calling onChange when first shown. - Added code to handle OnActivityResult in DS plugins. DS 1.66b1(21-Aug-2018) - Fixed Notification SetSmallImage method crashing on API - app.GetIPAddress() now works when phone is running as an Access Point. - Wifi IDE can now easily be used when phone is running as Access Point. - File browsing now always enabled for Embedded systems. - Added new !exit command to wifi IDE (useful to kill DS on embedded systems) - Fix bug on GPIO sys.Out() for banana-pi (eg.echo 1 > /sys/class/gpio_sw/PA11/data) - Fixed bugs where some premium features were not being checked. - Added app.SetWifiApEnabled( true, ssid, key ) for Android 6 or older device only. - Added app.IsWifiApEnabled() for Android 6 or older device only. - Fixed bug with app.CreateWizard() not allowing text editing (focus was blocked) - Fixed problem with dark text in Spinner lists on Oreo. - Spinner now copes better with large fonts. - Fixed problem with lists chopping of bottom of text on Oreo. - img.Save() now works after multiple calls to img.Update() are made. - The ReadData() method on the file object is now escaped when using text mode. - List control onclick event params are now JavaScript escaped instead of ^*^ escaped. - app.GetAccounts() and app.GetUser() now request appropriate permissions on Oreo. - Save SPK option now added to menus on Chromebooks. DS 1.65(23-Aug-2018) DS 1.65b1(12-Aug-2018) - Fixed Phone States sample permissions issue for Oreo. - Added SetSmallImage() to Notify component (image should be a single color with alpha). - Updated Notifications sample. DS 1.65a4(10-Aug-2018) - Added support for BananaPi-M2-Zero (runs in headless mode). - Creating app shortcuts now working on oreo. - Notifications now working on Oreo. - Coarse location permission now requested on oreo when using PhoneState object. - Fixed menu button on Chromebooks. - Tool-tip short descriptions for app.* methods added for WiFi-IDE/Chromebooks. - Added lay.SetTouchThrough() method. DS 1.65a3(07-Aug-2018) - Fixed the crash on Marshmallow after accepting permissions. - HTML apps are now scanned for permissions before launch in IDE. - When using auto-permissions, apps will not start unless ALL perms are accepted. - Added autoPermissions:true/false option to build.json file. - Added app.IsDebugEnabled(). DS 1.65a2(01-Aug-2018) - API level 26 now default target (Google Play requirement) - UDP sockets now closed when net.Close() or net.Destroy() is called. - app.CheckPermission( "extsdcard" ) now returns storage uri on success else empty string. - app.CheckPermission() can now take a 'dangerous' perms list ("Storage,Camera,SMS,..."). - app.GetPermission() callback returns a list of un-granted perms when using 'dangerous' perms. DS 1.65a1(17-Jul-2018) - Added app.ExtExec() command (can now execute commands in Termux!). - Added French, German and Russian language options. - Added extensions facility to WiFi editor (for both left and right tabs) - Fixed Chromebooks menu button. - You can now drop *.obj files onto the Wifi editor file browser. - Fixed SetOnLongTouch() callback failure on Text controls. - Fixed docs failing to copy or run samples. - Added support for PixelBook (untested). - Added 'exact' option to app.SetAlarm (only works for single shot alarms). - Various typos etc fixed in samples (thanks to BareK) - Added Wifi IDE F3 and Shift+F3 for searching for selected word (same as Ctrl+K). - Added Ctrl+L for deleting current line (same as Ctrl+D) - Added Ctrl+G for goto line. DS 1.64a4(26-Apr-2018) - Fixed scaling bug with re-loading images after calling app.SetDensity. - Enabled Cam/audio + location in WebView and HTML apps ('NoCapture','NoLocate' to disable). - Added app.script() method (async load of local scripts) - Added Angry Birds style game demo for game engine. - Game engine libs now exluded from non-game APK builds. DS 1.64a3 - Various Game engine updates. - Added app.ExtractPlugins method. - Added obj.Method( name,types,p1,p2,p3,p4 ) access Java via reflection (premium). DS 1.63a1(20-Jan-2018) - Added Block based editing for DSJ files (still in alpha)! - Added screenshot button to Wifi IDE (screen shots now captured to .edit folder). - Added 'nofocus' option to app.Alert() method (useful for kiosk mode) - Added dlg.IsVisible() method. - Added new app.CreateWizard + new 'Wizard' sample for premium users. - Fixed recent bug with img.SetImage() not allowing image as first param. - Added 'base64' mode to app.WriteFile method (writes a base64 string to raw binary data) - Added app.SimulateScroll( obj,x,y,dx,dy,count,fling ) method, simulates mouse wheel scrolls. - Added app.SimulateDrag( obj,x1,y1,x2,y2,step,pause ) method, simulates mouse drag. - Shortened startup time on Chromebooks. DS 1.62a2 - Removed jqplot from internal assets, moved jquery to /Sys/Libs. - Removed 'WebView Gauges' and 'WebView Graphs' samples moved to downloadable demos. - Fixed drawer lock/unlock bug. - Enabled mixing of width/height vals with 'FillX', 'FillY' option. - Fixed app.SetScreenMode to remove menus when null/empty string used. - Changed app.SetScreenMode to fire OnConfig. DS 1.62a1 - Added game engine (alpha)! - Fixed Launcher sample to use android.intent.action.MAIN instead of .VIEW. DS 1.61(22-12-2017) DS 1.61b1(15-Dec-2017) - Fixed byte swap bug on 'Audio Sample' sample. - Enabled file rename and file copy to external sdcards. - Added external sdcard write sample. - Fixed "Send Intent" sample for newer Gmail version. - Improved app.SendMail() to show fewer app choices (when no attachment used). - Added options param to app.SendMail(), use 'SendTo' if have attachment and you know it's gmail. - Fixed app.GetExternalFolder("external") now returns space on primary external sdcard. - Fixed img.MeasureText(txt) now responds to img.SetPixelMode(). DS 1.60b1(08-Dec-2017) - Added app.GetRSSI() to get wifi strength. - Added support for external sdcard MakeFolder. - Fixed bugs with GlView and V8 not working in last release. DS 1.59(23-Dec-2017) DS 1.59b1(07-Dec-2017) - Added new 'Button' option to image controls (causes image to depress like a button when touched) - Added new app.DisableTouch() to disable/enable all touch events on controls in main activity. - Added new net.WakeOnLan(ip,mac) for premium users. - Added support for controlling media players with app.BroadcastIntent() method (see forum). - Added 'TouchModal' option to YesNoDialog. - Changed ShowProgress and YesNoDialog to 'TouchModal' by default (use 'NoTouchModal' to revert) - Added options param to Custom dialog SetTitle() method, use 'Left', 'Center' or 'Right' for text alignment. - Added new 'Auto-Help' settings option to prevent/enable slide out help panel. - Added new img.MeasureText(txt) method to get width and height of text when drawn. - Changed device editor to show IP address of connected user when using WiFi IDE. - Added SAF support for text files: write,read,delete, app.CheckPermission, app.GetPermission. - Fixed app.GetExternalFolder() now returns primary external sdcard path. - File paths starting with '/extsdcard' now map to the primary external sdcard. - Your IP address is now visible in the about dialog. DS 1.59a2 - Added support for Khadas Vim device (including gpio access). - WebServer object supports new SetOnUpload(callback) method (filename + ip address passed to cb) - Fixed WebServer bug which required use of at least one Servlet to get file uploads working. DS 1.59a1 - Added 'json' mode to app.HttpRequest method. DS 1.58a1 - Enabled creation of live wallpapers for premium users! - Changed .js files inside SPK files to .js.txt to side step Google security issues. - Added 'SaveSPK' option to device editor (saves to /DroidScript/SPKs folder). - Added app.SetDensity to scale density of all controls in app (call before creating controls). - Added basic animated GIF support to Image controls. - Added URL intent interception via build.json (use 'urlHost' and 'urlPathPrefix' fields). - Added 'UseBrowser' option to Webview to cause links to launch in the default browser. - Fixed issue with fontawesome text in app.CreateList() and sumultainious use of fontawesome icons. - Fixed canvas.Save() not getting Storage permissions for APK build. DS 1.57(09-Nov-2017) DS 1.57b1(12-Oct-2017) - Added built-in support for programming Espruino devices over USB/OTG cable. - Added new !screenshot command to Wifi editor debug tab -> /sdcard/screenshot.jpg - Re-instated the app.GoToSleep() method. - Internally mapped '/sdcard' path to users external/internal public directory. - Added new 'Power' mode keyword to app.SetKioskMode (blocks use of power key). - Added 'response' parameter to app.UploadFile() callback=>(status,file,response). - Added new app.ClearValue(name,file) method to remove prefs values. DS 1.56(18-Aug-2017) DS 1.56b(15-Aug-2017) - Added app.IsLocationEnabled("GPS,Network") method. - Added GetData() method to AudioRecorder component. - Added DrawSamples() method to ImageView (draws a sample graph). - Added 'Audio Sample' sample. - Added app.GetBluetoothName() method. - Added app.GetBluetoothAddress() method. - Fixed problem with device to device bluetooth dropping last character. - Removed BIND_DEVICE_ADMIN permission. DS 1.55b1(15-Aug-2017) - Enabled device -> device bluetooth connections! - Added Portuguese language (thanks to Maico aka 'Big Eyes Games'). - Added bluetooth listen sample. - Added updated and re-organised docs (thanks to AlexF). - Fixed Immediate window execute bug. - Added 'NoScrollBar' and 'ScrollFade' options to Scroller control. - Added 'NoApp' option to WebView to prevent app.* calls. - Obfuscation errors are now trapped and displayed. - Added 'Bluetooth Select' sample. - Added OnConsole method to webview, calls back with (message, lineNum, sourceFile, isError). - Added 'noGUI' option to config.json (replaces 'headless' option) - Added SetSubtitles and SetOnSubtitle methods to VideoView control (call after OnReady). - Prevented use of .. in webserver file uploads (for security reasons). - Added new webview option "AllowCapture" to enable use of camera and microphone (and WebRTC). - Added new grabWidth parameter to app.AddDrawer method. DS 1.54(16-Jun-2017) DS 1.54(15-Jun-2017) - Fixed error handling override on webview (SetOnError method). - Fixed files list not being hidden when showing docs/samples. - Fixed launcher text size on low-res phones. - Fixed language download problems on Kitkat devices. - Fixed language download problems on JellyBean devices. - Added USB serial support for Pimoroni Flotilla Dock and AdaFruit Circuit Playground. - Added support for spanish language, docs and samples. - Fixed problem with editing HTML files with multi-file version of DS. - Added multi-file handling to device editor. - Keyboard navigation added to device editor (Ctrl-I,Ctrl-SPACE,Ctrl-O). - Added Ctrl-C,Ctrl-V,Ctrl-X,Ctrl-Z,Ctrl-Y,Ctrl-A,Ctrl-D handling to device editor. - Added Ctrl-F,Ctrl-H,Ctrl-K,Ctrl-S handling to device editor. - Added Tab/Shift-Tab indent/outdent to device editor for physical keyboards. - Added SetEllipsize() method and 'SingleLine' option to button control. - Empty jar file no longer required in JavaScript based plugins. - app.SysExec() now shows error stream (use NoErrors option to disable). - app.SysExec() now has extra maxLines and a timeout parameter. - $ shell commands from WiFi editor now shows error stream. - $ shell commands from WiFi editor now work even if app is not running. - Added app.GetBtProfileState() method (use 'a2dp','headset', 'gatt', 'health' ). - Docs now loaded from sdcard (makes user editing/translation easier) - Fixed bug in app.GetMemoryInfo() method. - Added SetProgressBarOptions() method to theme object. - Added 'light' option to Downloader object (controls progress bar theme) - Fixed excessive 'ScreenSize changed' logging on Remix. - Starting activities via app.SendIntent() in services now works without needing 'newtask' option. - Added img.SetPixelData method (takes base64 data string). - Added img.Flatten() translate,scale,skew,alpha are applied to image data (can be saved). - Enabled use of Wifi editor over wired network. DS 1.50(30-Apr-2017) - Added dt (time diff) parameter to app.Animate callback. - Fixed missing OnCancel callback in Custom dialogs. - Added obj.ClearFocus method. - Fixed SetOnEnter method for edit boxes ('SingleLine' mode only) - Fixed lay.SetTouchable bug for overlapping layouts. - Added Copy option to DS app menu. - Added 'install now' option after APK builds. - Changed to 'Share via Email' option to 'Share SPK' (now works with gdrive) - Added warning about .wav and .mpg files not working in APKs - Added app.SendText() method (useful for sharing text with other apps) - Added extra 'choose' parameter to app.SendFile method. - Image control in 'TouchThrough' mode now fires touch callbacks. - Orientation sensor now works for devices with no magnetometer (azimuth is always zero). - Added 'TouchSpy' option to layouts (spies on touch events to all children) - Added app.IsCharging and app.GetChargeType() methods. - Added app.SetSpeakerPhone() and app.GetSpeakerPhone() methods. - Added app.Animate() method (use instead of setInterval for smoother animation). - Added app.SetPriority() method to change GUI thread priority ('Low','Medium','High'). - Change game samples to use app.Animate() (gives smoother framerate). - Using _AddOption( "NoDom" ) now forces app into high performance mode. - APK 'Network' permissions issue fixed for app.WifiConnect, app.SetOnWifiChange. - Added 'TouchThrough' option to Image control. - Added SetOnDownload method to Downloader object. - Added optional 'name' parameter to Downloader.Download method. - Added file download sample and fixed download error reporting. - Added app.WifiConnect( ssid,key ) method. - Added app.IsConnected() method (detects any network connection). - Added app.SetOnWifiChange(), fires event with params 'state' and 'ssid'. - Fix for AndroidThings preview3 or Raspberry Pi. - Web Server WebSocket sending now works inside services. - Unplugging and plugging OTG/USB keyboards will not stop DS now. - Building HTML apps with obfuscation now works. - Back/arrow keys not responding in dialogs with Gboard fixed. - Flags data now added to activity intent json results. - Link to video tutorial now in docs. - Added Google Analytics support + premium sample. - Fixed SMS non-number (carrier) text messages causing error - When an SMS is received the 'number' param no longer drops the leading "+" sign. - JS alert boxes now are now themed (disable with app.SetOptions("NoThemeAlerts")). - Fixed flip animation x2 speed and callback issues. - Fixed Sony SmartWatch2 issues. 1.47b(13-Mar-2017) - Added support for Android Things. - Add shop to DS menus. - Updated to FontAwesome 4.7 - Added tweening support + 'Image Tween' sample. - Wifi editor remote file browser now shows hidden files. - Fixed DS crashing on JellyBean 4.1.1 - Fixed 'Sensors' sample (SetOrientation callback was firing too early). - Added SetButtonText() method to YesNoDialog. - Added 'FillXY','FillX','FillY','Wrap' options to obj.SetSize() method. - app.ListFolder now supports the 'Regex', 'FilesOnly', 'FoldersOnly' options. - Added SetLanguage() method to CodeEdit (.js,.java,.php,.c,.cpp,.cs,.rb,.m,.py,.txt) - Added app.DiscoverBtDevices(), app.PairBtDevice(), app.UnpairBtDevice(), app.IsBtDevicePaired(). - Added app.WakeUp() and app.Unlock() methods. - Added dlg.EnableBackKey() and dlg.SetOnBack() methods. - Added "progress" option to WebView (shows progress spinner). - Added SetRedirect( urlFrom, urlTo ) method to WebView. DS 1.45 DS 1.45b(26-Jan-2017) - Added Chromebook support. - Added Booty5 plugin and game editor support. - Improved continuous speech recognition (updated sample). - Fixed services crashing when killed with task managers. - List expand mode, adding removing items now triggers expand/contract. - Plugin docs with gifs now work in wifi ide. - Permissions scanning now only done at top level of project. - Obfuscation of strings now more reliable. - Added x1,x2,x3,x4 options to scale up textview html images. - Added new 'useChrome' option to config.json (useful for Android TV boxes). - Added USB CDC serial support for Waterrower exercise machine. DS 1.42(02-Dec-2016) - Added usb.SetMaxWrite() method and increased r/w buffers to 16k default. - Made premium samples visible. - Added support for NexBox/LeelBox mini Android TV boxes. - Added support for DS extensions in Wifi editor (add your own tabs). DS 1.41 - Fixed bug with TextToSpeech failing to swap languages (eg. en_GB, en_IN). - Added touch callbacks to Absolute and Frame layouts. - Fixed freeze when trying to use SetPosition in Linear/Frame (now logs warning). - Added 'Web Server' template for premium users. - Fixed Kiosk sample callbacks for latest Android Webview update. DS 1.40b(20-Nov-2016) - Added docs for CustomDialogs, WebServer and Services. - Added 'Expand' option to list control (forces expansion to full height inside scrollers). - Wifi IDE now lists prototype and object member functions. - Added template apps to WiFi IDE for premium users. - Added 'Real' option to app.GetScreenWidth() and app.GetScreenHeight(). - Added app.HasSoftNav() method (detects devices with soft navigation bar). - Files containing .min.js are not obfuscated in APK builds. - Added 'UseBasicInput' option to webview (makes softkeyboard useful for html code editors). - Added web.SimulateKeys() method to webview (can send keys to html textarea) - Changed app.CreateListDialog() now requires call to dlg.Show() (or use 'ShowNow' option) - Changed app.CreateYesNoDialog() now requires call to dlg.Show() (or use 'ShowNow' option) - Changed app.CreateListView() now requires call to lvw.Show() (or use 'ShowNow' option) - Added SetOnCancel method to Downloader component. - Fixed recently introduced bug in VideoView streaming. - Fixed bug with List control showing images from /sdcard/Pictures folder. DS 1.38 DS 1.38b(20-Okt-2016) - Added AdjustColor() method to image controls. - Changed img.SetImage() with no params on old image maintains dimensions. - Added 'rescale' option on SetImage,LoadImage (forces resize of layout). - Added app.SetKioskMode() for premium users eg. SetKioskMode("Status,Nav",true,"Black") - Added 'obfuscate' option to APK builder. - Added 'Dark Theme' option to DS settings. DS 1.36(26-Sep-2016) - Added new asset chooser to on-device code editor. - Added new downloadable demos page to DS menu. - Added app.GetThumbnail() method (gets a small image from a photo). - Added app.ScanFile() method (adds media files to phone gallery). - Release mode APKs now obfuscated more aggressively. - Added theme.SetTextEditOptions( "underline" ) option. - Added lay.SetOnChildChange() method to layouts (useful for auto-save). - Enabled anonymous functions in callbacks (use sparingly!) - Custom buttons now gray out when disabled. - Added ctl.IsEnabled() method to all controls. - Added usb.SetDataMode() and usb.SetSplitMode() methods. - Enabled calendar access through content app.QueryContent() method. - Added calendar query sample for premium users. - Added web.SetOnError() method, callback returns params:- errNum, errMsg, url. - Fixed tabs bug introduced in 1.35b. - Fixed short menu when starting in landscape mode. - Added 'engine' parameter to app.TextToSpeech method (allows swapping voices). - Added 'time' parameter to Locator (GPS) callback. - Added serv.Stop() method to web server. - Added Sys.In() and Sys.Err() method (reads console input and error streams). - Added cam.SetOrientation() and cam.SetPostRotation() methods. - Fixed issue causing Playstore dev console warnings. - Added 'stay awake' option to DS settings. - Plugins can now contain native .so files. - Added SetGravity() method to linear layouts (left,top,right,bottom,center,vcenter). - Added "ReverseLandscape" and "ReversePortrait" options to app.SetOrientation() method. - Added Linux "Terminal" sample for premium users. - Added app.PlayRingtone() method ("Alarm", "Notification", "Ringtone" ). - Added multiple pathPatterns support to build.json (eg. ".*\\.jpg,.*\\.txt") DS 1.35b(23-Jun-2016) - Added support for Android's sliding drawers. - Added 'Drawer Menu' sample. - Added app.DownloadFile() method (uses Android download manager). - Added .SetEnabled() method for all controls. - Added app.ChooseFile("Choose a file", "*/*", OnFileChoose) method. - Added app.ChooseContact() method. - Added new "Choose" sample (get user to choose files or contacts). - Added support for Remix Mini (runs in desktop mode). - Added 'Launcher' sample (advanced sample for premium users only). - Added img.SetPixelMode method (allows use of pixel coords in drawing funcs). - Changed manifest to show running apps separately in task manager (can alt-tab on remix). - Added SetPosition() method and 'TouchModal', 'NoTouch', 'NoFocus' options to custom dialogs. - Added cam.SetVideoSize( width, height ) method. - Added new "Query Content" sample (advanced sample for premium users only). - Added result callback parameter to web.Execute() method. - Added 'Horiz' option to list control (makes title and body text flow horizontally) - Added lst.SetColumnWidths(icon,title,body) method to list control. -?Added lst.SetIconSize() and 'inner' and 'outer' option to lst.SetTextMargins(). - Add lst.SetIconMargins() method and 'Menu' mode to list control. - Added "px,sp,dip,dp,mm,pt" options to obj.SetSize() method. - Added 'mode' param to obj.SetMargins() and obj.SetPadding() (use: 'px','sp','dip','mm','pt'). - Changed alarms in a service now call back to service unless 'App' used in SetAlarm() options. - Fixed rounding errors in image control (canvas) drawing methods. - Fixed bug which causes callbacks to get out of sequence. - Fixed full screen mode showing blank bar over softkeys on older devices. DS 1.34(29-Apr-2016) DS 1.34b1(14-Apr-2016) - Enabled homeScreen/launcher creation using build.json (e.g. "homeScreen":true ). - Enabled new config.json file and headless mode. - Added new 'SDK' menu item (Plugin generator) for premium users. - Added _sdk_ file detection to enable SDK menu for non premium users. - Added new app.UploadFile( url, file, name, callback ) method. - Added file sharing/opening filter option to build.json (e.g. "pathPattern":".*\\.txt" ). - Layouts now support touch methods (only OnTouchDown works when in 'touchthrough' mode). - Added app.CreateWebSocket method for handling reliable connected web sockets. - Enabled use of FontAwsome icons in the list control. - Added 'NoWrap' and 'Log' options to Text object (Log=='multiline,left,nowrap'). - Added txtEdit.SetOnEnter() method (disables enter key and fires callback). - Added .Hide .Show .Gone .Isvisible methods to all objects. - Added support for html file input boxes on Lollipop and higher. - Added 'IgnoreSslErrors' option to webview and app.SetOptions. - Device app list no longer refreshes on WiFi file edits. - Added 'address' param to udp OnReceive callback. - Added app.IsAppInstalled() and app.GetActivities() methods (useful for making launchers). - Added "Icon" option to img.CreateImage (allows loading of app icons). - Added callback option to app.SendIntent() when using 'result' option. - Added 'orientation' option to config.json file (forces a particular orientation). - Fixed app.GetVersion was not working in german. - Fixed App.Get/SetClipboardText() fails in service. - Added option for file '/sdcard/DroidScript/_nopremium_' to disable premium. - Changed http server upload limit increased to 1 Gig. DS 1.33(27-Feb-2016) DS 1.33b(21-Feb-2016) - Improved device code editor (large file support, yoyo, search+replace, volume moves cursor). - Code completion/suggestions + method info added to both editors. - Added transparent App support using _AddOptions( "Transparent" ) [premium only]. - Added App theming with app.CreateTheme() method [premium only]. - Added App theming sample [premium only]. - Added new app.CreateCodeEdit() method [premium only]. - Enabled MediaPlayer object to stream music over http. - Added app.SetPosition() to allow tiny popop transparent Apps. - Passwords now available in TextEdit (use 'password' option). - Added app.SetOnShowKeyboard() method (passes true/false to callback). - Added dlg.SetBackColor() method (can be transparent). - Added dlg.SetSize() method (with optional 'px' mode) - Added app.SimulateKey() method (eg. app.SimulateKey(edit,"C","SHIFT_LEFT_ON") ) - Added 'NoDialog' option to the downloader object. - Added usb.SetMaxRead(bytes) and usb.SetTimeout(ms) methods. - Added new 'pl', 'ps' modes to *.SetTextSize() (scales text in proportion with device resolution) - Added 'touchmodal','notouch','nofocus','secure','showlocked','wakescreen','screenon' to App.SetOptions(). - Added edit.SetCursorColor() method. - Added icon buttons sample. - Fixed commas in APK version causing bad build. - Http server sample now fixed. - Apostrophi and special chars in app names now prevented (in device IDE). - ListDialog and YesNoDialog now support SetSize, SetBackColor and SetTitleHeight. - Fixed problems with upper case 'i' characters in the options params in non-english langs. - Progress now supports 'NoDim' option. - Moved minimum platform support up to API 11 (Honeycomb). - Custom dialog now supports 'NoDim' option. - Added app.IsPremium() method (only meaningful when running inside IDE) - Custom buttons now padded by default (use 'NoPad' option to remove). - Websockets now firing callbacks inside a service. - Added 'FadeIn', 'FadeOut', 'CrossFade' to lay.Animate() + extra 'time' parameter. - Added obj.SetColorFilter( color, mode ) method to most objects (supports Porter-Duff modes). - Added obj.AdjustColor( hue, sat, bright, cont ) method to most objects. - Added web.SetUserAgent( agent ) method. - Added 'Network' permissions when using WebSockets. - Fixed SetTextColor and SetTextSize on spinner. DS 1.32(15-Dec-2015) DS 1.32b(12-Dec-2015) - Fixed problem with multiple notifications returning wrong ids. - Added app.IsAPK() method. - Fixed bugs with txt.Log() method. - Fixed .json files breaking release builds. - Fixed bug in GetPosition() returning incorrect top value. - Added 'px' option SetPosition, GetPosition and SetSize methods. - Added 'px' option to GetLeft,GetTop,GetWidth,GetHeight methods. - Fixed bug in cam.GetPixelData (red/blue pixel swap). - Fixed problem of app.DisableKeys() blocking unwanted keystrokes. - Fixed lst.GetTextSize() returning wrong size. - Fixed lst.SetTextSize() not updating list. - Added 'px','dip','sp','mm', 'pt' options to *.SetTextSize(). - All top level plugin files included in APK build (including .so files). DS 1.31b(01-Dec-2015) - Added new 'DroidScript Premuim' option. - Added new device browser to WiFi editor [premium] - Add Playstore IAP sample [premium]. - Add Playstore subscriptions template [premium]. - Added support for a new build.json file (enabled more advanced build options). - Added serv.AddRedirect(pattern,location) method to web server object. - Added _RemovePermissions() function. - Scroller control ScrollBy method now accepts fractional values. - Added support for web cookies. - Added app.ClearCookies() and app.SaveCookies() methods. - Added Release() method to plugins (called to clear up resources). - net.SendDatagram() now has extra options param (supports "Text", "Hex" or "Bytes"). - Added "SUBS" (subscriptions) option to all PlayStore methods. - Playstore OnPurchase callback now returns prodId,orderId,purchToken,devToken,packageName. - Fixed APK version number rounding bug. - Fixed AutoBoot not working for APKs. - Fixed crypt.Hash() function adding line feeds (can use 'wrap' option for old behavior). - Fixed intermittend bug with spinner GetText() method. - Sqlite now works in services. - app.IsScreenOn(), app.PreventScreenLock(), app.PreventWifiSleep() now work in services. - app.TextToSpeech() method now defaults to the 'system' audio stream. - app.TextToSpeech() has extra 'stream' parameter ['alarm','music','system'..etc]. - Added 'base64' mode to app.ReadFile() method (reads binary data to base64 string). - Added support for custom controls inside user plugins. DS 1.30b(03-Nov-2015) - Added webserv.SetUploadFolder() method. - app.SendIntent() can now be used with null package and class names. - Added lst.SetTextSize2() and 'normal' option (turns of bold title text). - Added app.GetKeyboardHeight() method. - Updated fontawesome to version 4.4. - Added app.CreatePhoneState() listens for phone state changes (including cell location). - Added 'Phone States' sample. - Added app.GetSSID() method. - Added txt.Log( msg,options ) method to text control (useful for logging). - Added more docs for basic components and controls (authored by Steve Garman). - Added app.HttpRequest() method (useful to get around CORS issues). - Added app.SysExec( cmd ) method (returns result as text). - Added new $sys command to WiFi debugger (eg. "$logcat" shows internal app logs). - Enabled multi-part SMS messaging with new 'MultiPart' option on sms.Send() method. - Added GetPeak() method to AudioRecorder component. - Added cam.HasFlash() method; - Added new option 'overview' option to webview control. - Added Arduino VID 0x2A03 (the other manufacturer). DS 1.29b(09-Okt-2015) - Fixed docs bug when using basic JavaScript reference. - svc.SendMessage() now copes with quotes and json objects. DS 1.28b(01-Okt-2015) - Added offline JavaScript reference. - Added 'include system assets' check box. - Enabled app.Vibrate(), app.TextToSpeech(), app.SendIntent(), app.SetAlarm() in services. - Added app.GetRunningServices() and app.GetRunningApps() methods. - Enabled drag/drop of resources in WiFi IDE. - WiFi IDE now stops both service and App when pressing stop button. - Added support for multiple simultaneous USB serial devices (OTG hubs). - Added app.SendMessage() and svc.SetOnMessage() methods. - Added app.GetNotifyId() method (gets id of in-comming notification). - Added app.ShowKeyboard( ctrl ) method (control must have focus). - Added ctrl.Focus() method. - Added app.IsKeyboardShown() method. - Added 'Extract' option in EditText (enables full screen keyboard in landscape). - Fixed app.ReadFile was adding extra newline at end of files. - Added new 'FullPath' option to app.ListFolder() method (returns full names). - Added 'NoScrollBars' option to WebView control. - Added app.GetSpecialFolder() method ('DCIM','Pictures','Movies','Downloads'..etc). - Added app.GetBatteryLevel() method. - Added cam.SetZoom( level ), cam.GetZoom(), cam.GetMaxZoom() methods. - Fixed Alarms bug introduced in 1.27b. - Fixed bug with usb serial connections introduced in 1.27b. - Added app.ClearData() method (clears app.SaveText/SaveNumber..etc values). DS 1.27b(26-Aug-2015) DS 1.26b(25-Aug-2015) - Added support for background services (sample on forum)! - Added support for custom buttons and added 'Button Styles' sample. - Addded 'IngoreErrors' option to WebView control. - Added 'Voice Command' continuous speech recognition sample. - Added app.SendFile() method (sends files to other Apps, user chooses). - Added web.Print() method to webview (prints docs on Kitkat or greater). - Added web.Capture(filename) method to webview control (captures jpeg of visible page). - Added optional id parameter to notification Notify() and Cancel() methods. - Added 'ScrollFade' option to webview. - Added "file" type to SendIntent extras + 'Send Files' sample. - Added support for 'MakeBlock Orion' OTG/USB comms. - Added support for chinese Arduino clones (CH340 USB/Serial chips). - Added 'USB Arduino' sample. - Added quality parameter to img.Save() method + support for png files. -?Added 'GrayScale' and 'JSON' options to GetPixelData() + 'QVGA','VGA',etc prescaling option. - Added app.SetOnKey(callback) method (reports key changes, including volume key). - Added app.DisableKeys(keyList) method (disables normal function of given keys). - Fixed issue with app.TextToSpeech() params being ignored on second call. - Added 'Partial' option to app.CreateSpeechRec() method - Added IsListening(), Stop() and Cancel() methods to SpeechRec object. DS 1.25b(07-Jul-2015) - Added app.SetVolume(stream,level) [streams: alarm,dtmf,music,notification,ring,system,voicecall] - Added app.GetVolume(stream) method. - Added app.GetAccounts() method. - Added 'NoBeep' option to speech recognition (only works on phones at moment). DS 1.24b(21-Jun-2015) - Added lst.InsertItem() and lst.GetLength(). - Fixed draw speed and mask issues introduced in 1.23b - Fixed Bluetooth serial 'End' delimeter use in hex mode. - Added fil.Skip() and fil.GetPointer(). DS 1.23b(14-Jun-2015) - Added support for user created plugins (SDK available). - Enabled camera recording and "Camera Record" sample. - Added support for two-way WebSocket comms (sample on forum). - Added support for google cardboard augmented reality. - Added app.SendIntent method (with sample). - Added rest of sensor types (HeartRate,Pressure,StepCounter etc). - Script errors are now trapped in WebViews. - Added more documentation. - Added auto-discovery for chrome App version of WiFi IDE. - Intellisense now works for controls in WiFi IDE. - Device name and connected state shown in WiFi IDE. - Connection password added to WiFi IDE (optional). - Added new 'Game' mode to app.SetScreenMode(). - app.SetScreenMode("Full") now works on devices with virtual buttons. - app.SetScreenMode("Full") now works in html apps. - Added new "Reflect" option to app.CreateWebServer. - Added new "Alias" option to app.CreateImage (makes drawing jagged). - Added new low level file access object app.CreateFile(). - Fixed spritesheet example for lollipop. - Fixed web.LoadHtml path bug + allowed short paths. - Added NXT Joypad example. - Added broadcast permssions for moto-g. - Fixed app.GetUser permissions bug. - Enabled alert, prompt calls in lollipop updated webview. - Fixed JavaScript Confirm dialog bug. - Added app.GetPackageName(). - Added lst.RemoveAll(). - Fixed SWS- SmartWatch service apps not starting. - Added new app.IsChrome method (detects running in arc welded chrome). - Added app.GetMediaFile("MyApp",".png") method. - Fixed sharing files with VIEW intent (used to only work with 'share'). - GetIntent now returns empty string vals rather than "null". - Fixed issue where manual drawing upate was only working for a single image. - Fixed duplicate app icons issue during app rename. - Stopped "Maximum call stack" error. DS 1.22b(7-Apr-2015) - Added editing via ADB option. - Added Demos to WiFi editor. - Added sns.SetMaxRate() method (defaults to 20ms). - Added cam.GetParameters and cam.SetParameter methods (use to set ISO vals). - Added List GetItem,SetItem,RemoveItem,ScrollToItem,SelectItem *ByIndex methods. - lst.GetList() with no params now returns object list. - Added 'Ongoing' option to Notifications. - Fixed 'append' mode for app.WriteFile. - Added 'encoding' parameter for app.WriteFile. - Added app.SetAutoStart(appName) method. - Added web.ClearHistory() and web.GetUrl(). - Added app.SetWifiEnabled(enable) and app.IsWifiEnabled() methods. - Added app.SetBluetoothEnabled(enable) and app.IsBluetoothEnabled() methods. - Added app.SetRingerMode(mode) and app.GetRingerMode() methods. - Added nxt.GetRotationCount() method. DS 1.20b(16-Mar-2015) - Added generic Intent receiver support + sample. - Added app.SetAutoBoot() and app.SetAutoWifi() methods. - Added char encoding 'mode' parameter to app.ReadFile(). - Enabled file/text sharing in user APK's. - Added app.GetDSVersion(). - Added app.DeleteDatabase( name ) - app.DeleteDatabase now deletes journal file. - Allowed use of optional full path in app.CreateDatabase(). - Added app.GetDatabaseFolder() method. - Added GetType() method to Database object + GLView object. - db.Delete() no longer requires the name of the database. - Prevented spaces and symbols in apk package names. - Fixed spinner bugs. DS 1.19b(07-Mar-2015) - Added online Tutorials to WiFi IDE! - Added SQLite support! - Added 'Database' sample. - Added GoPro camera plugin. - Added Barcode + QR code plugin. - Added support of ODROID-C1 - Added Latest News to WiFi IDE. - Added samples filtering on Wifi IDE. - Plugin docs now visible in Wifi IDE. - Enabled use of console.log method. - Folder/FileExists funcs now differentiate between folders and files. - Added app.GetUserName() method. - Added app.GetDeviceId() method. - Plugin docs now show in Wifi IDE. - Added app.CheckLicense() for Google Play licensing. - Added mask option to img.DrawImage function. - Added app.GetEnv() method to get environment vars. - Minimum OS version moved from Eclair -> Froyo. - "/Sys/" and "/sys/" paths are now distinct (allows embedded use). - Reboot after APKPlugin install now not required. DS 1.18b(08-Feb-2015) - Added html project type. DS 1.15 - Added app.SimulateTouch( obj,x,y,dir ) method. - Fixed img.SetTextSize bug. - GetObjects now correctly returns a map of all user created objects. - Rename /sdcard/AndroidScript folder to /sdcard/DroidScript. - Wifi IDE now support HTML, CSS and TXT files. - Added 3 GLView examples. - Added MediaStore sample. - Added cam.GetPixelData() method (useful for Augmented Reality). - Added img.GetPixelData() method. - The 'id' parameter is now sent to alarm callbacks. - Downloader object supports SetOnError callback. - Downloader object now shows no complete or error messages (user must supply them). - app.OpenFile(“/sdcard/my.htm”) now opens with a browser. - Added optional “px” mode param to *.SetTextSize and *.GetTextSize methods. - Added txt.GetTextSize method (works with autoscale). - Added app.GetFreeSpace, app.GetFileDate, app.GetFileSize methods. - ApkBuilder now works for latest CyanogenMod. - GLView DrawImage and DrawSprite now supports use of -1 in dest width/height. - GLView now uses fractional draw parameters for DrawImage and DrawSprite. - GLView now properly disposed when calling app.DestroyLayout(). - GLView now allows img.Destroy(). - APK debug signing now uses proper android debug key. - app.OpenURL is allowed in remote webviews. - app.CreateEmail now gets Internet permissions in APK. - Added 'Speech Recognition' sample. - Added 'Audio Record' sample. - Added 'NoSound' option to buttons etc. - Added 'AllowZoom', 'AutoZoom', 'Wide' options to app.CreateWebView. - Added extra 'zoom' parameter to app.CreateWebView method. - Added “AllowRemote” option to WebView. - Added app.Call method (makes phone calls given a phone number). - app.OpenFile params 2 and 3 are now optional. - Wifi IDE now saves all modified scripts - Added app.ToBack method (Sends app into background). - Added 'SetLooping(true/false)' method on MediaPlayer. - Custom icons now supported on List controls! - Added lst.SetItem, lst.AddItem, lst.RemoveItem methods. - Added scroll.GetScrollX, scroll.GetScrollY functions. - Added app.GetOSVersion method + docs. - Added app.GetClipboardText method. - Fixed web server demo. - Appended app name to SPK share via email subject field. DS 1.11 - app.StartApp method is now working again. - Custom dialogs can now use the 'NoTitle' option. - Added latest news splash check at startup. - Stopped Huawei phone USB popups. - Now targetting API >= 14 (prevents HTC legacy menu bar). - ListFolder can now cope with quotes in file names. - Put in newer Wifi IDE (with debug filtering). - Added Dlg.SetTitle method. - app.Execute calls inside WebView now denied when page is remote. - Added custom dialog sample. - Add new icon (Thanks go to Jorge for the new icon). - App list now supports scrolling. - Camera preview now correct rotation in portrait mode. - Fix spinner ontouch trigger when using SetList(). - Can now List IP addresses on websockets. - Send to msg to specific IP in websockets. - 'SetHint' method added to TextEdit control. - 'Number' option added to TextEdit control. - On device editor now only saves when code changed. - List item selection always full width. - Add html formatting options to text, list and buttons. - Added 'Text Formatting' sample. - Added 'MonoSpace' font option to lists. - Fixed Wifi Demo + Camera Stream. - Auto-scaling text box (use the 'AutoScale' option). - Enabled normal use of the javascript prompt function. - SetDivider losing color after Setlist. - Added app.GetCountryCode, app.GetLanguageCode, app.GetLanguage, app.GetCountry. - Fixed issue when calling img.SetTextColor before img.Clear(). DS 1.09 - WebView permissions bug fixed. - App icons are now sorted alphabetically. - Added TTF font loading + FontAwesome in Txt, Lst and Img. - Do alarm service repeat + cancel method. - Added app.CreateNotification method + sample. - Added “NoCancel” option to app.CreateDialog method. - Updated Wifi Editor. - Added lay.AddChild( child, order ) . - Added lay.ChildToFront( child ). - Added lay.GetChildOrder( child ). - Prevent package name parts starting with numbers. - Wifi editor folder is now in a hidden folder. - Don't need the /edit on Wifi Editor URL. - Added app.GetMacAddress(). - Added app.GetVersion() + app.IsNewVersion() methods. - Added app.GetObjects method. - Add GetType() method to objects. - Text input panning enabled in APK's - Fixed animate callback bug. - Email attachments now supported by Email object. - Visible controls now support 'this' keyword. - Breaking Change: 'TouchThrough' option needed to touch through layouts. - Breaking Change: app.ListFolder now returns array (use toString() to get comma sep list). - Added index param to List OnTouch/OnLongTouch callbacks. - Camera color detection sample. - Fixed orientation startup bug. - Ellipsis option added for Text and List controls. DS 1.08 - APK builder plugin. - Wifi IDE multi script support. - Wifi IDE quick function finder. - Encryption sample added. - Html web server now free. - Progress bar sample. - Video streamer sample. - Video player sample. DS 1.06 - Add CopyFile function. - Fixed black flashes on busy games. - Encryption + hashing added. - Arduio via OTG supported. - IDE run samples. - IDE supports multiple files. DS 1.05(24-May-2014) - More documentation. - Fixed performance issues on Kitkat. - Added Plugin support. - Added font size option for Editor. - Fixed Hudl docs + WebView issues. - Added JavaScript Beginners guide. - Various other bug fixes. - More samples added.
intro/01Overview.htm := Overview Back Overview Hello World Content: - Scripting Framework - App Icons - Editing Scripts - Samples - Measurements - Getting Started Scripting Framework The DroidScript App contains a scripting framework which allows anyone with a bit of JavaScript knowledge to easily write Apps for their mobile phone or tablet. You can write very simple Apps with just a few buttons, or more complex ones which include dynamic graphical interfaces such as the DroidScript application itself, which is written using the very same framework. As well as creating graphical interfaces, you have access to Sensors like the Accelerometer, Compass, Light meter or other device components like Wifi, Bluetooth, Camera, GPS, SD Card, SMS, Emails, Internet and more. We're always adding new functionality to the framework, so if you want something added just let us know via email or leave a comment on the forum. App Icons When you first start DroidScript, you will see a series of icons used to run your JavaScript Apps. There will initially be a simple 'Hello World' example App here for you try. You can launch the App by simply touching the icon. After you have finished with an App, press the phone's 'back' button to return to the main screen. Long press an App's icon to see other available actions. Editing Scripts You can edit Apps right here on your phone or tablet using the built-in script editor by long pressing on the App's icon and selecting the 'Edit' option. You can also edit your Apps on a PC or Mac in a browser using the built in Wifi editor, by touching the small arrow button at the top and following the instructions shown. Editing with a full size keyboard is much easier and we recommend that you use the WiFi editing for long coding sessions, especially for larger projects. The Wifi editor also allows you to easily upload image and sound resources to your App. Samples DroidScript comes with many sample Apps, ranging from very simple "Hello World" type Apps which show a single button to more complex ones which involve Web pages, Wifi and Phone-PC communication. It's a good idea to copy the script in one of these samples as a starting point for your own Apps. Try to find the one which best matches your requirements. Have a look at them right now! Measurements In order to maintain the scale of graphical objects in devices with different screen resolutions and orientations, all positioning and sizing values are given as a decimal fraction of the screen width or height. For example creating a button with a width of 0.5 would make the button half the screen width and using a height of 0.1 would make the button one tenth of screen height. You can however specify -1 or leave out the width and height parameters completely on many controls if you want the control to size according to its contents. Getting Started Before starting to write your own Apps it's a good idea to read the documentation explaining 'Layouts' as these are a fundamental part of every DroidScript App.
intro/02AppEvents.htm := App Events Back App Events Hello World Content: - OnStart() - OnMenu(name) - OnBack() - OnPause() - OnResume() - OnConfig() - OnAlarm() - OnData() - OnDrawer(side, state) In your app you can use various event functions which will be automatically called by DroidScript. OnStart() This is probably the most popular one. It will be called when DroidScript has initialized and it is the last function which will be called from global scope. That means every timeout you might have set will be called after OnStart was called. When OnStart has returned, the apps 'started' state will be set to true. Therefore app.IsStarted() method will return true as well. Example - OnStart setTimeout(OnLoad); function OnStart() { alert("called OnStart\nApp Started: " + app.IsStarted()); } function OnLoad() { alert("called OnLoad\nApp Started: " + app.IsStarted()); } Copy Copy All Run OnMenu(name) This event is called when the user selects an item from the in-app menu. See Also: SetMenu, ShowMenu Example - OnMenu function OnStart() { app.SetMenu( "Start,Stop,Pause" ); lay = app.CreateLayout( "linear", "" ); btn = app.CreateButton( "[fa-gear]", -1, -1, "fontawesome" ); btn.SetOnTouch( app.ShowMenu ); lay.AddChild( btn ); app.AddLayout( lay ); } function OnMenu( item ) { app.ShowPopup( item, "Short" ); } Copy Copy All Run OnBack() By default the app closes if the user presses the devices back-button. However, you can disable that behaviour by calling app.EnableBackKey(false). In this case the OnBack event will be called instead of closing the app. This can be useful to create a confirmation dialog before exiting: Example - Confirm Exit function OnStart() { app.EnableBackKey( false ); yndExit = app.CreateYesNoDialog("Exit App?"); yndExit.SetOnTouch( yndExit_OnTouch ); app.ShowPopup( "Press the back button" ); } function yndExit_OnTouch(reply) { if(reply == "Yes") app.Exit(); } function OnBack() { yndExit.Show(); } Copy Copy All Run OnPause() The OnPause event will be called when the user sends the app to the background, ie. when pressing the home button. Example - Detect Pause //Called when application is paused. function OnPause() { app.ShowPopup( "OnPause" ); } Copy All Run OnResume() The OnResume event will be called when the user returns to your app after sending it to the background. Example - Detect Resume //Called when application is resumed. function OnResume() { app.ShowPopup( "OnResume" ); } Copy All Run OnConfig() OnConfig is called when a device configuration changes, especially the screen orientation. This can be used to rearrange your layouts on orientation change. Example - Layout Orientation function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); txt1 = app.CreateText( "" ); txt1.SetTextSize( 64 ); lay.AddChild( txt1 ); txt2 = app.CreateText( "" ); txt2.SetTextSize( 64 ); lay.AddChild( txt2 ); OnConfig(); app.AddLayout( lay ); } //Called when screen rotates function OnConfig() { var orient = app.GetOrientation(); txt1.SetText(orient); if(orient == "Portrait") orient = "Vertical"; else orient = "Horizontal"; lay.SetOrientation( orient ); txt2.SetText( orient ); } Copy Copy All Run OnAlarm() If you have set up an app Alarm and it is triggered it will call the OnAlarm event. Example - OnAlarm function OnStart() { var now = Date.now(); app.SetAlarm( "Set", 1234, OnAlarm, Date.now() + 3000 ); // app.ToBack(); // app.Exit(); } //Called when alarm is triggered. //(Even if your app is closed) function OnAlarm( id ) { app.ShowPopup( "Got Alarm: id = " + id ); } Copy Copy All Run OnData() When an other app has sent an intent to your app you will get notified by the OnData event. Then you can retrieve the intent object using the app.GetIntent() method. Example - Received Intent Data //Handle data sent from other apps. function OnData( isStartUp ) { //Display intent data. var intent = app.GetIntent(); if( intent ) { //Extract main data. var s = "action: " + intent.action + "\n"; s += "type: " + intent.type + "\n"; s += "data: " + intent.data + "\n\n"; //Extract extras. s += "extras:\n"; for( var key in intent.extras ) s += key+": "+intent.extras[key] + "\n"; app.Alert( s, "OnData" ); } } Copy All Run OnDrawer(side, state) When the user opens or closes a drawer the OnDrawer callback is called. state can be “Open” or “Closed” side can be “Left” or “Right”
intro/03SavingData.htm := Saving Data Back Saving Data Hello World Content: • Save data during one session • Save data across multiple app starts • Using Databases In many cases you need to store user specific data like app settings on the users device. DroidScript provides some functions which makes it easier to handle this. Note: All explained methods are listed in the Database section. Save data during one session Some settings are just meaningful in a current running program. For example if you keep track of the current app state (opened tabs, documents, pages). For this purpose you can use the app.SetData and the app.GetData method. To clear stored data use app.ClearData. Save data across multiple app starts Many apps support in-app settings which will be loaded after each app start. The app object has several methods to save and load different types of data. To clear a saved value use the app.ClearValue method. Save SaveBoolean SaveNumber SaveText Load LoadBoolean LoadNumber LoadText Type Boolean Number String If you have many properties to save you can use an object structure instead of saving each value on their own. Load settings: var conf = JSON.parse( app.LoadText( "settings", "{}" )); Save settings: app.SaveText( "settings", JSON.stringify( conf )); Example - App Settings // default settings var settings = { version: "1.0", startNo: 0 }; function LoadSettings() { var tmp = JSON.parse(app.LoadText( "settings", "{}" )); // update settings object for(var i in tmp) settings[i] = tmp[i]; } function SaveSettings() { app.SaveText( "settings", JSON.stringify(settings) ); } function OnStart() { LoadSettings(); settings.startNo++; app.ShowPopup("Started " + settings.startNo + ". time"); SaveSettings(); } Copy Copy All Run Using Databases Using Databases is the most elaborate variant of the three. You should only consider using one if you have to perform complex queries on a large amount of datasets. Using JSON objects is more practicable and performant in most cases. DroidScript provides an extra OpenDatabase component for databases which uses the SQLitePlugin cordova-sqlite-storage. For a demo Have a look at the Database example.
intro/04CodingFeatures.htm := Coding Features Back Coding Features Hello World Content: • The cfg object • app.eventSource • Function Shortcuts • Permissions • Translations: T() • Unique Callbacks: I() - Custom Contexts: M() - obj.data DroidScript provides some methods and flags in the sourcecode which are not available in regular JavaScript code but are interpreted internally by DroidScript. You don't necessarily need to use these features but they are still pretty useful in some cases. The cfg object The cfg object can be used to apply app options to your app before it is launched. They should be placed at the very top of your main source script. cfg.Portrait/Landscape Defines the initial screen orientation your app will launch in cfg.Holo cfg.Light cfg.Dark These settings will change the look of all your controls. Holo was the default theme until DS 1.90 beta, where cfg.Light and cfg.Dark were added and cfg.Dark became the dark theme. Note that only Light and Dark theme can be exchanged securely, Holo might cause broken UI in some cases when switching to Light or Dark. cfg.Node Runs the app in NodeJS mode. cfg.MUI Enables builtin material component support through the MUI object. Note: This function is a premium feature. Please consider subscribing to Premium to use this feature and support DroidScript in its further development. cfg.Game The Game configuration will let your app immediately run in GameView mode. This way you can write your game code directly in the main script without bothering about creating the GameView container. cfg.Transparent This will let your app run transparently on the HomeScreen and it will stay on top of everything even if the user launches an other app. Note: This function is a premium feature. Please consider subscribing to Premium to use this feature and support DroidScript in its further development. cfg.Serv The Serv flag will serve any HTML or Hybrid app over a builtin HTTP server on port 3033. cfg.Console This will show the console as main page instead of the GUI. Drawers will still work with this config. cfg.NoSwapify This option prevents function name swapping during obfuscation cfg.Legacy Enables various legacy transparent app behaviour --> cfg.Fast The Fast config will make use of the J2V8 engine which increases the apps execution speed roughly by a factor of 3. Specifically it will increase the speed of app.* calls, which is quite useful for tween animations or when creating and modifying a huge amount of app controls. The drawback of this method is that all default WebView DOM objects are not available any more. This includes methods like setInterval and setTimeout which should be converted to app.Animate respectively. Note: The same effect can be observed when running in a Node.js environment (using the cfg.Node flag) app.eventSource In callback functions of controls you can use app.eventSource to access the callee control object without having to assign the control to a specific variable. Previously this could be achieved by using the this keyword. This allows you to create multiple controls with the same behaviour without having to redefine callback functions for different controls: Example - Use Case of this function OnStart() { lay = app.CreateLayout("Linear", "FillXY,VCenter"); lay.SetChildMargins(0, 0.03); for(var i = 1; i = 5; i++) { var btn = app.AddButton(lay, i, 0.6); btn.SetOnTouch(btnN_OnTouch); } app.AddLayout(lay); } function btnN_OnTouch() { // app.eventSource == this app.ShowPopup("Hello " + app.eventSource.GetText()); } Copy All Run Function Shortcuts There are shortcuts to certain functions, which are DW() => app.GetDisplayWidth() DH() => app.GetDisplayHeight() TW( txt, size) => app.GetTextBounds( txt, size, 0, null).width _PlaySound( file) _GetRandomColor(): color RGB( r, g, b): color atob2(): base64 . Permissions These methods can force DroidScript to add or remove specific permissions from your app. See also: GetPermission, CheckPermission Translations: T() Converts a keyword into the translated text using a lang.json file. Unique Callbacks: I() DroidScript checks if a callback function already exists and uses it instead of creating a new instance. This can cause issues when referring to other local variables in private scopes. Therefore you can wrap your callback functions in an I() clause to force DroidScript to create a new callback instance for that scope. Example - Using I() function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); NewButton("Button 1", lay); NewButton("Button 2", lay); NewButton2("Button 1", lay); NewButton2("Button 2", lay); app.AddLayout( lay ); } function NewButton(name, lay) { var btn = app.AddButton( lay, name, 0.3, 0.1 ); btn.SetMargins( 0, 0, 0, 0.02 ); btn.SetTextColor( "red" ); btn.SetOnTouch( function() { app.ShowPopup(name); }); } function NewButton2(name, lay) { var btn = app.AddButton( name, 0.3, 0.1 ); btn.SetTextColor( "green" ); btn.SetMargins( 0, 0.02 ); btn.SetOnTouch( I(function() { app.ShowPopup(name); })); } Copy Copy All Run Custom Contexts: M() The M() macro is equivalent to the I() macro, except that it accepts a custom 'this' context as first argument. obj.data Alternatively you can make use of the controls data property and the this keyword in callbacks. This way you can assign variables to the object they belong to and you still make use of the callback optimization by DroidScript: Example - Using this.data function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); NewButton2("Button 1", lay); NewButton2("Button 2", lay); app.AddLayout( lay ); } function NewButton2(name, lay) { btn = app.AddButton( lay, name, 0.3, 0.1 ); btn.SetTextColor( "green" ); btn.SetMargins( 0, 0.02 ); btn.data.name = name; btn.SetOnTouch( function() { app.ShowPopup(this.data.name); }); } Copy Copy All Run
intro/05WritingDSPlugins.htm := Writing DS Plugins Back Writing DS Plugins Hello World Content: • JavaScript Plugins • Java Plugins - Structure - Compile and Install - Communicate with your Java code DroidScript can't do everything imaginable. But you can help it to come closer to that by writing plugins. There are basically two types of plugins: JavaScript plugins which will behave like an extra included JS source script and Java plugins, which have a second compiled part written in java. JavaScript Plugins A basic JS plugin consists of 2 parts: - a MyPlugin.inc file containing the main JS source code - a MyPlugin.html file containing the main page of your plugin documentation. However you can add as many resources to it as you want. There is a generator available which can create, debug and install plugins on the fly. you can even debug your plugin directly from that app. Download it from the dspk store Java Plugins Writing java plugins is a bit tricky but once you get used to it you can get almost everything working. Structure There are two types of Java plugin packages: 1. The standard zip file: - contains a MyPlugin.inc and a MyPlugin.html file as JS plugins - a MyPlugin.jar file which contains the compiled classes.dex file. 2. An APK file: - an assets/ folder containing the MyPlugin.inc and the MyPlugin.html file - a compiled classes.dex file APK files are typically exported by AndroidStudio, AIDE and others. That leads us to the ways how you can write and more importantly compile java plugins. Compile and Install 1. The android app 'AIDE' - Download AIDE from PlayStore - Create a new AIDE project using the DroidScript SDK in the DS menu - Modify, Build, Install and Run the plugin app. A popup will appear once the plugin is ready to be installed on the next DroidScript restart 2. AndroidStudio - There is a UserPlugin template available on DroidScript's GitHub page - Follow the instructions in this BlogSpot guide It may be possible with other IDE's as well (ie. IntelliJ even has a AndroidSDK Plugin), but this has not been tested before or just couldn't be made to work. Communicate with your Java code In order to use the defined Java functions you have to call them from the JS part somehow. For this purpose DroidScript provides a _CreatePlugin component: var plg = _CreatePlugin( classpath, options ) plg.Destroy() plg.GetType() → string: “Plugin” plg.Send( name, p1, p2, p3, p4, p5, p6, p7, p8 ) → string plg.SendObj( name, obj, p1, p2, p3, p4, p5, p6, p7, p8 ) → string plg.CreateObj( type, p1, p2, p3, p4, p5, p6, p7, p8 ) → string: “#id” plg.SendImg( name, img, width, height ) → string plg.SendCam( name, cam ) → string On the Java side following functions in public class MyPlugin { } will get called by DroidScript: public MyPlugin() public void Init( Context ctx, Object parent ) public void Release() public String CallPlugin( Bundle b ) public String CallPlugin( Bundle b, Object obj ) public Object CreateObject( Bundle b ) public void CallScript(Bundle b, String webViewId)
intro/06CreatingGames.htm := Creating Games Back Creating Games Hello World Content: • Introduction • Overview: • GUI Games • Games with Images • Games with GLView • The GameView Introduction Something many coding beginners dream of is creating their own game. And not infrequently they think of a fancy 3D MMO shooter with eyecatching graphics, many levels, quests, characters and an exciting tears moving story on top of that. The reality looks a bit different but that's actually not a bad thing. Not that you'll be disappointed at the end: No DroidScript doesn't natively support 3D graphics yet. However it might not be far away. Let's be patient. Overview: For those who dislike reading I'll summarize some facts about the four ways you can create games in DroidScript: GUI Games: + Well suited for beginners + Easy animations using Tween.js + Intuitive style customization + Builtin touch, change etc. events for each element - Not suited for games with many animations and high framerate Image View: + Supports drawing of basic shapes, text (+ font loading) and image drawing + Good for simple games with more complex animations - Framerate drops quickly with increasing amount of drawing commands - basic shapes/text only: 20 draw commands → 30 fps - 6 0.3x0.2 images: ~20 fps (the smaller the drawn image the faster the drawing) GLView: + Very fast rendering + Supports drawing of subareas of a larger image (sprite sheets) - Only supports drawing images Game View: + Enormously fast rendering (See the Game BunnyStorm sample) + Many builtin game features: - Physics using Box2D - Sounds using JGAudio - SpriteSheets and SpriteSheet animations - Easy animations using Tween.js - Bitmap Fonts as game objects using angelcode xml format (visit BMFont Generator) + GL rendering and more with PIXI.js - basic shapes and polygons as game objects + Helper functions and main app access through the gfx object - Only works on Android 6 and newer GUI Games The by far easiest way to create games without complex maths and drawing commands is using GUI controls for your game. There will be few or even no animations at all. Instead the user can interact with the game like in a normal app. The following sample is a Tic Tac Toe implementation using button controls. It also demonstrates how UI controls can be animated using the Tween method. Example - Tic Tac Toe var btns = [], round = 1; var wh = app.GetDisplayWidth() / app.GetDisplayHeight(); //Called when app started. function OnStart() { app.SetOrientation( "Portrait" ); app.SetDebug( false ); lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); lay.SetBackColor( "#3355cc" ); txtPlayer = app.CreateText( "Player 1" ); txtPlayer.SetTextSize( 60, "pl" ); txtPlayer.SetMargins( 0, 0, 0, 0.1 ); lay.AddChild( txtPlayer ); //Create 3×3 Buttons for (var i = 0; i 3; i++) { var layH = app.CreateLayout( "Linear", "Horizontal" ); lay.AddChild( layH ); for (var j = 0; j 3; j++) { var btn = app.CreateButton( "", 0.3, 0.3 * wh, "gray" ); btn.SetOnTouch( btn_OnTouch ); btn.SetTextSize( 60, "pl" ); layH.AddChild( btn ); btn.data.index = 3 * i + j; btns.push( btn ); } } app.AddLayout( lay ); } //Occupy button function btn_OnTouch() { var player = round % 2 + 1; if( this.GetText() != "" ) return; else this.SetText("XO"[player - 1]); this.Tween( { sw:-1, rot: 360 }, 200 ); lay.SetTouchable( false ); //Check winrows if someone won var winRows = [ "012", "345", "678", "036", "147", "258", "048", "642" ]; for(var i in winRows) { var row = ""; for(var j = 0; j 3; j++) row += btns[winRows[i][j]].GetText(); if(row == "XXX" || row == "OOO") return EndGame(player ); } //End game if no more free buttons exists if(++round == 9) return EndGame(0); txtPlayer.SetText( "Player " + player ); lay.SetTouchable( true ); } //Show results and reset function EndGame(player) { if( player ) app.Alert( "Player" + player + " won!", "Congratulations" ); else app.Alert( "It's a draw." ); // reset game setTimeout( function() { btns.forEach( function(btn) { btn.SetText(""); } ); lay.SetTouchable( true ); round = 0; }, 2000 ); } Copy All Run Games with Images The most basic graphics container is the Image control. It also provides the most functionality for drawing like basic shapes, paint style and color, image drawing and even 2D matrix transformations. Despite the fact that the picture view is very powerful, it is not particularly fast. You should definitely use img.SetAutoUpdate(false); to be able to control when to update the canvas. By default you can achieve a maximum framerate of 60 fps, however the framerate decreases relatively fast the more draw commands you use. The following sample is a simple two-player Pong implementation using basic shapes only. It also demonstrates how you can handle multiple touches, and how a game can be made fps independent, so that collision detection on low fps is no problem any more. An advanced version is available on the dspk store. Example - Pong // User variables var x1 = 0.5, x2 = 0.5, p1 = 0, p2 = 0; // Called when app started. function OnStart() { app.SetOrientation( "Portrait" ); lay = app.CreateLayout( "Linear" ); img = app.CreateImage( null, 1, 1 ); img.SetOnTouch( img_OnTouch ); img.SetAutoUpdate( false ); img.SetTextSize( 30 ); lay.AddChild( img ); Score(); app.AddLayout( lay ); app.Animate( OnAnimate, 50 ); } // Move user bar function img_OnTouch( ev ) { x2 = ev.X; } function crop( v, a, b ) { return v a ? a : v > b ? b : v; } // Calculate ball movement for a given deltatime var x, y, v = 0.5, dx = 0, dy = 0; function Calculate( dt ) { x += v * dx * dt / 1000; y += v * dy * dt / 1000; v += dt / 5e4; if( dy 0 y 0.5) x1 += crop( 10 * (x - x1), -2, 2 ) * dt / 1000; if( x 0.02 ) dx = Math.abs(dx); if( x > 0.98 ) dx = -Math.abs(dx); if( y > 0.04 y 0.05 x > x1 - 0.1 x x1 + 0.1 ) { dy = Math.abs( dy ); dx += 5 * ( x1 - x ); } if( y 0.96 y > 0.95 x > x2 - 0.1 x x2 + 0.1 ) { dy = -Math.abs( dy ); dx += 5 * ( x - x2 ); } if( y 0 ) Score( p2++ ); if( y > 1 ) Score( p1++ ); } // Core loop function OnAnimate( t, dt, nodraw ) { // Calculate positions in 4 milliseconds steps do { Calculate(4); dt -= 4; } while( dt > 0 ); // Render state img.Clear(); img.DrawCircle( x, y, 0.02 ); img.DrawText( p1, 0.05, 0.4 ); img.DrawText( p2, 0.05, 0.6 ); img.DrawRectangle( x1 - 0.1, 0.03, x1 + 0.1, 0.04 ); img.DrawRectangle( x2 - 0.1, 0.96, x2 + 0.1, 0.97 ); img.Update(); } // Reset after score function Score() { x = 0.5; dx = 0; y = 0.5; dy = 0; v = 0.5; var PI = Math.PI; setTimeout( function() { var a = Math.random() * PI; if( a > PI/2 ) a += PI/2; dx = Math.cos( a + PI/4 ); dy = Math.sin( a + PI/4 ); }, 1000 ); } Copy All Run Games with GLView The third option you have is the so called GLView which is based on the FastCanvas Plugin The GLView has 2 unique properties: - Your application runs a full screen canvas - Use of the 2D canvas API is limited to transforms and drawing images (see: FastCanvas API) That does not mean the GLView is bad. The GLView can render an enormous amount of sprites on a acceptable framerate. (Ie. on my device 500 rendered sprites produced a framerate of about 45 fps). This makes it perfect for games using images and sprite sheets only. Additionally the GameView will also run on older devices unlike the last graphic container you'll experience now. The GameView https://dsgameview.wixsite.com/gameview
intro/07FileStructure.htm := File Structure Back File Structure Hello World Content: • DroidScript Folder - lang.json - user.keystore - build.json • Internal Files DroidScript Folder /sdcard/DroidScript/ ├── _nopremium_ ├── APKs/ │ └── user.keystore/ ├── SPKs/ ├── Plugins/ ├── Extensions/ └── PROJECT_NAME / ├── PROJECT_NAME .html ├── PROJECT_NAME .js ├── build.json ├── lang.json ├── ~ HIDDEN_FILE ├── Html/ ├── Snd/ ├── Misc/ └── Img/ ├── app-icon.png └── PROJECT_NAME .png (deprecated) lang.json If you want to allow users to switch languages, you can use the app.SetAppLanguage method and the T() function combined with a special JSON file called 'lang.json' in your app that looks like this:- Example - lang.json { "langs": [ "English", "Deutsch", "Español" ], "codes": { "english":"en", "deutsch":"de", "español":"es" }, "trans" : { "SelectLang" : { "en":"Please select your prefered language from the 'Settings' menu", "de":"Bitte wähle deine Sprache in den 'Einstellungen' aus", "es":"Selecciona tu idioma preferido en el menú 'Settings'" }, "PrivacyPolicy" : { "en":"Privacy Policy", "de":"Datenschutzerklärung", "es":"Política de Privacidad" } } } Copy All Also make sure you use the standard 2 letter language codes See also: T(), GetLanguage, GetLanguageCode, GetAppLanguages, GetAppLangCode, SetAppLanguage user.keystore This file is used for signing apks. It is STRONGLY recomended that you backup this file. You cannot update your app released using this key on Google Play or on any other device, unless you have the original file (and can also remember the password!) build.json If you create a file called 'build.json' at the top level of your project, then you will be able to control certain aspects of the APK build process, such as the 'minSdkVersion' setting in the manifest, which sets the minimum version of Android that your app will run on. Example - build.json { "manifest": { "minSdkVersion": 23, "targetSdkVersion": 28, "debuggable": false, "removePermissions": "WRITE\_EXTERNAL\_STORAGE", "homeScreen": false, "noPermsAction": "default", "pathPattern": ".*\.png,.*\.jpg" }, "autoPermissions": true } Copy All Run Note: This file is optional and not required for building APKs If you release your app on Google Play, the 'minSdkVersion' setting will control whether people with older phones can see your app in the store. If your app does not perform well on older versions of Android, then it is usually a good idea to make it unavailable for older phones or you will get lots of negative ratings and people will avoid your app. There may also be features such as Bluetooth 4.0 which are unavailable on older versions of Android. DroidScript uses a simplified permissions model and scans your code looking for the required Android permissions, but you may want more fine-grain control of these permissions, so the 'removePermissions' setting allows you to explicitly remove Android permissions from your APK. See the Android SDK docs for for a full list of permissions. The 'homeScreen' setting is only used for creating home screen launchers apps, public kiosks and machine control type apps which totally take over the Android device, so don't use this option unless you know what you are doing! If you want your app to handle certain types of file when the user tries to open them or use the 'Share via' option, then the 'pathPattern' setting allows you to specify which file types your app accepts. For example, if you were writing a text editor, then you would use the *\\.txt pattern. See the 'Shared Data' and 'Receive Intent' samples in DroidScript for demos of how to handle file and text in your app. The 'debuggable' setting is intended for advanced users and allows your installed app to be debugged via the Android Debug Bridge. This setting defaults to false and should never be set to true in public releases of your app. Example - minimal build.json { "manifest": { "minSdkVersion": 23, "targetSdkVersion": 28 } } Copy All Run Internal Files Here is a selection of the most common used internal DroidScript assets, that are available in DroidScript and when enabling 'Include Assets' in the APK Builder. /Sys/Img/ AScript.png Add.png Banner.png BarA.png Bird_960x687x3x3.png BlackBack.jpg BlueBack.jpg Bulb.png Bunny.png Color.png Connect.png Droid1.png Droid2.png Eagle1.png Eagle2.png Exit.png Explode1.png Explode2.png Explode3.png Explode4.png Explode5.png Files.png Forward.png GreenBack.jpg Hello.png Icon.png JoyPad.png Layout.png Left.png Light.png Mic.png Notify.png NxtConn.png Offline.png Pillar.png PillarTop.png Play.png Question.png Refresh.png Reverse.png Right.png Settings.png Sky.jpg Sound.png Splash.gif Splat.png Spring.png Sprint.png StarField.jpg Tab.png TabHi.png TabHi_.png Tab_.png Tile.png Touch.png Ultra.png VBarA.png VBarB.png VBarC.png Xylophone.png bar_dark.png desyrel.png desyrel.xml ioio.png /Sys/Snd/ Bullet.mp3 Explode.mp3 Poing.ogg Squeak.mp3 Trill.ogg Other: /Sys/fonts/fontawesome-webfont.ttf /Sys/Html/Page.htm /Sys/Html/Template.htm /Sys/images/android-logo-mask.png /Sys/images/android-logo-shine.png /Sys/images/clock_font.png Drawable Resources: These are not regular files but xml-based "drawable resources" provided by Android in the resources.arsc file. These two are used in some examples, but there are more: /res/drawable/pattern_carbon /res/drawable/picture_frame
intro/08BestPractices.htm := Best Practices Back Best Practices Hello World Content: • General • Performance - UI - Graphics / Animations • Getting Help General - Use the cfg object to enter specific app modes immediately (See 04CodingFeatures for more details) - Use app.Script to load extra source files - Use app.Add* eqivalents to app.Create* to make your code shorter and cleaner - Use features that DS provides you instead of doing them yourself (ie. filtering ListFolder items) - Frequently check the debug log for any warnings or errors - especially before releasing your app (see CreateDebug) - Use the web IDE for coding if you have a laptop because it is much easier than typing and debugging on a phone Performance UI - Wrap your UI creation in app.Hide and app.Show - Use cfg.Dark and cfg.Light for an easy Light/Dark theme setting - Use obj.Batch to do a whole bunch of configuration calls at one shot - Add a (optionally animated) splash screen while your app loads UI - Use app.SetDebug(false) in your release version - Reduce the use of app.* calls (especially in loops) as it calls the backend bridge in most cases - Use lay.SetChildMargins and lay.SetChildTextSize to apply these properties to all children - When initializing list controls use a precompiled item list instead of calling AddItem multiple times - Apply styling to buttons and text boxes using the “Html” option - Use the premium app.CreateTheme method for styling controls Graphics / Animations - Use app.Animate instead of setInterval - Use img.SetAutoUpdate(false) and use manual img.Update calls - Switch to the CreateGameView control (using cfg.Game) as its generally faster and works in web browsers too - use the “async” option to load images Getting Help - Check out this documentation and the DS Wiki for any hints - Check if your issue has been resolved before by searching keywords on Google and on the OfficialForums - For short questions check out the Chat extension in the mobile or WiFi IDE - For more complex questions formalize your issue in the OfficialForums - Always be polite, respectful and never offend any person or group of people - Describe your issue in a way people can understand it without knowing anything about your individual project - Attach screenshots and demo SPKs to your question - Consider putting together a minimal demo showcasing your issue Example - GetDeviceSpecs // https://developer.android.com/guide/topics/manifest/uses-sdk-element#ApiLevels var allBuilds = JSON.parse('{' + '"1":{"level":1,"codename":"(no code name)","version":"1.0"}, ' + '"2":{"level":2,"codename":"(no code name)","version":"1.1"} , ' + '"3":{"level":3,"codename":"Cupcake","version":"1.5"}, ' + '"4":{"level":4,"codename":"Donut","version":"1.6"}, ' + '"5":{"level":5,"codename":"Eclair","version":"2.0"}, ' + '"6":{"level":6,"codename":"Eclair","version":"2.0.1"}, ' + '"7":{"level":7,"codename":"Eclair","version":"2.1"}, ' + ' "8":{"level":8,"codename":"Froyo","version":"2.2.x"}, ' + ' "9":{"level":9,"codename":"Gingerbread","version":"2.3 - 2.3.2"}, ' + ' "10":{"level":10,"codename":"Gingerbread","version":"2.3.3 - 2.3.7"}, ' + ' "11":{"level":11,"codename":"Honeycomb","version":"3.0"}, ' + ' "12":{"level":12,"codename":"Honeycomb","version":"3.1"}, ' + ' "13":{"level":13,"codename":"Honeycomb","version":"3.2.x"}, ' + ' "14":{"level":14,"codename":"Ice Cream Sandwich","version":"4.0.1 - 4.0.2"}, ' + ' "15":{"level":15,"codename":"Ice Cream Sandwich","version":"4.0.3 - 4.0.4"}, ' + ' "16":{"level":16,"codename":"Jelly Bean","version":"4.1.x"}, ' + ' "17":{"level":17,"codename":"Jelly Bean","version":"4.2.x"}, ' + ' "18":{"level":18,"codename":"Jelly Bean","version":"4.3.x"}, ' + ' "19":{"level":19,"codename":"KitKat","version":"4.4 - 4.4.4"}, ' + ' "20":{"level":20,"codename":"K or L","version":"4 or 5"}, ' + ' "21":{"level":21,"codename":"Lollipop","version":"5.0"}, ' + ' "22":{"level":22,"codename":"Lollipop","version":"5.1"}, ' + ' "23":{"level":23,"codename":"MarshMallow","version":"6.0"}, ' + ' "24":{"level":24,"codename":"Nougat","version":"7.0"}, ' + ' "25":{"level":25,"codename":"Nougat","version":"7.1"}, ' + ' "26":{"level":26,"codename":"Oreo","version":"8.0"}, ' + ' "27":{"level":27,"codename":"Oreo","version":"8.1"}, ' + ' "28":{"level":28,"codename":"Pie","version":"9"}, ' + ' "29":{"level":29,"codename":"Q","version":"10"}, ' + ' "30":{"level":30,"codename":"R","version":"11"}, ' + ' "31":{"level":31,"codename":"S","version":"12"}, ' + ' "32":{"level":32,"codename":"S_V2","version":"12"} ' + ' }'); var osObj = allBuilds[app.GetOSVersion()] try { var osInfo = "Android " + osObj.version + " (" + osObj.codename + ") API level " + osObj.level } catch(err){var osInfo = app.GetOSVersion();} var lay, txt, scroller //Called when application is started. function OnStart() { //Create a layout with objects vertically centered. lay = app.CreateLayout("linear", "VCenter,FillXY"); // create viewr for specs scroller = app.CreateScroller(1, 0.8); var specs = getDeviceSpecs(); txt = app.CreateText(specs, 1, 0.8, "left,multiLine"); txt.SetPadding(0.02, 0.01, 0.02, 0.01); //txt.SetTextColor("#ff446666"); scroller.AddChild(txt); lay.AddChild(scroller); //Create a button and add it to layout. var btn = app.CreateButton("[fa-copy]", -1, -1, "fontAwesome"); btn.SetTextSize( 32 ) btn.SetOnTouch(btn_OnTouch); lay.AddChild(btn); //Add layout to app. app.AddLayout(lay); OnConfig() } function btn_OnTouch() { app.SetClipboardText(txt.GetText( ) ); app.ShowPopup("Copied to clipboard") } function getBuilderVersion() { var msg = "Apk Builder plugin not installed"; var path = app.GetPrivateFolder("Plugins") + "/apkbuilder/Version.txt" if(app.FileExists(path)) { msg = "Apk Builder version " + app.ReadFile( path ) } else if(app.IsAPK()) { msg = "APK built with " + app.GetDSVersion().toFixed(2); } return msg } function getDeviceSpecs() { var os = app.GetOSVersion(); var model = app.GetModel(); var tablet = app.IsTablet(); var fromapk = app.IsAPK(); var isChrome = app.IsChrome(); var isPrem = app.IsPremium(); var isTV = app.IsTV(); var dsversion = app.GetDSVersion().toFixed(2); //Get screen dimensions. var sw = app.GetScreenWidth(); var sh = app.GetScreenHeight(); var dens = app.GetScreenDensity(); //Get display dimensions. var dw = app.GetDisplayWidth(); var dh = app.GetDisplayHeight(); //Get drive details var intfld = app.GetInternalFolder(); var extfld = app.GetExternalFolder(); var intspace = app.GetFreeSpace("internal"); var extspace = app.GetFreeSpace("external"); var mem = app.GetMemoryInfo().total.toLocaleString("en-US"); //specs are formatted as a comment so we can paste //them somewhere convenient try { os = osInfo; } catch(err) {} var s = "/*\n" + "os=" + os + "\n" + getBuilderVersion() + "\n" + "tablet=" + tablet + "\n" + "model=" + model + "\n" + "isChrome=" + isChrome + "\n" + "isTV=" + isTV +"\n" + "DroidScript=" + dsversion + "\n" + "Storage access=" + storageScoped() + "\n" + "screen width=" + sw + "\n" + "screen height=" + sh + "\n" + "screen density=" + dens + "\n" + "display width=" + dw + "\n" + "display height=" + dh + "\n" + "internal folder=" + intfld + "\n" + "external folder=" + extfld + "\n" + "int free space=" + intspace + "\n" + "ext free space=" + extspace + "\n" + "memory=" + mem +"\n" + "premium=" + isPrem +"\n" + "country code=" + app.GetCountryCode() + "\n" + "country=" + app.GetCountry() + "\n" + "language code=" + app.GetLanguageCode() + "\n" + "language=" + app.GetLanguage() + "\n" + "wifi=" + app.GetIPAddress() + "\n" + "userAgent='" + navigator.userAgent + "'\n" + "*/"; return(s); } function storageScoped() { return app.IsScoped()?"Scoped":"Traditional"; } //called when screen rotates //also called at startup to fix Chromebook display size anomaly function OnConfig() { var fixwid = lay.GetAbsWidth()/app.GetDisplayWidth(); var fixhigh = lay.GetAbsHeight()/app.GetDisplayHeight(); var wid = 1, high = 0.8; if (fixwid 1) wid *= fixwid; // chromebook not using full width if (fixhigh 1) high *= fixhigh; // or height scroller.SetSize( wid,high ); txt.SetSize( wid, high ); } Copy All Run
intro/09AppIntents.htm := App Intents Back App Intents Hello World Content: • General • Default Apps • URI Intents • Standard Apps • Settings • Misc General Intents are a way of communicating between apps, to initiate a specific task or to navigate the user to a different app for various reasons. The used app methods are SendIntent and OpenUrl. This section is a collection of various examples that illustrate various use cases of intents and related methods. Default Apps Example - Default Apps var categories = [ "android.intent.category.APP_BROWSER", // browser "android.intent.category.APP_MUSIC", // music "android.intent.category.APP_CALCULATOR", // calculator "android.intent.category.APP_CONTACTS", // contacts "android.intent.category.APP_EMAIL", // email "android.intent.category.APP_MAPS", // maps "android.intent.category.APP_GALLERY", // gallery "android.intent.category.APP_CALENDAR", // calendar "android.intent.category.APP_MARKET", // market "android.intent.category.APP_MESSAGING", // messaging ]; app.SendIntent(null, null, "android.intent.action.MAIN", categories[0]); Copy All Run URI Intents Playstore App Page var packageName = "com.skype.raider"; app.OpenUrl("market:details?id=" + packageName); Skype: URI documentation app.OpenUrl("skype:echo123?call"); Standard Apps GMail Example - Create Email in GMail App var packageName = "com.google.android.gm"; var className = "com.google.android.gm.ComposeActivityGmail"; var action = "android.intent.action.VIEW"; var category = null; var uri = "myfriend@gmail.com"; var type = "message/rfc822"; var extras = JSON.stringify([ { name: "android.intent.extra.EMAIL", type: "list", value: "fred@gmail.com" }, { name: "android.intent.extra.SUBJECT", type: "string", value: "My subject" }, { name: "android.intent.extra.TEXT", type: "string", value: "Hello!" } ]); app.SendIntent(packageName, className, action, category, uri, type, extras); Copy All Run Google Maps Google Maps intent documentation Example - Basic Maps function OnStart() { var lat = "51.5117"; var lng = "-0.1275"; simpleMap(lat, lng); } function simpleMap(latitude, longitude) { var packageName = "com.google.android.apps.maps"; var className = null; var action = "android.intent.action.VIEW"; var uri = "geo:" + latitude + "," + longitude; app.SendIntent(packageName, className, action, null, uri); } Copy All Run Example - Maps Turn by Turn Navigation function navigateTo(latitude, longitude) { var packageName = "com.google.android.apps.maps"; var className = null; var action = "android.intent.action.VIEW"; var uri = "google.navigation:q=" + latitude + "," + longitude; if (app.IsAppInstalled(packageName)) app.SendIntent(packageName, className, action, null, uri); else app.Alert("maps app not installed"); } Copy All Run Example - Maps Location app.SendIntent( "com.google.android.apps.maps", null, "android.intent.action.VIEW", "android.intent.category.DEFAULT", "geo:0,0?q=34.5678,123.4567 (Placename)" // uri argument ); Copy All Run Phone Calls Note: package and activity are not required because the dialer app differs among manufacturers and sometimes event among models from same manufacturer. Example - Phone Call /* Some devices may display the Dialer app for both `DIAL` and `CALL`. * `CALL` requires `PHONE` permission and `DIAL` does not * `DIAL` does not allow emergency calls * `DIAL` suppresses some special characters such as # to prevent abuse */ // Launch Dialer app app.SendIntent(null, null, "android.intent.action.DIAL", null, "tel colon;5551237654"); // Direct Call app.SendIntent(null, null, "android.intent.action.CALL", null, "tel colon;5551237654"); Copy All Run SMS Example - Basic SMS var number = "0123456789"; var message = "my message"; app.SendIntent(null, null, "android.intent.action.SENDTO", null, 'smsto:' + number, null, JSON.stringify([{ name: "sms_body", type: "string", value: message }])); Copy All Run Camera Example - Camera Modes // Launch a camera in still image mode. app.SendIntent(null, null, "android.media.action.STILL_IMAGE_CAMERA"); // Launch secure photo mode without attaching personal info // previous snaps/videos, gallery, etc. link won't work // used when device is secured (pin, password, etc), recommended use in locker apps. app.SendIntent(null, null, "android.media.action.STILL_IMAGE_CAMERA_SECURE"); // Launch a camera in video recording mode. app.SendIntent(null, null, "android.media.action.VIDEO_CAMERA"); Copy All Run Settings The Settings Intent Documentation has a Constants section with available Actions. Replace ACTION_ by android.settings. to get the category parameter. Example - Settings // Bluetooth app.SendIntent(null, null, "android.settings.BLUETOOTH_SETTINGS" ) // WiFi app.SendIntent(null, null, "android.settings.WIFI_SETTINGS" ) Copy All Run Misc Example - Add Calendar Event function cal_si_insert() { var today = Date.now(); var extras = [ { name: "description", type: "string", value: "DS SendIntent Description" }, { name: "title", type: "string", value: "DS SendIntent Title" }, { name: "beginTime", type: "long", value: today }, { name: "eventLocation", type: "string", value: "DS SendIntent Address" }, { name: "endTime", type: "long", value: today + 3600000 }, ]; extras = JSON.stringify(extras); app.SendIntent(null, null, "android.intent.action.INSERT", null, "android.intent.Events.CONTENT_URI", "vnd.android.cursor.item/event", extras); } Copy All Run Example - Receive Broadcasts function OnStart() { app.EnableBackKey(false); app.SetOnBroadcast(rb, "android.intent.action.HEADSET_PLUG"); app.SetOnBroadcast(rb, "android.intent.action.SOUND_SETTINGS"); app.SetOnBroadcast(rb, "android.media.VOLUME_CHANGED_ACTION"); app.SetOnBroadcast(rb, "android.intent.action.TIME_TICK"); app.SetOnBroadcast(rb, "android.AccessibilityService.FINGERPRINT_GESTURE_SWIPE_DOWN"); app.SetOnBroadcast(rb, "android.action.CAMERA_BUTTON"); app.SetOnBroadcast(rb, "android.action.MEDIA_BUTTON"); app.SetOnBroadcast(rb, "android.bluetooth.a2dp.profile.action.CONNECTION_STATE_CHANGED"); //app.SetOnBroadcast( rb ,"android.bluetooth.a2dp.profile.action.PLAYING_STATE_CHANGED"); app.SetOnBroadcast(rb, "android.bluetooth.adapter.action.CONNECTION_STATE_CHANGED"); app.SetOnBroadcast(rb, "android.bluetooth.adapter.action.DISCOVERY_FINISHED"); app.SetOnBroadcast(rb, "android.bluetooth.adapter.action.DISCOVERY_STARTED"); app.SetOnBroadcast(rb, "android.bluetooth.adapter.action.LOCAL_NAME_CHANGED"); app.SetOnBroadcast(rb, "android.bluetooth.adapter.action.SCAN_MODE_CHANGED"); app.SetOnBroadcast(rb, "android.bluetooth.adapter.action.STATE_CHANGED"); app.SetOnBroadcast(rb, "android.bluetooth.device.action.ACL_CONNECTED"); app.SetOnBroadcast(rb, "android.bluetooth.device.action.ACL_DISCONNECTED"); app.SetOnBroadcast(rb, "android.bluetooth.device.action.ACL_DISCONNECT_REQUESTED"); app.SetOnBroadcast(rb, "android.bluetooth.device.action.BOND_STATE_CHANGED"); app.SetOnBroadcast(rb, "android.bluetooth.device.action.CLASS_CHANGED"); app.SetOnBroadcast(rb, "android.bluetooth.device.action.FOUND"); app.SetOnBroadcast(rb, "android.bluetooth.device.action.NAME_CHANGED"); app.SetOnBroadcast(rb, "android.bluetooth.device.action.UUID"); app.SetOnBroadcast(rb, "android.bluetooth.devicepicker.action.DEVICE_SELECTED"); app.SetOnBroadcast(rb, "android.bluetooth.devicepicker.action.LAUNCH"); app.SetOnBroadcast(rb, "android.bluetooth.headset.action.VENDOR_SPECIFIC_HEADSET_EVENT"); app.SetOnBroadcast(rb, "android.bluetooth.headset.profile.action.AUDIO_STATE_CHANGED"); app.SetOnBroadcast(rb, "android.bluetooth.headset.profile.action.CONNECTION_STATE_CHANGED"); app.SetOnBroadcast(rb, "android.bluetooth.input.profile.action.CONNECTION_STATE_CHANGED"); app.SetOnBroadcast(rb, "android.bluetooth.pan.profile.action.CONNECTION_STATE_CHANGED"); } function rb(type, msg) { alert(JSON.stringify(type)); //alert(JSON.stringify(msg)); } function handleReply(error, reply) { alert(JSON.stringify(error)); alert(JSON.stringify(reply)); } function OnBack() { app.ToFront(); } function OnPause() { app.ToFront(); } Copy All Run
intro/10AppTypes.htm := App Types Back App Types Hello World Content: • Overview • Html • Native • Node Native • Hybrid Overview Feature \ App Type HTML Native Node Native Hybrid Native Methods Native UI HTML / CSS UI via WebView Component via WebView Component MUI Components Node.js via NodeJS Component via NodeJS Component via NodeJS Component Cross Platform Environment Android WebView Android WebView NodeJS Android WebView Minimum APK Size low (4MB) low (4MB) high (30MB) moderate (10MB) Html An 'HTML' app is simply a foreground Android Webview showing a standard HTML/CSS/JS (web style) user interface. It can make app.* native Android calls via the JavaScript→Native bridge. Advantages: - standard web technologies and libraries to create UI. - well documented in the web (W3Schools) - Small APK size and memory usage Disadvantages: - More time consuming to develop, HTML/CSS experience required - No native 'look and feel' of Android Native A 'Native' app uses an invisible Android Webview to run the main JavaScript code, but the app's user interface is created with native Android controls via calls across the JS→Native bridge. Advantages: - Simple to use - Direct access to browser features as Android WebView evolves (i.E. WebBluetooth, Canvas, WebAssembly, WebRTC) - Small APK size and memory usage Disadvantages: - The performance is slower for complex UI (can be improved with cfg.Fast at the loss of DOM objects) - Modern browser features might not work with older WebView versions Node Native A 'Node Native' app runs the main JavaScript code inside a standard NodeJS instance instead of the WebView. User interface is made using native Android controls which are accessed using app.* methods. These native calls run via a custom NodeJS extension instead of the Js→Native bridge. Advantages: - Native UI + powerful server/IOT functionality all in one - Access to many thousands of free 'npm' modules for extending app functionality - Higher performance when creating complex native user interfaces Disadvantage: - Large APK size, more memory usage Hybrid A 'Hybrid' app runs the main JavaScript code inside a foreground Android WebView, the users creates the UI programatically like with 'Native' apps, but it's rendered inside the same WebView using HTML/CSS instead of using native Android controls across the bridge. Advantages: - Simple and fast to use - WYSIWYG editor available - Industry standard 'Material' look and feel - Low memory usage, Smaller APK - Cross-Platform compatible, since it is just HTML/CSS in the background - No JS→Native bridge required for rendering UI (build complex UI faster) - Switch between light and dark theme at runtime Disadvantages: - Fewer customization options for look and feel - app.* and NodeJS features break cross-platform compatibility
app/AddButton.htm := AddButton Back AddButton Hello World Creates and adds a Button to a Layout. app.AddButton( layout, text, width, height, options ) → app object: Button See CreateButton for full documentation.
app/AddCameraView.htm := AddCameraView Back AddCameraView Hello World Creates and adds a CameraView to a Layout. app.AddCameraView( layout, width, height, options ) → app object: CameraView See CreateCameraView for full documentation.
app/AddCanvas.htm := AddCanvas Back AddCanvas Hello World Creates and adds a blank white Image with the AutoUpdate feature turned off to a Layout. app.AddCanvas( layout, file, width, height, options, pxw, pxh ) → app object: Image See CreateImage for full documentation.
app/AddCheckBox.htm := AddCheckBox Back AddCheckBox Hello World Creates and adds a CheckBox to a Layout. app.AddCheckBox( layout, text, width, height, options ) → app object: CheckBox See CreateCheckBox for full documentation.
app/AddCodeEdit.htm := AddCodeEdit Back AddCodeEdit Hello World Creates and adds a CodeEdit to a Layout. app.AddCodeEdit( layout, text, width, height, options ) → app object: CodeEdit Note: This function is a premium feature. Please consider subscribing to Premium to use this feature and support DroidScript in its further development. See CreateCodeEdit for full documentation.
app/AddDrawer.htm := AddDrawer Back AddDrawer Hello World AddDrawer adds layout as drawer on a given side. app.AddDrawer( layout, side, width, grabWidth ) If the user swipes from this side to the other the layout will slide out. See Also: OpenDrawer, CloseDrawer, RemoveDrawer Example - left function OnStart() { lay = app.CreateLayout( "Linear", "FillXY,VCenter" ); txt1 = app.CreateText( " -- swipe" ); txt1.SetTextSize( 30 ); lay.AddChild( txt1 ); app.AddLayout( lay ); layDrawer = app.CreateLayout( "Linear", "FillXY,VCenter" ); layDrawer.SetBackground( "/Sys/Img/BlueBack.jpg" ); txt2 = app.CreateText( "Hello" ); txt2.SetTextSize( 40 ); layDrawer.AddChild( txt2 ); app.AddDrawer( layDrawer, "left", 0.8 ); } Copy Copy All Run
app/AddImage.htm := AddImage Back AddImage Hello World Creates and adds a Image to a Layout. app.AddImage( layout, file, width, height, options, pxw, pxh ) → app object: Image See CreateImage for full documentation.
app/AddLayout.htm := AddLayout Back AddLayout Hello World AddLayout adds a layout to the screen so that it is visible (if not hidden with SetVisibility) When CreateLayout arguments are passed it will create the layout just like app.CreateLayout and also add it. app.AddLayout( layout, type, options ) See Also: RemoveLayout Example - Vertical function OnStart() { lay = app.CreateLayout( "Linear", "FillXY,VCenter" ); txt = app.CreateText( "Hello" ); txt.SetTextSize( 50 ); lay.AddChild( txt ); app.AddLayout( lay ); } Copy Copy All Run
app/AddList.htm := AddList Back AddList Hello World Creates and adds a List to a Layout. app.AddList( layout, list, width, height, options, delim ) → app object: List See CreateList for full documentation.
app/AddScroller.htm := AddScroller Back AddScroller Hello World Creates and adds a Scroller to a Layout. app.AddScroller( layout, width, height, options ) → app object: Scroller See CreateScroller for full documentation.
app/AddSeekBar.htm := AddSeekBar Back AddSeekBar Hello World Creates and adds a SeekBar to a Layout. app.AddSeekBar( layout, width, height, options ) → app object: SeekBar See CreateSeekBar for full documentation.
app/AddSpinner.htm := AddSpinner Back AddSpinner Hello World Creates and adds a Spinner to a Layout. app.AddSpinner( layout, list, width, height, options ) → app object: Spinner See CreateSpinner for full documentation.
app/AddSwitch.htm := AddSwitch Back AddSwitch Hello World Creates and adds a Switch toggle to a Layout. app.AddSwitch( layout, text, width, height, options ) → app object: Switch See CreateSwitch for full documentation.
app/AddTabs.htm := AddTabs Back AddTabs Hello World Creates and adds a Tabs control to a Layout. app.AddTabs( list, width, height, options ) → app object: Tabs See CreateTabs for full documentation.
app/AddText.htm := AddText Back AddText Hello World Creates and adds a Text to a Layout. app.AddText( layout, text, width, height, options ) → app object: Text See CreateText for full documentation.
app/AddTextEdit.htm := AddTextEdit Back AddTextEdit Hello World Creates and adds a TextEdit to a Layout. app.AddTextEdit( layout, text, width, height, options ) → app object: TextEdit See CreateTextEdit for full documentation.
app/AddToggle.htm := AddToggle Back AddToggle Hello World Creates and adds a Toggle to a Layout. app.AddToggle( layout, text, width, height, options ) → app object: Toggle See CreateToggle for full documentation.
app/AddVideoView.htm := AddVideoView Back AddVideoView Hello World Creates and adds a VideoView to a Layout. app.AddVideoView( layout, width, height, options ) → app object: VideoView See CreateVideoView for full documentation.
app/AddWebView.htm := AddWebView Back AddWebView Hello World Creates and adds a WebView to a Layout. app.AddWebView( layout, width, height, options, zoom ) → app object: WebView See CreateWebView for full documentation.
app/Alert.htm := Alert Back Alert Hello World Alert shows a simple text dialog with a colored title and a 'Ok' button to exit. app.Alert( message, title, options, hue ) If title was not given the dialog looks like a normal alert box. Without the NoDim option the background behind the dialog will be darkened. Note: If no (or a falsy) title is specified the method will use the standard DOM alert() method, which will block the code's execution until closed. See Also: Error, ShowTextDialog, CreateYesNoDialog. Example - No Title function OnStart() { app.Alert( "Hello World!" ); } Copy Copy All Run Example - Yellow Title function OnStart() { app.Alert( "This is an alert box", "Hello Yellow World!", "", -100 ); } Copy Copy All Run
app/Animate.htm := Animate Back Animate Hello World Content: - Comparison Animate calls a function repeatedly like setInterval() but with the current time (Date.getTime()) and the difference to the last call in milliseconds as parameter. app.Animate( callback, fps ) To stop the animation loop you can pass null as first argument. You can not have multiple animation loops at once. When using cfg.NoDom; you cannot use JavaScripts setInterval but only the Animate function. Note: The NoDom option is currently not available due to GooglePlays 64bit requirement since August 2019. Comparison normal: setInterval: about 242 calls per second app.Animate: about 217 calls per second with “NoDom” option: setInterval: error app.Animate: up to 1000 calls per second Example - Multiple Animation loops function OnStart() { lay = app.CreateLayout("Linear"); txt1 = app.CreateText("0"); lay.AddChild(txt1); txt2 = app.CreateText("0"); lay.AddChild(txt2); app.AddLayout(lay); // delay between calls: 1000ms / 10fps = 100 ms // for higher precision use higher fps app.Animate(loop, 10); } var t1 = 0, t2 = 0, n1 = 0, n2 = 0; function loop(t, dt) { // set txt1 every 500 ms if(t - t1 >= 500) { txt1.SetText(++n1 + "\tdt: " + (t - t1)); t1 = t; } // set txt2 every 300 ms if(t - t2 >= 300) { txt2.SetText(++n2 + "\tdt: " + (t - t2)); t2 = t; } } Copy All Run Example - Digital Clock function OnStart() { app.SetOrientation( "Portrait" ); app.SetDebugEnabled( false ); lay = app.CreateLayout( "Linear", "FillXY,VCenter" ); txt = app.CreateText( "", -1, -1, "multiline" ); txt.SetTextSize( 30 ); lay.AddChild( txt ); app.AddLayout( lay ); app.Animate( OnAnimate, 30 ); } function OnAnimate( time, dtime ) { txt.SetText( new Date().toLocaleString() + "\n" + time ); } Copy Copy All Run Example - SpeedTest cfg.No_Dom; var ltime = Date.now(), c = 0; function OnStart() { lay = app.CreateLayout( "Linear", "FillXY,VCenter" ); txt = app.CreateText( "", .5, .1, "left" ); lay.AddChild( txt ); app.AddLayout( lay ); app.Animate(OnAnimate, 1000); } function OnAnimate( time, dtime ) { c++; if( time - ltime >= 1000 ) { txt.SetText( c + " cps" ); ltime = time; c = 0; } } Copy Copy All Run function( time, dtime )
app/Broadcast.htm := Broadcast Back Broadcast Hello World Broadcast is used for broadcasting messages between DroidScript apps. app.Broadcast( type, message ) See Also: SetOnBroadcast
app/BroadcastIntent.htm := BroadcastIntent Back BroadcastIntent Hello World Send a broadcasting intent with a custom action. app.BroadcastIntent( action, category, data, type, extras, options )
app/Call.htm := Call Back Call Hello World Call is used to call the given phone number. app.Call( number ) Example - Check Voice Messages function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); edtNumber = app.CreateTextEdit( "5500", .8, -1, "singleline,number,center" ); edtNumber.SetTextSize(20); lay.AddChild(edtNumber); btnPhone = app.CreateButton( "Call", 0.5, 0.1 ); btnPhone.SetOnTouch( btnCall_OnTouch ); lay.AddChild( btnPhone ); app.AddLayout( lay ); } function btnCall_OnTouch() { app.Call( edtNumber.GetText() ); } Copy Copy All Run
app/CancelJob.htm := CancelJob Back CancelJob Hello World Cancels a background job started via ScheduleJob. app.CancelJob()
app/CheckLicense.htm := CheckLicense Back CheckLicense Hello World Will trigger a standard Google Play license check for the running application (if it is a paid App). app.CheckLicense( key ) The key can be found under “Development Tools > Services and API's” in the GooglePlay developer console. If the App is not licensed it will show a dialog asking them to purchase the App from Google Play and then close the App.
app/CheckPermission.htm := CheckPermission Back CheckPermission Hello World CheckPermission checks whether the permission of a particular component has been granted. app.CheckPermission( type ) → List: [ “Permissions” ] See Also: GetPermission RemovePermission ListPermissions Example - check and get permissions function OnStart() { var check = app.CheckPermission( "Camera,ExtSDcard,Network,Storage" ); if( check ) { app.GetPermission( check, PermissionResult ); } else alert( "everything ok!" ); } function PermissionResult( ungranted ) { alert( "ungranted: " + ungranted ); } Copy Copy All Run
app/ChooseAccount.htm := ChooseAccount Back ChooseAccount Hello World Opens an Android dialog and allows the user to select one of the registered Google/Gmail accounts or add one. app.ChooseAccount( callback ) The selected email address is returned as the first argument in the callback function. See Also: GetAccounts Example - Choose Account function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); btnChoose = app.CreateButton( "Choose Account", 0.5, 0.1 ); btnChoose.SetOnTouch( btnChoose_OnTouch ); lay.AddChild( btnChoose ); app.AddLayout( lay ); } function btnChoose_OnTouch() { app.ChooseAccount( OnChoose ); } function OnChoose( account ) { alert( "selected account: " + account ); } Copy Copy All Run function( account )
app/ChooseContact.htm := ChooseContact Back ChooseContact Hello World ChooseContact opens the Contacts app so that the user can select the name and either the phone number or email address of a user. app.ChooseContact( type, callback ) Example - Choose Phone Number function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); btnChoose = app.CreateButton( "Choose Phone", 0.5, 0.1 ); btnChoose.SetOnTouch( btnChoose_OnTouch ); lay.AddChild( btnChoose ); app.AddLayout( lay ); } function btnChoose_OnTouch() { app.ChooseContact( "phone", OnPhoneChoose ); } function OnPhoneChoose( name, number ) { app.ShowPopup( name + " " + number ); } Copy Copy All Run Example - Choose Email Address function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); btnChoose = app.CreateButton( "Choose Email", 0.5, 0.1 ); btnChoose.SetOnTouch( btnChoose_OnTouch ); lay.AddChild( btnChoose ); app.AddLayout( lay ); } function btnChoose_OnTouch() { app.ChooseContact( "email", OnEmailChoose ); } function OnEmailChoose( name, email ) { app.ShowPopup( name + " " + email ); } Copy Copy All Run function( name, data )
app/ChooseFile.htm := ChooseFile Back ChooseFile Hello World ChooseFile opens a file picker for user to select a local file or a file from GoogleDrive, OneDrive or DropBox. app.ChooseFile( message, type, callback, fldr, options ) See Also: ReadFile Example - Choose File by Mimetype function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); var list = "*/*,application/text,application/apk,application/zip," + "audio/mpeg,audio/mp4,audio/ogg,image/png,image/jpeg,text/css," + "text/html,text/javascript,text/plain,video/mpeg,video/mp4,video/ogg"; spnMime = app.CreateSpinner(list); lay.AddChild(spnMime); btnChoose = app.CreateButton( "Choose File", 0.5, 0.1 ); btnChoose.SetOnTouch( btnChoose_OnTouch ); lay.AddChild( btnChoose ); app.AddLayout( lay ); } function btnChoose_OnTouch() { app.ChooseFile( "Choose a File", spnMime.GetText(), OnChoose ); } function OnChoose( file ) { alert( "file path: " + file ); } Copy Copy All Run function( path, name )
app/ChooseImage.htm := ChooseImage Back ChooseImage Hello World ChooseImage opens the photo gallery for user to select an image. app.ChooseImage( options, callback ) See Also: CreateImage Example - Choose Image function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); btnChoose = app.CreateButton( "Choose Image", 0.5, 0.1 ); btnChoose.SetOnTouch( btnChoose_OnTouch ); lay.AddChild( btnChoose ); app.AddLayout( lay ); } function btnChoose_OnTouch() { app.ChooseImage( "internal", OnChoose ); } function OnChoose( path ) { alert( "image path: " + path ); } Copy Copy All Run function( path )
app/ChooseWifi.htm := ChooseWifi Back ChooseWifi Hello World ChooseWifi lets the user select a WiFi network in range. app.ChooseWifi( title1, title2, callback, options, extra ) title1 and title2 are the titles for the scanning and the selection process. They default to “Scanning” and “Select WiFi”. The callback function returns the name and the ssid of the selected network. You can set the force option so that the dialog cannot be closed until the user has selected an item. Finally you can add extra items as pipe “|” separated string - ie. to add a default “[None]” entry to select no wifi network. See Also: WifiConnect Example - Choose WiFi Network function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); btnChoose = app.CreateButton( "Choose WiFi", 0.5, 0.1 ); btnChoose.SetOnTouch( btnChoose_OnTouch ); lay.AddChild( btnChoose ); app.AddLayout( lay ); } function btnChoose_OnTouch() { app.ChooseWifi( "", "", OnWifiChoose ); } function OnWifiChoose( ssid ) { app.ShowPopup( "User selected " + ssid ); } Copy Copy All Run function( ssid )
app/ClearCookies.htm := ClearCookies Back ClearCookies Hello World ClearCookies clears the saved cookies for webviews or html apps. app.ClearCookies() See Also: SaveCookies
app/ClearData.htm := ClearData Back ClearData Hello World ClearData deletes variables saved via app.Save*(). app.ClearData( file ) The file parameter is optional. If given, the specified file will be used, otherwise it will be located in the apps private Folder. See Also: SetData, See Also: GetData Example - Save, Load and Clear Data var file = "demofile"; function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); var text = getValues(); txtValues = app.CreateText( text, .5, -1, "multiline,left" ); lay.AddChild( txtValues ); btnClear = app.CreateButton( "Clear Data", 0.5, 0.1 ); btnClear.SetOnTouch( btnClear_OnTouch ); lay.AddChild( btnClear ); app.AddLayout( lay ); } function btnClear_OnTouch() { app.ClearData( file ); txtValues.SetText( getValues() ); app.ShowPopup( "Data Cleared." ); } function getValues() { return ( "saved Text: " + app.LoadText( "value", "No Value stored.", file ) + "\n" + "click count: " + app.LoadNumber( "clicks", 0, file ) + "\n" + "first start: " + app.LoadBoolean( "first", true, file ) + "\n"); } Copy Copy All Run
app/ClearValue.htm := ClearValue Back ClearValue Hello World ClearValue deletes a variable saved via app.Save*(). app.ClearValue( name, file ) The file parameter is optional. If given, the specified file will be used, otherwise it will be located in the apps private Folder. See Also: SaveText, SaveNumber, SaveBoolean Example - Save, Load and Clear Data var file = "demofile"; function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); var text = app.LoadText( "value", "My Value", file ); edtValue = app.CreateTextEdit( text, .5 ); lay.AddChild( edtValue ); btnSave = app.CreateButton( "Save Value", 0.5, 0.1 ); btnSave.SetOnTouch( btnSave_OnTouch ); lay.AddChild( btnSave ); btnLoad = app.CreateButton( "Load Value", 0.5, 0.1 ); btnLoad.SetOnTouch( btnLoad_OnTouch ); lay.AddChild( btnLoad ); btnClear = app.CreateButton( "Clear Value", 0.5, 0.1 ); btnClear.SetOnTouch( btnClear_OnTouch ); lay.AddChild( btnClear ); app.AddLayout( lay ); } function btnSave_OnTouch() { app.SaveText( "value", edtValue.GetText(), file ); app.ShowPopup( "Value Saved." ); } function btnLoad_OnTouch() { var value = app.LoadText( "value", "no value stored", file ); app.ShowPopup( value ); } function btnClear_OnTouch() { app.ClearData( file ); app.ShowPopup( "Data Cleared." ); } Copy Copy All Run
app/CloseDrawer.htm := CloseDrawer Back CloseDrawer Hello World Closes the drawer layout on the given side with slide animation. app.CloseDrawer( side ) See Also: OpenDrawer Example - Open and Close Drawer via Button function OnStart() { lay = app.CreateLayout( "Linear", "FillXY,VCenter,Left" ); btnOpen = app.CreateButton( "»", .1, .3, "gray" ); btnOpen.SetOnTouch( btnOpen_OnTouch ); btnOpen.SetTextSize( 20 ); lay.AddChild( btnOpen ); app.AddLayout( lay ); layDrawer = app.CreateLayout( "Linear", "Horizontal,FillXY,VCenter,Right" ); layDrawer.SetBackground( "/Sys/Img/BlueBack.jpg" ); txt2 = app.CreateText( "Hello" ); txt2.SetTextSize( 40 ); layDrawer.AddChild( txt2 ); btnClose = app.CreateButton( "«", .1, .3, "gray" ); btnClose.SetOnTouch( btnClose_OnTouch ); btnClose.SetTextSize( 20 ); btnClose.SetMargins( .2 ); layDrawer.AddChild( btnClose ); app.AddDrawer( layDrawer, "left", 0.8 ); app.LockDrawer( "left" ); } function btnOpen_OnTouch() { app.OpenDrawer( "left" ); } function btnClose_OnTouch() { app.CloseDrawer( "left" ); } Copy Copy All Run
app/CopyFile.htm := CopyFile Back CopyFile Hello World CopyFile copies a file to a given destination. app.CopyFile( source, destination ) The target must locate to the actual target file, not the folder. An existing file will be overridden. See Also: RenameFile, DeleteFile, FileExists Example - Copy file function OnStart() { app.WriteFile( "myFile.txt", "Hello World from Write\n", "Append" ); app.CopyFile("myFile.txt", "/sdcard/myFile.txt"); if(app.FolderExists("/sdcard/myFile.txt")) app.ShowPopup("myFile exists in /sdcard/!"); else app.ShowPopup("myFile does not exist in /sdcard/!"); } Copy Copy All Run
app/CopyFolder.htm := CopyFolder Back CopyFolder Hello World CopyFolder copies a folder and its contents to a given destination. app.CopyFolder( source, destination, overwrite, filter ) If an item already exists in the destination it will not be overwritten unless overwrite is true. Note: CopyFolder(fld1, fld2) will copy the contents of fld1 to fld2. See Also: RenameFolder, DeleteFolder, FolderExists Example function OnStart() { app.MakeFolder("myFolder"); app.CopyFolder("myFolder", "/sdcard/myFolder"); if(app.FolderExists("/sdcard/myFolder")) app.ShowPopup("myFolder exists in /sdcard/!"); else app.ShowPopup("myFolder does not exist in /sdcard/!"); } Copy Copy All Run
app/CreateAudioRecorder.htm := CreateAudioRecorder Back CreateAudioRecorder Hello World Content: - Methods The AudioRecorder object can be used to listen for sound and record it to a file. rec = app.CreateAudioRecorder( ) → app object: AudioRecorder After creation you have to define the recording file with the SetFile Method: rec.SetFile( "/sdcard/demofile.wav" ); After that you can Start the recording: rec.Start(); The recorded audio will then be written to the specified file. Finally you can also Stop the recording: rec.Stop(); Example - Example var file = "/sdcard/demofile.wav"; function OnStart() { rec = app.CreateAudioRecorder(); rec.SetFile( file ); rec.Start(); app.ShowPopup( "Please speak" ); setTimeout( StopRecording, 5000 ); } function StopRecording() { rec.Stop(); app.ShowPopup( "Finished recording. Now playing" ); ply = app.CreateMediaPlayer(); ply.SetFile( file ); ply.SetOnReady( ply.Play ); } Copy Copy All Run Methods The following methods are available on the AudioRecorder object: Batch( properties ) GetData() → List: [ frequencies ] GetPeak() → Number: float GetRMS() → Number: float GetType() → String: “AudioRecorder” Pause() SetFile( file ) SetFrequency( frequency ) SetSource( src ) Start() Stop()
app/CreateBluetoothList.htm := CreateBluetoothList Back CreateBluetoothList Hello World Content: - Methods CreateBluetoothList shows an Android dialog which allows the user to select a Bluetooth device from paired and discovered devices. btl = app.CreateBluetoothList( filter ) → app object: BluetoothList See Also: GetPairedBtDevices, DiscoverBtDevices. Example - Basic function OnStart() { lst = app.CreateBluetoothList(); lst.SetOnTouch( OnBtList ); } function OnBtList(name, address) { app.Alert("Name: " + name + "\nAddress: " + address, "Result"); } Copy All Run Methods The following methods are available on the BluetoothList object: Batch( properties ) GetType() → String: “BluetoothList” SetOnTouch( callback ) function( name, address )
app/CreateBluetoothSerial.htm := CreateBluetoothSerial Back CreateBluetoothSerial Hello World Content: - Methods The CreateBluetoothSerial object is used for communicating with other Bluetooth devices.The 'Text' mode is set by default, but integer and hexadecimal values can also be sent. bls = app.CreateBluetoothSerial( mode ) → app object: BluetoothSerial Example - Connect to Device function OnStart() { app.ShowProgress( "Enabling Bluetooth" ); if( !app.IsBluetoothEnabled() ) app.SetBluetoothEnabled( true ); while( !app.IsBluetoothOn() ) app.Wait(.4); app.HideProgress(); bt = app.CreateBluetoothSerial(); bt.SetOnConnect( bt_OnConnect ); bt.SetSplitMode( "End", "\n" ); bt.Listen( true ); lst = app.CreateBluetoothList(); lst.SetOnTouch(lst_OnTouch); } function lst_OnTouch( name, address ) { app.ShowProgress( "Connecting..." ); bt.Connect( address ); } function bt_OnConnect( ok, data ) { app.HideProgress(); if( ok ) { if( typeof data == "object" ) app.ShowPopup( "Connected!" ); else alert( "Connected to " + ok + " (" + data + ")" ); bt.Write("hello from " + app.GetBluetoothName()); } else app.ShowPopup( "Failed to connect!" ); } Copy Copy All Run Methods The following methods are available on the BluetoothSerial object: Batch( properties ) Clear() Connect( name, channel ) Disconnect() GetType() → String: “BluetoothSerial” IsBluetoothEnabled() → Boolean IsConnected() → Boolean IsPaired( name ) → Boolean Listen( enabled ) Method( name, types, p1, p2, p3, p4 ) → all types RequestEnable() SetDataMode( mode ) SetOnConnect( callback ) SetOnDisconnect() SetOnReceive( callback ) SetSplitMode( mode, p2, p3 ) SetTimeout( milliseconds ) Write( data ) function( name, address ) function( data )
app/CreateButton.htm := CreateButton Back CreateButton Hello World Content: - Styling - Methods Buttons created with the CreateButton method are used for interacting with the app. btn = app.CreateButton( text, width, height, options ) → app object: Button This is done by calling a callback function after clicking on the button. You can specify such a callback function with the SetOnTouch Method: btn.SetOnTouch( btn_OnTouch ); function btn_OnTouch() { // your OnTouch code goes here } Styling You can allow the button to auto-size by leaving out the dimensions Example - Default Size function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); btn = app.CreateButton( "Press Me" ); btn.SetOnTouch( SayHello ); lay.AddChild( btn ); app.AddLayout( lay ); } function SayHello() { app.ShowPopup("Hello World!"); } Copy Copy All Run or you can specify a width and height as decimal fractions. Example - Fixed Size function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); btn = app.CreateButton( "Press Me", 0.5, 0.2 ); btn.SetOnTouch( SayHello ); lay.AddChild( btn ); app.AddLayout( lay ); } function SayHello() { app.ShowPopup("Hello World!"); } Copy Copy All Run Setting the width and height to -1 whilst using the “FillX” option will allow it to fill the layout width. Example - Fill Layout Width function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); lay.SetPadding( 0.02, 0.02, 0.02, 0.02 ); btn = app.CreateButton( "Press Me", -1, -1, "FillX" ); btn.SetOnTouch( SayHello ); lay.AddChild( btn ); app.AddLayout( lay ); } function SayHello() { app.ShowPopup("Hello World!"); } Copy Copy All Run You can customize the visual look in many ways by either using one of the existing style options “Alum” or “Gray”, or you can use “Custom” and define a custom style with the SetStyle method. Example - Change Style function OnStart() { lay = app.CreateLayout( "Linear", "Vertical,FillXY" ); lay.SetPadding( 0.1, 0.1, 0.1, 0 ); b1 = app.CreateButton( "Normal", -1, -1, "FillX" ); lay.AddChild( b1 ); b2 = app.CreateButton( "Gray", -1, -1, "FillX,Gray" ); lay.AddChild( b2 ); b3 = app.CreateButton( "Alum", -1, -1, "FillX,Alum" ); lay.AddChild( b3 ); app.AddLayout( lay ); } Copy Copy All Run Methods The following methods are available on the Button object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) Batch( properties ) ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, width, height } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “Button” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetDescription( desc ) SetEllipsize( mode ) SetEnabled( enable ) SetFontFile( file ) SetHtml( str ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetStyle( color1, color2, radius, strokeClr, strokeWidth, shadow ) SetText( text ) SetTextColor( color ) SetTextShadow( radius, dx, dy, color ) SetTextSize( size, mode ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type )
app/CreateCameraView.htm := CreateCameraView Back CreateCameraView Hello World Content: - Methods CameraViews are used to access the device camera. cam = app.CreateCameraView( width, height, options ) → app object: CameraView You can use the “Front” option to show the front camera instead of the default back camera. The camera needs some time to initialize first. You can define a callback function via SetOnReady which is called if the camera can be used. There you have to to call the StartPreview function of the CameraView control to start the preview. Example - Show Camera Preview function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); cam = app.CreateCameraView( 0.8, 0.4 ); cam.SetOnReady( cam_OnReady ); lay.AddChild( cam ); app.AddLayout( lay ); } function cam_OnReady() { cam.StartPreview(); } Copy Copy All Run The basic functionality of the camera control is taking pictures or recording video. Example - Take pictures function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); cam = app.CreateCameraView( 0.8, 0.4 ); cam.SetOnReady( cam_OnReady ); lay.AddChild( cam ); btn = app.CreateButton( "Snap", 0.3, -1 ); btn.SetOnTouch( Snap ); lay.AddChild( btn ); app.AddLayout( lay ); } function cam_OnReady() { cam.SetPictureSize( 1024, 768 ); cam.StartPreview(); } function Snap() { cam.TakePicture( "/sdcard/MyPic.jpg" ); app.ShowPopup("Picture saved"); } Copy Copy All Run Example - Record Video function OnStart() { app.SetOrientation("Landscape"); lay = app.CreateLayout( "Linear", "Horizontal,FillXY,VCenter" ); cam = app.CreateCameraView( .9, 1 ); cam.SetOnReady( cam_OnReady ); lay.AddChild( cam ); tgl = app.CreateToggle( "Rec", 0.1 ); tgl.SetOnTouch( Record ); lay.AddChild( tgl ); app.AddLayout( lay ); recFolder = "/sdcard/Videos"; app.MakeFolder( recFolder ); } function cam_OnReady() { cam.SetFocusMode( "Video" ); cam.StartPreview(); } function Record( start ) { if( start ) { cam.Record( recFolder + "/test.mp4" ); app.ShowPopup("Recording"); } else { cam.Stop(); app.ShowPopup("Saved to " + recFolder + "/test.mp4"); } } Copy All Run But it provides advanced image processing functions as well. These are color reporting, motion detection and face recognision. Example - Motion Detector var sensitivity = 10; // motion threshold var minPeriod = 500; // millisecs var snapFolder = "/sdcard/Snaps"; function OnStart() { app.SetOrientation( "Landscape" ); lay = app.CreateLayout( "linear", "fillxy,VCenter" ); layCam = app.CreateLayout( "Frame" ); lay.AddChild( layCam ); cam = app.CreateCameraView( 1, 1, "front" ); cam.SetOnReady( StartDetection ); layCam.AddChild( cam ); app.AddLayout( lay ); } function StartDetection() { var w = cam.GetImageWidth(); var h = cam.GetImageHeight(); img = app.CreateImage( null, 1, 1, "Fix", w, h ); img.SetAlpha( 0.5 ); layCam.AddChild( img ); cam.MotionMosaic( 3, 3, sensitivity, minPeriod, img ); cam.StartPreview(); } Copy All Run More samples can be found in the samples section of DroidScript. Methods The following methods are available on the CameraView object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) AutoCapture( path, fileName, maxCount ) Batch( properties ) ClearFocus() FindFaces( maxCount ) → Object: { confidence, eyeDistance, midPoint:{ x, y}, pose } Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetCameraCount() → Number: integer GetColorEffects() → String: “none”, “mono”, “negative”, “solarize”, “sepia”, “posterize”, “whiteboard”, “blackboard”, “aqua”, “vage-cold”, “point-blue”, “point-red-yellow”, “emboss”, “sketch”, “neon” GetHeight( options ) → Number GetImageHeight() → Number: fraction (0..1) GetImageWidth() → Number: fraction (0..1) GetLeft( options ) → Number GetMaxZoom() → Number GetParameters() → String: semicolon “;” separated: “key1=value1;key2=value2;...” GetParent() → app object GetPictureSizes() → String: comma “,” separated: “w1 x h1,w2 x h2,...” GetPixelData( format, left, top, width, height ) → String: base64 encoded GetPosition( options ) → Object: { left, top, width, height } GetTop( options ) → Number GetType() → String: “CameraView” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number GetZoom() → Number Gone() HasFlash() → Boolean Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsRecording() → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types MotionMosaic( xtiles, ytiles, sensitivity, minPeriod, image ) Record( file, seconds ) ReportColors( list, callback, sampSize, maxRate ) SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorEffect( effect ) SetColorFilter( color, mode ) SetDescription( desc ) SetDuplicateImage( image1, image2 ) SetEnabled( enable ) SetFlash( onoff ) SetFocusMode( mode ) SetMargins( left, top, right, bottom, mode ) SetOnFocus( callback ) SetOnPicture( callback ) SetOnReady( callback ) SetOrientation( angle ) SetPadding( left, top, right, bottom, mode ) SetParameter( name, value ) SetPictureSize( width, height ) SetPosition( left, top, width, height, options ) SetPostRotation( angle ) SetPreviewImage( image ) SetScale( x, y ) SetSize( width, height, options ) SetSound( enabled ) SetVideoSize( width, height ) SetVisibility( mode ) SetZoom( level ) Show() StartPreview() Stop() StopPreview() Stream( ip, port, quality, fps, mtu ) TakePicture( file ) Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( data ) function( file )
app/CreateCanvas.htm := CreateCanvas Back CreateCanvas Hello World Creates and adds a blank white Image with the Auto-Update feature turned off. app.CreateCanvas( file, width, height, options, pxw, pxh ) → app object: Image See CreateImage for full documentation.
app/CreateCheckBox.htm := CreateCheckBox Back CreateCheckBox Hello World Content: - Methods CheckBoxes can be used to let the user en- or disable specific options in your app. chk = app.CreateCheckBox( text, width, height, options ) → app object: CheckBox They consist of a ticker box on the left and a text label on the right side. It is disabled by default, but you can enable it with the SetChecked method to change its initial state. Use the SetOnTouch method of the CheckBox object to define a function you want to be called when the CheckBox is touched. There you can read the 'isChecked' parameter to get the current state of the CheckBox: Example - Example function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); chk = app.CreateCheckBox( "Enable Stuff" ); chk.SetOnTouch( ShowState ); lay.AddChild( chk ); app.AddLayout( lay ); } function ShowState( isChecked ) { app.ShowPopup( "Checked = " + isChecked, "Short" ); } Copy Copy All Run Methods The following methods are available on the CheckBox object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) Batch( properties ) ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetChecked() → Boolean GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, width, height } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “CheckBox” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetChecked( checked ) SetColorFilter( color, mode ) SetDescription( desc ) SetEnabled( enable ) SetMargins( left, top, right, bottom, mode ) SetOnTouch( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetText( text ) SetTextColor( color ) SetTextSize( size, mode ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( isChecked )
app/CreateCloudStore.htm := CreateCloudStore Back CreateCloudStore Hello World Content: • Building APK - Methods The CloudStore component allows you to easily store and retrieve app data (as a simple or complex JSON object) from a cloud. cld = app.CreateCloudStore( apiKey ) → app object: CloudStore This is useful for game high scores, IOT sensor data storage etc. which should be shared across all user devices even if they're not in the same local network. Also have look at the CloudStore Dashboard and API documentation Note: This function is a premium feature. Please consider subscribing to Premium to use this feature and support DroidScript in its further development. CloudStore has the following limitations:- - once every 3 seconds max read/write - 300 read/writes per day per file - 3 files per user - 3k max file size. To sign up for your free CloudStore key, please contact support@droidscript.org More files/space can be provided for a small fee Note: CloudStore is still in beta, so don't rely on it to store any important data. Building APK If you decide to share your CloudStore app with someone else it is perfectly possible to build an APK of the app. However, please be aware that the apiKey is included in plain text unless you obfuscate your app. For extra security, you can split your key string into 2 or 3 parts (use obscurely named global variables or functions) and put them in separate parts of your code, then combine the parts only when making CloudStore API calls. Methods The following methods are available on the CloudStore object: Batch( properties ) Delete( file, callback ) GetType() → String: “CloudStore” List( filter, callback ) Load( file, callback, options ) Merge( file, data, callback ) Save( file, data, callback, options ) SetDescription( desc ) Upload( data, name, type, callback, password ) function( success, result, status ) function( error, result, status ) function( error, result, status ) function( success, result, status ) function( response )
app/CreateCodeEdit.htm := CreateCodeEdit Back CreateCodeEdit Hello World Content: - Methods CreateCodeEdit is a control for premium users which is like a TextEdit but it has advanced methods. cde = app.CreateCodeEdit( text, width, height, options ) → app object: CodeEdit Note: This function is a premium feature. Please consider subscribing to Premium to use this feature and support DroidScript in its further development. Example - dark scheme function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); cde = app.CreateCodeEdit( "", 1, 1 ); cde.SetText(app.ReadFile("/assets/templates/js/Simple.js")) cde.SetLanguage(".js"); cde.SetColorScheme( "dark" ); lay.AddChild( cde ); app.AddLayout( lay ); } Copy Copy All Run Methods The following methods are available on the CodeEdit object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) Batch( properties ) ClearFocus() ClearHistory() Copy() Cut() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetCursorLine() → Number: integer GetCursorPos() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetLineStart( line ) → Number: integer GetParent() → app object GetPosition( options ) → Object: { left, top, width, height } GetSelectedText() → String GetSelectionEnd() → Number: integer GetSelectionStart() → Number: integer GetSelectMode() → Boolean GetText() → String GetTop( options ) → Number GetType() → String: “CodeEdit” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() HighlightLine( line ) InsertText( text ) IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types Paste() Redo() Replace( text ) ReplaceAll( text, newText, matchCase, wholeWord ) ReplaceText( text, start, end ) Search( text, direction, matchCase, wholeWord ) SelectAll() SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetColorScheme( scheme ) SetCursorPos( position ) SetDescription( desc ) SetEnabled( enable ) SetHtml( str ) SetLanguage( ext ) SetMargins( left, top, right, bottom, mode ) SetNavigationMethod( method ) SetOnChange( callback ) SetOnDoubleTap( callback ) SetOnKey( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSelection( start, stop ) SetSelectMode( onOff ) SetSize( width, height, options ) SetText( text ) SetTextColor( color ) SetTextSize( size, mode ) SetUseKeyboard( onOff ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) Undo() function( type ) function( action, keyname, keycode, extra )
app/CreateCrypt.htm := CreateCrypt Back CreateCrypt Hello World Content: - Methods The Crypt component is used to en- or decrypt a string with a given key or to create a hash of it. crp = app.CreateCrypt( options ) → app object: Crypt Example - Basic function OnStart() { text = "Hello World!"; crpt = app.CreateCrypt(); var encr = crpt.Encrypt(text, "key"); var decr = crpt.Decrypt(encr, "key"); var hash = crpt.Hash(text); app.Alert( 'text: "' + text + '"\n' + 'encr: "' + encr + '"\n' + 'decr: "' + decr + '"\n' + 'hash: "' + hash + '"\n' , "Data" ); } Copy Copy All Run Example - Encrypt using device id function OnStart() { crp = app.CreateCrypt(); ShowDialog( "Hello World" ); } function ShowDialog( data ) { app.ShowTextDialog("input text", data, OnText); } function OnText( text ) { var dlg = app.CreateYesNoDialog( "Choose option", "NoCancel" ); dlg.SetOnTouch( OnAction ); dlg.data.text = text; dlg.Show(); dlg.SetButtonText( "Encrypt", "Decrypt" ); } function OnAction( result ) { if( result == "Yes" ) { result = crp.Encrypt( this.data.text, app.GetDeviceId() ); ShowDialog( result ); } else if( result == "No" ) { result = crp.Decrypt( this.data.text, app.GetDeviceId() ); ShowDialog( result ); } } Copy All Run Methods The following methods are available on the Crypt object: Batch( properties ) Decrypt( text, password ) → String Encrypt( text, password ) → String GetType() → String: “Crypt” Hash( text, mode, options ) SetDescription( desc )
app/CreateCustomTabs.htm := CreateCustomTabs Back CreateCustomTabs Hello World Creates a CustomTab control. app.CreateCustomTabs() See the Plugins page for details
app/CreateDebug.htm := CreateDebug Back CreateDebug Hello World CreateDebug is used to show the console as overlay above the app in order to see the debug logs. app.CreateDebug( options ) See Also: SetDebug, Debug Example - Demonstration function OnStart() { app.CreateDebug(); app.Debug("Hello World!"); } Copy Copy All Run
app/CreateDialog.htm := CreateDialog Back CreateDialog Hello World Content: - Methods Custom dialogs appear on top of the app and thus can be used to show temporary information or collect data from the user. They are also useful for displaying configuration or settings controls. dlg = app.CreateDialog( title, options ) → app object: Dialog Dialogs are resizeable and you can also change the look of them so that they fit in with the theme of your application. A custom dialog needs a layout to add the controls to. Use the CreateLayout method of the app object to add a layout. layDlg = app.CreateLayout( type, options ); dlg.AddLayout( layDlg ); If you have added all your controls to the dialog layout you can use the Show method to show the dialog. Normally the user can cancel the dialog by pressing the BACK button of the device, but you can disable that option by using the “NoCancel” option. In order to close the dialog now, you have to call Dismiss. Example - Demo function OnStart() { dlg = app.CreateDialog( "Custom Dialog" ); layDlg = app.CreateLayout( "linear", "VCenter,FillXY" ); layDlg.SetSize( 0.7, 0.3 ); dlg.AddLayout( layDlg ); chk = app.CreateCheckBox( "Check Box" ); chk.SetMargins( 0, 0.02, 0, 0.02 ); layDlg.AddChild( chk ); btnDlg = app.CreateButton( "Close Dialog", 0.6, 0.1 ); btnDlg.SetOnTouch( btnDlg_OnTouch ); layDlg.AddChild( btnDlg ); dlg.Show(); } function btnDlg_OnTouch() { dlg.Dismiss(); } Copy All Run Methods The following methods are available on the Dialog object: AddLayout( layout ) AdjustColor( hue, saturation, brightness, contrast ) Batch( properties ) ClearFocus() Dismiss() EnableBackKey( enable ) Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, width, height } GetTitleHeight() → Number: pixel GetTop( options ) → Number GetType() → String: “Dialog” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types RemoveLayout( layout ) SetBackAlpha( alpha ) SetBackColor( color, radius ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetDescription( desc ) SetEnabled( enable ) SetMargins( left, top, right, bottom, mode ) SetOnBack( callback ) SetOnCancel( callback ) SetOnTouch( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetTitle( title ) SetTitleColor( clr ) SetTitleDividerColor( color ) SetTitleDividerHeight( height, options ) SetTitleHeight( height, options ) SetTitleTextSize( size, options ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( event )
app/CreateDownloader.htm := CreateDownloader Back CreateDownloader Hello World Content: - Methods The Downloader component can be used to download a file straight from the internet to your phone or tablet's local storage. dwn = app.CreateDownloader( options ) → app object: Downloader You can download a file with the Download method which accepts a source url and a target directory: dwn.Download( srcFileUrl, targetDir ); Once the Download method has been called, it show a progress bar with the current download progress. But you can disable this behavior with the “NoDialog” option. If you want to know when the download process has finished (or failed) you can define a callback functioni with the SetOnComplete method: dload.SetOnComplete( callback ); Example - Example function OnStart() { var srcFileUrl = "http://sgarman.net/downloadable.txt"; var targetDir = "/sdcard"; dload = app.CreateDownloader(); dload.SetOnComplete( dload_OnComplete ); dload.Download( srcFileUrl, targetDir ); } function dload_OnComplete() { app.ShowPopup("Download complete"); } Copy Copy All Run Methods The following methods are available on the Downloader object: Batch( properties ) Download( url, fldr, name, headers ) GetProgress() → Number: fraction (0..1) GetSize() → Number: bytes GetType() → String: “Downloader” IsComplete() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types SetOnCancel( callback ) SetOnComplete( callback ) SetOnDownload( callback ) SetOnError( callback ) function( file ) function( path ) function( error )
app/CreateEmail.htm := CreateEmail Back CreateEmail Hello World Content: - Methods The Email component allows us to send and receive emails without user interaction. mail = app.CreateEmail( account, password ) → app object: Email Example - Example function OnStart() { email = app.CreateEmail( "mymail@gmail.com", "MyPass" ); email.SetSMTP( "smtp.gmail.com", 465 ); email.SetOnStatus( email_OnStatus ); app.ShowProgress( "Sending..." ); email.Send( "My Subjewct", "My Content", "mymail@yahoo.com", "myothermail@gmail.com" ); } function email_OnStatus( status ) { app.HideProgress(); app.ShowPopup( status ); } Copy Copy All Run Methods The following methods are available on the Email object: Batch( properties ) GetType() → String: “Email” Receive( folder, maxCount, filter ) Send( subject, body, sender, recipients, attach ) SetIMAP( server, port ) SetOnMessage( callback ) SetOnStatus( callback ) SetSMTP( server, port ) function( data ) function( status )
app/CreateFile.htm := CreateFile Back CreateFile Hello World Content: - Methods Returns a File object. fil = app.CreateFile( file, mode ) → app object: File Example - Example function btn_OnTouch() { var file = app.CreateFile( "/sdcard/test.txt", "rw" ); file.WriteText( "Hello", "Char" ); var len = file.GetLength(); console.log( "file len: " + len ); file.Seek( len ); file.WriteNumber( 77, "Byte" ); file.WriteData( "66,121,101", "Int" ); file.Seek( 0 ); var data = file.ReadData( 2 ); console.log( "first two bytes:" + data[0] + "," + data[1] ); file.Seek( 0 ); alert( file.ReadText( "Line" ) ); file.Close(); } Copy All Run Methods The following methods are available on the File object: Batch( properties ) Close() GetLength() → Number: bytes GetPointer() GetType() → String: “File” ReadData( len, mode ) ReadNumber( type ) → Number ReadText( type ) → String ReadTextAsync( type, callback ) Seek( offset ) SetLength( len ) Skip( bytes ) WriteData( data, mode ) WriteNumber( data, type ) WriteText( data, type ) function( data )
app/CreateGame.htm := CreateGame Back CreateGame Hello World Content: - Methods CreateGame automatically turns your app in game mode and adds a GameView control to it which loads the referenced script. gam = app.CreateGame( file, orient ) It also applies various settings to your app such like orientation, ScreenMode(“Game”) and PreventScreenLock(true). You can still access the GameView and the layout where it was added to via gam.game and gam.lay Note: If you want to have more control over the GameView control use CreateGameView directly. You can also put the cfg.Game flag at the top level of your script to write the game code immediately in your main script. Example - Game_Bounce.js //Configure app for landscape game mode. cfg.Game, cfg.Portrait //Called when game starts, so we can load our assets. function OnLoad() { //Enable physics with gravity of 20. gfx.AddPhysics( 20 ) //Enclose screen with invisible walls. gfx.Enclose( -1, "left,right" ) //Create our sprite images. sky = gfx.CreateBackground( "/Sys/Img/Sky.jpg", "stretch" ) bunny = gfx.CreateSprite( "/Sys/Img/Bunny.png", "bunnies" ) floor = gfx.CreateRectangle( 1, 0.05, 0x338833, 0,0,1, "floor" ) } //Called when game assets have loaded. function OnReady() { //Add background. gfx.AddBackground( sky ) //Add floor. gfx.AddGraphic( floor, 0, 0.95 ) floor.SetPhysics( 2, "fixed", 0.9, 0.8, 0.1 ) //Add character and set physics properties. //(groupId, type, density, bounce, friction) gfx.AddSprite( bunny, 0.2, 0.2, 0.05 ) bunny.SetPhysics( 1, "Dynamic", 0.5, 0.9, 0.1 ) bunny.SetVelocity( 0.7, 0 ) //Start game. gfx.Play() } Copy All Run Example - Demo function OnStart() { app.CopyFile("/assets/samples/Game_Bounce.js", "script.js"); app.CreateGame("script.js", "landscape"); } Copy All Run Methods The following methods are available on the Game object: game → app object: Game lay → app object: Layout
app/CreateGameView.htm := CreateGameView Back CreateGameView Hello World Content: - GameView in web browsers - Methods The GameView is a blindingly fast container for game development with a physics engine and PIXI as underlying sprite container which uses the GPU to render graphics. gmv = app.CreateGameView( width, height, options ) The GameView runs a standalone script which can communicate with the main app via gfx.Execute or gmv.Execute vice versa. Starting from DS 2.05 the GameView supports the same options as CreateGame. You can find references of GameView scripting here: - official DS GameView tutorials (Start with lesson 1; Sample SPK) GameView in web browsers If you prefer to work on a PC you can even run and debug your GameView code in a regular web-browser. Check out these demos to see how it works: http://androidscript.org/beta/GameViewWeb Example - s cfg.Landscape; function OnStart() { app.PreventScreenLock( true ); app.CopyFile("/assets/samples/Game_Bounce.js", "script.js"); lay = app.CreateLayout( "Linear", "Vertical,FillXY,VCenter" ); gam = app.CreateGameView( 1, 1 ); gam.SetFile( "script.js" ); gam.SetFrameRate( 40 ); lay.AddChild( gam ); app.AddLayout( lay ); } /samples> Copy Copy All Run Methods The following methods are available on the GameView object: AdjustColor( hue, saturation, brightness, contrast ) Batch( properties ) ClearFocus() Execute( js ) Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, width, height } GetTop( options ) → Number GetType() GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetDescription( desc ) SetEnabled( enable ) SetFile( file ) SetFrameRate( fps ) SetMargins( left, top, right, bottom, mode ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback )
app/CreateGLView.htm := CreateGLView Back CreateGLView Hello World Content: - Render Loop - Sprite Touch Detection - Sprite Animations - Methods GLView is a fast 2D canvas suitable for drawing and moving graphics around on the screen quickly, ideal for games. The options parameter should be always set to “Fast2d”. glv = app.CreateGLView( width, height, options ) → app object: GLView Use the CreateImage method of the GLView object to create an image that can be used with the GLView. You can specity a callback function too which will be called once the image is ready to use. To draw the sprite on the canvas use the DrawImage method. Note: don't forget to specify all parameters, including angle. Otherwise the image will not be drawn. You can leave either width or height -1 to scale the other parameter according to the sprite aspect ratio. Once all drawing has been done, the Render method must be called to render all the GLView graphics to the screen. Example - DrawImage function OnStart() { lay = app.CreateLayout( "Linear", "FillXY" ); glview = app.CreateGLView( 1, 1, "Fast2d" ); lay.AddChild( glview ); img = glview.CreateImage( "/Sys/Img/Hello.png", DrawFrame ); app.AddLayout( lay ); } function DrawFrame() { glview.DrawImage( img, 0.25, 0.3, 0.5, -1, 45 ); glview.Render(); } Copy Copy All Run Render Loop To create a rendering loop for a game, use the setInterval JavaScript function to call your drawing function at regular intervals. The example below draws a continuously rotating image by calling the DrawFrame function 30 times each second, updating the angle each time: Example - Render Loop var angle = 0; function OnStart() { lay = app.CreateLayout( "Linear", "FillXY" ); glview = app.CreateGLView( 1, 1, "Fast2d" ); lay.AddChild( glview ); img = glview.CreateImage( "/Sys/Img/Hello.png", StartRendering ); app.AddLayout( lay ); } function StartRendering() { setInterval( DrawFrame, 1000/30 ); } function DrawFrame() { glview.DrawImage( img, 0.25, 0.3, 0.5, -1, angle ); angle = angle + 10; if( angle == 360 ) angle = 0; glview.Render(); } Copy Copy All Run Sprite Touch Detection If you need to want to simulate OnTouch for a GLView Image, you will need to keep track of the position, width and height that it has been drawn with. Then use the GLView OnTouch event to determine if the touch coordinates are within the GLView Image yourself. To prevent touch detect on all sprites on the touch position define a drawing order according to a list. Example - Sprite Touch objects = []; //Called when application is started. function OnStart() { //Create layout lay = app.CreateLayout( "linear" ); //Create GLView glv = app.CreateGLView( 1, 1, "Fast2d" ); glv.SetOnTouchUp( touch ); //set first image img1 = glv.CreateImage( "/Sys/Img/Hello.png" ); img1.name = "img1"; img1.X = 0.1; img1.Y = 0.3; img1.W = 0.7; img1.H = 0.4; objects.push(img1); //set second image img2 = glv.CreateImage( "/Sys/Img/Droid1.png", startRender ); img2.name = "img2"; img2.X = 0.5; img2.Y = 0.5; img2.W = 0.5; img2.H = 0.3; objects.push(img2); lay.AddChild( glv ); //Add layout to app. app.AddLayout( lay ); } // Draw images function startRender() { for(var i in objects) draw(objects[i]); glv.Render(); } // Check which image was touched function touch(ev) { for(var i = objects.length; i-- > 0; ) { if( touched( objects[i], ev ) ) { app.ShowPopup( "touched " + objects[i].name ); break; } } } function draw(img, ev) { glv.DrawImage( img, img.X, img.Y, img.W, img.H, 0); } function touched(img, ev) { return img.X ev.X img.X + img.W > ev.X img.Y ev.Y img.Y + img.H > ev.Y; } Copy All Run Sprite Animations GLView supports the use of Sprite Sheets. The DrawSprite method can be used to draw part of an image to the GLView. The following example uses a sprite sheet containing 8 stages of a character running. The DrawSprite method is used to draw each of the 8 sections in turn to give the effect of the character continuously running: Example - Sprite Sheet Animation var spriteCount = 8; var srcWidth = 50; var srcHeight = 60; var frameCount = 0; function OnStart() { lay = app.CreateLayout( "Linear", "FillXY" ); glview = app.CreateGLView( 1, 1, "Fast2d" ); lay.AddChild( glview ); img = glview.CreateImage( "/Sys/Img/Sprint.png", StartRendering ); app.AddLayout( lay ); } function StartRendering() { setInterval(DrawFrame, 1000/30); } function DrawFrame() { var spriteIndex = Math.floor(frameCount / 2) % spriteCount; var sx = spriteIndex * srcWidth; var sy = 0; glview.DrawSprite( img, sx, sy, srcWidth, srcHeight, 0.3, 0.4, 0.3, -1 ); glview.Render(); frameCount++; } Copy Copy All Run Methods The following methods are available on the GLView object: aspect → Number: float Batch( properties ) canvas → Object ClearFocus() CreateImage( file, callback ) → app object DrawImage( image, x, y, w, h, angle ) DrawSprite( sheet, sx, sy, sw, sh, dx, dy, dw, dh, angle ) Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetContext() → Object: ctx GetContext.ctx.capture( x, y, w, h, fileName, successCallback, errorCallback ) GetContext.ctx.clearRect( x, y, width, height ) GetContext.ctx.drawImage( image, sx, sy, sw, sh, dx, dy, dw, dh ) GetContext.ctx.render() GetContext.ctx.resetTransform() GetContext.ctx.restore() GetContext.ctx.rotate( angle ) GetContext.ctx.save() GetContext.ctx.scale( a, d ) GetContext.ctx.setTransform( a, b, c, d, tx, ty ) GetContext.ctx.transform( a, b, c, d, tx, ty ) GetContext.ctx.translate( tx, ty ) GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, width, height } GetTop( options ) → Number GetType() → String: “GLView” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() height → Number: integer Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types Render() SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetDescription( desc ) SetEnabled( enable ) SetMargins( left, top, right, bottom, mode ) SetOnTouch( callback ) SetOnTouchDown( callback ) SetOnTouchMove( callback ) SetOnTouchUp( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetTouchable( touchable ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) width → Number: integer function( event ) function( event ) function( event ) function( event )
app/CreateImage.htm := CreateImage Back CreateImage Hello World Content: - Drawing on Images - Drawing on Images fast - Methods Image controls can be used to display images such like png, jpg or gif. Just pass the file path and you're done. img = app.CreateImage( file, width, height, options, pxw, pxh ) → app object: Image Without the width and height dimensions the image will be shown without any scaling. Example - Original Size function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); img = app.CreateImage( "/Sys/Img/Droid1.png" ); img.SetOnTouch( img_OnTouch ); lay.AddChild( img ); app.AddLayout( lay ); } function img_OnTouch( ev ) { if( ev.action=="Down" ) app.ShowPopup( "Ouch!" ); } Copy Copy All Run If you specify one of them and leave the other null, -1 or blank, it will be scaled so that the aspect ratio is kept. Example - Maintain Aspect function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); img = app.CreateImage( "/Sys/Img/Droid1.png", 0.5, -1 ); img.SetOnTouch( img_OnTouch ); lay.AddChild( img ); app.AddLayout( lay ); } function img_OnTouch( ev ) { if( ev.action=="Down" ) app.ShowPopup( ev.x[0] + ", " + ev.y[0], "Short" ); } Copy Copy All Run And if you specify both parameters it will be scaled to your wishes. Example - Stretched function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); img = app.CreateImage( "/Sys/Img/Droid1.png", 0.5, 0.7 ); img.SetOnTouch( img_OnTouch ); lay.AddChild( img ); app.AddLayout( lay ); } function img_OnTouch( ev ) { if( ev.action=="Down" ) app.ShowPopup( "Aaaargh!" ); } Copy Copy All Run If you want images to depress like buttons if touched you can use the “Button” option. Example - Button function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); btn = app.CreateImage( "/Sys/Img/Hello.png", 0.2, -1, "button" ); btn.SetOnTouchUp( btn_OnTouch ); lay.AddChild( btn ); app.AddLayout( lay ); } function btn_OnTouch() { app.ShowPopup( "Hello World!" ); app.Vibrate( "0,100,30,100,50,300" ); } Copy All Run Drawing on Images Images are also useful for drawing basic shapes and other images on it and therefore for creating dynamic animations or even basic games. To create an empty image you can pass null as file parameter. This way you can also specify a fixed pixel size to the image you can use the “fix” option and pass values for the pxw and pxh parameters. img = app.CreateImage( null, 0.8, 0.5, "fix", 20, 20 ); img.DrawLine( 0, 0, 1, 1 ); If you dislike the anti-alias effect you can apply the “alias” option on a higher resolution image and draw a low-resolution image on it: img2 = app.CreateImage( null, .8, .5, "alias" ); img2.DrawImage( img, 0, 0, 1, 1, 0 ); There are a whole bunch of drawing methods defined here. Some of the were already used above. You can draw lines, rectangles, circles and other images, just to name a few. You can even draw a transformed image using an transformation matrix. Check out the Draw* methods in the method list below to get more details about all drawing functions. Example - Draw Shapes function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); img = app.CreateImage( null, 0.8, 0.8 ); lay.AddChild( img ); img.SetColor( "#8888ff" ); img.SetPaintColor( "#ff0000" ); img.DrawCircle( 0.5, 0.5, 0.1 ); img.DrawRectangle( 0.7, 0.7, 0.1, 0.75 ); app.AddLayout( lay ); } Copy Copy All Run Drawing on Images fast If you have many draw operations to perform at runtime (ie. for games) you might want to disable the automatic canvas update after each Draw* call using the SetAutoUpdate method. To force the rendering now, you have to call Update. Another way to increase the animation speed is using the NoDom configuration. This will disable html and js Dom elements in your app that consume a lot of resources, but app functions can still be used. For animations you can then use the Animate function of the app object which calls a function for a given amount per second. Note that the canvas still needs some time to refresh - so going over 60 fps makes no sense at all. Example - Advanced Clock Animating cfg.No_Dom, cfg.Portrait; var wh; function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); // clock pointer ptr = app.CreateImage( null, 0.1, 0.1, "fix,alias", 30, 30 ); ptr.SetTextSize( 4.3 ); // image aspect ratio for drawing square images wh = ptr.GetAbsWidth() / ptr.GetAbsHeight(); // main canvas img = app.CreateImage( null, 1, 1, "alias" ); img.SetPaintStyle( "line" ); img.SetAutoUpdate( false ); img.SetLineWidth( 15 ); lay.AddChild( img ); app.AddLayout( lay ); app.SetDebug( "console" ); app.Animate( OnAnimate, 40 ); } function OnAnimate( time, dtime ) { time = Date.now(); // calculate pointer position from current time var secs = time / 1000; var angle = Math.PI * secs / 2 + Math.abs( Math.sin( Math.PI * secs )); var px = 0.5 + 0.5 * Math.cos( angle ); var py = 0.5 + 0.5 * Math.sin( angle ); // get current datetime var hrs = Math.floor( secs / 3600 ) % 60; var min = Math.floor( secs / 60 ) % 60; var sec = Math.floor( secs ) % 60; var time = min + ":" + sec; // measure text dimensions for centering var tsize = ptr.MeasureText( time ); var tx = (1 - tsize.width ) / 2; var ty = (1 + tsize.height) / 2; // draw pointer and datetime text ptr.Clear(); ptr.SetPaintColor( "red" ); ptr.DrawLine( .5, .5, px, py ); ptr.SetPaintColor( "white" ); ptr.DrawText( time, tx, ty ); // render img.Clear(); img.DrawCircle( .5, .5, .48 ); img.DrawImage( ptr, 0, (1 - wh) / 2, 1, wh ); img.Update(); } Copy All Run Methods The following methods are available on the Image object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) Batch( properties ) Clear() ClearFocus() DrawArc( x1, y1, x2, y2, start, sweep ) DrawCircle( x, y, radius ) DrawFrame( ms ) DrawImage( image, x, y, w, h, angle, mode ) DrawImageMtx( image, matrix ) DrawLine( x1, y1, x2, y2 ) DrawPoint( x, y ) DrawRectangle( x1, y1, x2, y2 ) DrawSamples( data, range ) DrawText( txt, x, y ) Flatten() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetName() → String GetParent() → app object GetPixelColor( x, y ) → List: [ red, green, blue ] GetPixelData( format, left, top, width, height ) → String: base64 encoded GetPosition( options ) → Object: { left, top, width, height } GetTop( options ) → Number GetType() → String: “Image” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean MeasureText( txt ) → Object: { width, height } Method( name, types, p1, p2, p3, p4 ) → all types Move( x, y ) Reset() Rotate( angle, pivotX, pivotY ) Save( fileName, quality ) Scale( x, y ) SetAlpha( alpha ) SetAutoUpdate( onoff ) SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColor( color ) SetColorFilter( color, mode ) SetDescription( desc ) SetEnabled( enable ) SetFontFile( file ) SetImage( image, width, height, options ) SetLineWidth( width ) SetMargins( left, top, right, bottom, mode ) SetMaxRate( milliseconds ) SetName( name ) SetOnLoad( callback ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetOnTouchDown( callback ) SetOnTouchMove( callback ) SetOnTouchUp( callback ) SetPadding( left, top, right, bottom, mode ) SetPaintColor( color ) SetPaintStyle( style ) SetPixelData( data, width, height, options ) SetPixelMode( onoff ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetTextSize( size ) SetTouchable( touchable ) SetVisibility( mode ) Show() Skew( x, y ) Transform( matrix ) Tween( target, duration, type, repeat, yoyo, callback ) Update() function( type ) function( img ) function( src ) function( event ) function( event ) function( event ) function( event )
app/CreateLayout.htm := CreateLayout Back CreateLayout Hello World Content: - Linear Layouts - Frame Layouts - Absolute Layouts - Card Layouts - Methods Layouts are container objects which are used to visually organize graphical objects (controls), such as text, buttons and images on the screen. lay = app.CreateLayout( type, options ) → app object: Layout There are 4 types of layouts: “Linear”, “Absolute”, “Frame” and “Card”. Layouts are transparent by default but you can set a background image which can be tiled or stretched to fill the layout. You can also set a background color or background gradient. You can add child objects to the Layout using the AddChild function: lay.AddChild( object ); The alignment of chlld objects within a layout can be set by adding the options “Left”, “Right”, “Bottom” and “VCenter”, by default objects will be aligned “Top,Center”. Linear Layouts Linear layouts are probably the most useful type and are used to organize controls in either the default “Vertical” or “Horizontal” direction on screen. Example - Vertical function OnStart() { lay = app.CreateLayout( "Linear", "Vertical" ); btnA = app.CreateButton( "A", 0.2, 0.1 ); lay.AddChild( btnA ); btnB = app.CreateButton( "B", 0.2, 0.1 ); lay.AddChild( btnB ); btnC = app.CreateButton( "C", 0.2, 0.1 ); lay.AddChild( btnC ); app.AddLayout( lay ); } Copy Copy All Run Example - Horizontal function OnStart() { lay = app.CreateLayout( "Linear", "Horizontal,FillXY" ); btnA = app.CreateButton( "A", 0.2, 0.1 ); lay.AddChild( btnA ); btnB = app.CreateButton( "B", 0.2, 0.1 ); lay.AddChild( btnB ); btnC = app.CreateButton( "C", 0.2, 0.1 ); lay.AddChild( btnC ); app.AddLayout( lay ); } Copy Copy All Run By default Layouts will auto-size to wrap their contents but you have 3 more options as to how a layout sizes within it's parent: “FillX”, “FillY” and “FillXY”. Example - Combined function OnStart() { layVert = app.CreateLayout( "Linear", "Vertical,FillXY" ); btnA = app.CreateButton( "A", 0.6, 0.1 ); layVert.AddChild( btnA ); layHoriz = app.CreateLayout( "Linear", "Horizontal" ); layVert.AddChild( layHoriz ); btnB1 = app.CreateButton( "B1", 0.2, 0.1 ); layHoriz.AddChild( btnB1 ); btnB2 = app.CreateButton( "B2", 0.2, 0.1 ); layHoriz.AddChild( btnB2 ); btnB3 = app.CreateButton( "B3", 0.2, 0.1 ); layHoriz.AddChild( btnB3 ); btnC = app.CreateButton( "C", 0.6, 0.1 ); layVert.AddChild( btnC ); app.AddLayout( layVert ); } Copy Copy All Run Frame Layouts Frame layouts are used to display objects in front or behind each other. Every time the AddChild function is called on a Frame layout, the child object is placed in a new layer in front of the previously added object at the top left of the frame. Frame Layouts are useful if you wish to do animated Flips or Slides to reveal layers of objects or use transparency. Example - Image Swap function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); layFrm = app.CreateLayout( "Frame" ); img1 = app.CreateImage( "/Sys/Img/Droid1.png", 0.5 ); layFrm.AddChild( img1 ); img2 = app.CreateImage( "/Sys/Img/Hello.png", 0.5 ); img2.SetVisibility( "Hide" ); layFrm.AddChild( img2 ); lay.AddChild( layFrm ); btn = app.CreateButton( "Press Me" ); btn.SetMargins( 0,0.1,0,0 ); btn.SetOnTouch( btn_OnTouch ); lay.AddChild( btn ); app.AddLayout( lay ); } function btn_OnTouch() { if( img2.GetVisibility() == "Hide" ) img2.SetVisibility( "Show" ); else img2.SetVisibility( "Hide" ); } Copy Copy All Run Absolute Layouts Absolute layouts ignore all alignment options and allow the absolute positioning of controls by calling the SetPosition and SetSize functions of each of the child objects. However, you are encouraged use linear layouts for most of your programs, unless it is absolutely necessary. Card Layouts Card Layouts are just like frame layouts, but with rounded corners and a shadow by default. They may be used to display offers with an image and optional info text. Methods The following methods are available on the Layout object: AddChild( child, order ) AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) Batch( properties ) ChildToFront( child ) ClearFocus() DestroyChild( child ) Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetChildOrder( child ) → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, width, height } GetTop( options ) → Number GetType() → String: “Layout” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types RemoveChild( child ) SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetChildMargins( left, top, right, bottom, mode ) SetChildTextSize( size, mode ) SetColorFilter( color, mode ) SetCornerRadius( radius ) SetDescription( desc ) SetElevation( elevation ) SetEnabled( enable ) SetGravity( gravity ) SetMargins( left, top, right, bottom, mode ) SetOnChildChange( callback ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetOnTouchDown( callback ) SetOnTouchMove( callback ) SetOnTouchUp( callback ) SetOrientation( orient ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetTouchable( touchable ) SetTouchThrough( through ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src ) function( event ) function( event ) function( event ) function( event )
app/CreateList.htm := CreateList Back CreateList Hello World Content: - Methods If you want to display many dataset of the same structure you might consider using the List object. lst = app.CreateList( list, width, height, options, delim ) → app object: List The List object supports multi-line list items and can show icons. Multi-line items are created by dividing each list item up using the “:” (colon) character. If you need to use a colon character in your item text then use this character sequence: “^c^”. You can have one icon and some body text using the following formats: “title” “title:icon” “title:body:icon” Alternatively you can use the AddItem method which accepts title, body and icon as parameters to generically build up your list. You can specify your own icon file for example “Img/MyIcon.png”, or one of the special built-in icons using the following key words: “audio”, “photo”, “video”, “folder”, “audiofolder”, “photofolder”, “videofolder” and “playlist”. Example - Title + Icon function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); var data = "Folder:folder,Audio:audio,Photo:photo,Video:video"; lst = app.CreateList( data, 0.8, 0.4 ); lst.SetOnTouch( lst_OnTouch ); lay.AddChild( lst ); app.AddLayout( lay ); } function lst_OnTouch( title, body, type, index ) { app.ShowPopup( "Touched Item = " + title ); } Copy Copy All Run Example - Title + Body function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); var data = "The Hobbit:Author^c^ J.R.R. Tolkien:null"; data += ",Watership Down:Author^c^ Richard Adams:null"; lst = app.CreateList( data, 0.8, 0.4 ); lst.SetOnTouch( lst_OnTouch ); lay.AddChild( lst ); app.AddLayout( lay ); } function lst_OnTouch( title, body, type, index ) { app.ShowPopup( "Touched Item = " + title ); } Copy Copy All Run You can use the SetOnTouch and SetOnLongTouch methods to define a function you want to be called when a list item is selected. The selected item title, body, type and index are passed into your OnTouch callback function as parameters. Example - Simple function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); lst = app.CreateList( "Fred,Bill,Jim", 0.8, 0.4 ); lst.SetOnTouch( lst_OnTouch ); lst.SetOnLongTouch( lst_OnLongTouch ); lay.AddChild( lst ); app.AddLayout( lay ); } function lst_OnTouch( title, body, icon, index ) { app.ShowPopup( "Item = " + title + ", Index = " + index, "Short" ); } function lst_OnLongTouch( title, body, icon, index ) { app.ShowPopup( "Long Touch Item = " + title + ", Index = " + index, "Short" ); } Copy Copy All Run You can change the look of a List using the SetBackColor and SetTextColor functions on the list object. You can also set a background image/pattern or background gradient for the List using the SetBackground and SetBackGradient functions. Example - Gray on White function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); lst = app.CreateList( "Fred,Bill,Jim", 0.8, 0.4 ); lst.SetTextColor( "#ff666666" ); lst.SetBackColor( "#ffffffff" ); lst.SetOnTouch( lst_OnTouch ); lay.AddChild( lst ); app.AddLayout( lay ); } function lst_OnTouch( title, body, type, index ) { app.ShowPopup( "Touched Item = " + title ); } Copy Copy All Run You can also create lists items that look like buttons by using one of the following options: “AlumButton”, “GreenButton”, “OrangeButton”. Example - Orange Buttons function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); var data = "Button 1,Button 2,Button 3,Button 4"; lst = app.CreateList( data, 0.8, 0.8, "OrangeButton" ); lst.SetBackColor( "#ffffff" ); lst.SetPadding( 0.1, 0.1, 0.1, 0.1 ); lst.SetOnTouch( lst_OnTouch ); lay.AddChild( lst ); app.AddLayout( lay ); } function lst_OnTouch( title, body, type, index ) { app.ShowPopup( "Touched Item = " + title ); } Copy Copy All Run Or create lists with Gradient backgrounds like this: Example - Gradient Background function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); var data = ""; for( var i = 1; i = 30; i++ ) { if( i > 1 ) data += ","; data += "Item " + i + ":Details for item " + i + ":null"; } lst = app.CreateList( data, 1, 1, "WhiteGrad" ); lst.SetTextColor1( "#ff555558"); lst.SetTextColor2( "#ff555558" ); lst.SetTextMargins( 0.04, 0, 0, 0 ); lst.SetOnTouch( lst_OnTouch ); lay.AddChild( lst ); app.AddLayout( lay ); } function lst_OnTouch( title, body, type, index ) { app.ShowPopup( "Touched Item = " + title ); } Copy Copy All Run Methods The following methods are available on the List object: AddItem( title, body, image ) AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) Batch( properties ) ClearFocus() Expand() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetItem( title ) → Object: { title, body, image } GetItemByIndex( index ) → Object: { title, body, image } GetLeft( options ) → Number GetLength() → Number: integer GetList( delim ) → List: of objects: ,String: GetParent() → app object GetPosition( options ) → Object: { left, top, width, height } GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “List” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() InsertItem( index, title, body, image ) IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types RemoveAll() RemoveItem( title ) RemoveItemByIndex( index ) ScrollToItem( title, body ) ScrollToItemByIndex( index ) SelectItem( title, body, scroll ) SelectItemByIndex( index, scroll ) SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetColumnWidths( icon, title, body, mode ) SetDescription( desc ) SetDivider( height, color ) SetEllipsize( mode ) SetEllipsize1( mode ) SetEllipsize2( mode ) SetEnabled( enable ) SetFontFile( file ) SetHiTextColor1( color ) SetHiTextColor2( color ) SetIconMargins( left, top, right, bottom, mode ) SetIconSize( size, mode ) SetItem( title, newTitle, newBody, newImage ) SetItemByIndex( index, newTitle, newBody, newImage ) SetItemColor( name, textClr, backClr ) SetItemColorByIndex( index, textClr, backClr ) SetList( list, delim ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetTextColor( color ) SetTextColor1( color ) SetTextColor2( color ) SetTextMargins( left, top, right, bottom, mode, options ) SetTextShadow( radius, dx, dy, color ) SetTextShadow1( radius, dx, dy, color ) SetTextShadow2( radius, dx, dy, color ) SetTextSize( size, mode ) SetTextSize1( size, mode ) SetTextSize2( size, mode ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( title, body, icon, index )
app/CreateListDialog.htm := CreateListDialog Back CreateListDialog Hello World Content: - Methods If you want a quick way to let the user select one or even multiple items of a given dataset you can use the ListDialog. ldg = app.CreateListDialog( title, list, options ) → app object: ListDialog Use the SetOnTouch method of the ListDialog object to set the name of a function you want to be called every times a list item is selected. The selected item is passed that function as parameter. Example - Basic function OnStart() { dlg = app.CreateListDialog( "Choices", "Add,Remove,Delete" ); dlg.SetOnTouch( dlg_OnTouch ); dlg.Show(); } function dlg_OnTouch( item ) { app.ShowPopup( item ); } Copy Copy All Run ou can use the “Multi” option to create a ListDialog with check boxes against each item. This allows multiple list items to be selected. An extra parameter isChecked is passed to the OnTouch callback function when a check box is checked or unchecked. Example - Multi function OnStart() { dlg = app.CreateListDialog( "Days", "Mon,Tues,Wed,Thurs,Fri,Sat,Sun", "Multi" ); dlg.SetOnTouch( dlg_OnTouch ); dlg.Show(); } function dlg_OnTouch( item, isChecked ) { app.ShowPopup( item + " isChecked = " + isChecked ); } Copy Copy All Run Methods The following methods are available on the ListDialog object: AdjustColor( hue, saturation, brightness, contrast ) Batch( properties ) Dismiss() GetType() → String: “ListDialog” Hide() Method( name, types, p1, p2, p3, p4 ) → all types SetBackColor( color ) SetBackground( file, options ) SetOnTouch( callback ) SetSize( width, height, options ) SetTextColor( color ) SetTitle( title ) Show() function( title, checked )
app/CreateLocator.htm := CreateLocator Back CreateLocator Hello World Content: - Methods The Locator component can be used to find your whereabouts on the planet using either your device's GPS or information from your network. loc = app.CreateLocator( type, options ) → app object: Locator The provider specifies where the locator should retreive its information from . “Network” means get the location from the cell network and wifi, “GPS” tells the locator to use the device's GPS To Start the locator use the Start method. You can also stop it with Stop. To get regulat updates about your current positino use the SetOnChange function. Example - Get Location Updates function OnStart() { loc = app.CreateLocator("GPS,Network"); loc.SetOnChange(loc_OnChange); loc.Start(); app.ShowPopup("Locating"); } function loc_OnChange(pos) { var msg = pos.latitude + ", " + pos.longitude; app.ShowPopup( msg ); } Copy Copy All Run Methods The following methods are available on the Locator object: Batch( properties ) GetBearingTo( latitude, longitude ) → Number GetDistanceTo( latitude, longitude ) → Number GetType() → String: “Locator” SetOnChange( callback ) SetRate( rate ) Start() Stop() function( data, time )
app/CreateMediaPlayer.htm := CreateMediaPlayer Back CreateMediaPlayer Hello World Content: - Methods The MediaPlayer object can be used to play sound files from the phone or tablet. ply = app.CreateMediaPlayer( ) → app object: MediaPlayer Use the SetFile method of the MediaPlayer object to set the sound file to play. Supported sound file types include .ogg and .mp3. When the sound file is ready for playback, the OnReady callback function will be called. Then you can start playing using the Start method. If the soundtrack has finished playing, the OnComplete callback will be called. All together you code could look like that: Example - Playing Audio function OnStart() { player = app.CreateMediaPlayer(); player.SetOnReady(Play); player.SetOnComplete( player_OnComplete ); player.SetFile( "/Sys/Snd/Poing.ogg" ); } function Play() { player.Play(); } function player_OnComplete() { app.ShowPopup( "OnComplete" ); } Copy Copy All Run The SeekTo method can be used to adjust the playback position by passing in the time in seconds. Passing in 0 will set the playback position to the beginning of the sound file: player.SeekTo( 0 ); Methods The following methods are available on the MediaPlayer object: Batch( properties ) Close() GetDuration() → Number: seconds GetPosition() → Number: seconds GetType() → String: “MediaPlayer” IsLooping() IsPlaying() IsReady() Pause() Play() SeekTo( time ) SetFile( file ) SetLooping( loop ) SetOnComplete( callback ) SetOnReady( callback ) SetOnSeekDone( callback ) SetPitch( pitch ) SetSpeed( speed ) SetVolume( left, right ) Stop()
app/CreateMediaStore.htm := CreateMediaStore Back CreateMediaStore Hello World Content: - Methods The MediaStore is used to query audio information from the android provider or from the device in the “/sdcard/Music” folder. med = app.CreateMediaStore( ) → app object: MediaStore Example - Query Artists function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); lst = app.CreateList( "", 1, .9 ); lay.AddChild( lst ); app.AddLayout( lay ); app.ShowProgress( "Query Artists" ); media = app.CreateMediaStore(); media.SetOnArtistsResult( media_OnArtistsResult ); media.QueryArtists( "", "artist", "external" ); } function media_OnArtistsResult( result ) { result.forEach( function( m ) { var s = ""; for( var k in m ) s += k + ": " + m[k] + "\n"; lst.AddItem( m.artist, s.slice( 0, -4 ), "" ); } ); app.HideProgress(); } Copy All Run Example - Query Albums function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); lst = app.CreateList( "", 1, .9 ); lst.SetColumnWidths( 0.3 ); lst.SetIconSize( 0.2 ); lay.AddChild( lst ); app.AddLayout( lay ); app.ShowProgress( "Query Albums" ); media = app.CreateMediaStore(); media.SetOnAlbumsResult( media_OnAlbumsResult ); media.QueryAlbums( "", "album", "external" ); } function media_OnAlbumsResult( result ) { result.forEach( function( m ) { var s = ""; for( var k in m ) s += k + ": " + m[k] + "\n"; lst.AddItem( m.album, s.slice( 0, -4 ), m.albumArt == "null" ? "audio" : m.albumArt ); } ); app.HideProgress(); } Copy All Run Example - Query Media function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); lst = app.CreateList( "", 1, .9 ); lay.AddChild( lst ); app.AddLayout( lay ); app.ShowProgress( "Query Media" ); media = app.CreateMediaStore(); media.SetOnMediaResult( media_OnMediaResult ); media.QueryMedia( "", "title", "external" ); } function media_OnMediaResult( result ) { result.forEach( function( m ) { var s = ""; for( var k in m ) s += k + ": " + m[k] + "\n"; lst.AddItem( m.title, s.slice( 0, -4 ), "" ); } ); app.HideProgress(); } Copy All Run Methods The following methods are available on the MediaStore object: Batch( properties ) GetAlbumArt( image, id, options ) → Boolean GetSongArt( image, id, options ) → Boolean GetType() → String: “MediaStore” QueryAlbums( filter, sort, options ) QueryArtists( filter, sort, options ) QueryMedia( filter, sort, options ) SetOnAlbumsResult( callback ) SetOnArtistsResult( callback ) SetOnMediaResult( callback ) function( result ) function( result ) function( result )
app/CreateMusic.htm := CreateMusic Back CreateMusic Hello World Add music to your app. mus = app.CreateMusic() → app object: Music See the Music.html page for more details
app/CreateNetClient.htm := CreateNetClient Back CreateNetClient Hello World Content: - Methods NetClients can be used to communicate with servers on the web. net = app.CreateNetClient( type ) → app object: NetClient You can choose between two different protocols: The connection based TransmissionControlProtocol which always checks if the data was received correctly and in right order. It is used in most cases because it is very reliable. The downside is that it is relatively slow becaus of the numerous checks. The connectionless UserDatagramProtocol which sends the data once without any checks so that packages may be corrupt or lost completely during the transmission. Because of that data can be sent as fast as possible and it suits perfectly for games which need a fast update rate between the devices. Note: A few routers block fast UDP messages by default Example - TCP Basic function OnStart() { lay = app.CreateLayout( "linear" ); web = app.CreateWebView( 1, .5, "ignoreerrors" ); lay.AddChild( web ); txt = app.CreateTextEdit( "", 1, .5, "ReadOnly,NoKeyboard" ); txt.SetTextSize( 12 ); lay.AddChild( txt ); app.AddLayout( lay ); net = app.CreateNetClient( "TCP,Raw" ); net.SetOnConnect( net_OnConnect ); net.Connect( "www.randomfunfacts.com", 80 ); } function net_OnConnect( connected ) { if( !connected ) return app.ShowPopup( "Failed to connect!" ); net.SendText( "GET / HTTP/1.1\r\nHost:www.randomfunfacts.com\r\n\r\n", "UTF-8" ); var msg = "", s = ""; do msg += s = net.ReceiveText( "UTF-8" ); while( s.length > 0 ); txt.SetText( msg ); web.LoadHtml( msg ); net.Disconnect(); } Copy Copy All Run Example - TCP AutoReceive function OnStart() { lay = app.CreateLayout( "linear" ); web = app.CreateWebView( 1, .5, "ignoreerrors" ); lay.AddChild( web ); txt = app.CreateTextEdit( "", 1, .5, "ReadOnly,NoKeyboard" ); txt.SetTextSize( 12 ); lay.AddChild( txt ); app.AddLayout( lay ); net = app.CreateNetClient( "TCP,Raw" ); net.SetOnConnect( net_OnConnect ); net.SetOnReceive( OnReceive ); net.AutoReceive( "www.randomfunfacts.com", 80, "UTF-8" ); } var sent = false; function net_OnConnect( connected ) { if( !connected ) return app.ShowPopup( "Failed to connect!" ); if( sent ) return sent = msg != ""; else sent = true; net.SendText( "GET / HTTP/1.1\r\nHost:www.randomfunfacts.com\r\n\r\n", "UTF-8" ); } var msg = ""; function OnReceive( s ) { msg += s; if(s.endsWith( "\r\n\r\n" )) { txt.SetText( msg ); web.LoadHtml( msg ); msg = ""; } } Copy Copy All Run Example - UDP Messaging function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); btn = app.CreateButton( "Send", 0.3, 0.1 ); btn.SetMargins( 0, 0.05, 0, 0 ); lay.AddChild( btn ); btn.SetOnTouch( btn_OnTouch ); app.AddLayout( lay ); net = app.CreateNetClient( "UDP" ); address = net.GetBroadcastAddress(); id = app.GetDeviceId(); port = 19700; setInterval( CheckForMsg, 500 ); } function btn_OnTouch() { var packet = id + "|Hello"; net.SendDatagram( packet, "UTF-8", address, port ); } function CheckForMsg() { var packet = net.ReceiveDatagram( "UTF-8", port, 10 ); if( packet ) { var parts = packet.split( "|" ); if( parts[0] != id ) app.ShowPopup( parts[1] ); } } Copy All Run Methods The following methods are available on the NetClient object: AutoReceive( server, port, mode ) Batch( properties ) Close() Connect( address, port ) Disconnect() DownloadFile( file ) GetBroadcastAddress() → String GetType() → String: “NetClient” IsConnected() IsEnabled() → Boolean ReceiveBytes( mode ) → List: [ bytes ] ReceiveDatagram( mode, port, timeout, options ) → String ReceiveDatagrams( port, mode, options ) ReceiveFile( file, wait ) → String ReceiveText( mode ) → String ReceiveVideoStream( port, img ) → String SendBytes( data, mode ) SendDatagram( data, mode, address, port, options ) SendText( text, mode ) SetDataMode( mode ) SetOnConnect( callback ) SetOnDownload( callback ) SetOnReceive( callback ) SetSplitMode( mode, p2, p3 ) SetTimeout( seconds ) WakeOnLan( ip, mac ) function( connected ) function( something ) function( address )
app/CreateNode.htm := CreateNode Back CreateNode Hello World Content: - Methods Creates a NodeJS background process with all the functionality of common node.js. node = app.CreateNode( paths, options ) Note that to define private functions (functions that are invisible by the main app) you have to declare them as global variable without usign the var keyword. This is actually a safer way of working as it prevents name clashes and libraries overwriting each other's functions and variables accidentally. Ideally you should put your code into objects or classes for better protection and avoid using many globals. var myLocalVariable = "Local Hello"; myGlobalVariable = "Global Hello" function myLocalFunction() { return "Local Hello"; } myGlobalFunction = function() { return "Global Hello"; } For more details have a look at the Node docs in the Plugins page Example - Basic var nodeJs = 'console.log("Hello World");\nconsole.error("Hello Error");\n' function OnStart() { app.WriteFile("node_script.js", nodeJs); lay = app.CreateLayout("linear", "VCenter, FillXY") txt = app.AddText(lay, "Debug Log:", 1, 1, "Log"); node = app.CreateNode(); node.SetOnOutput((msg) => { txt.Log(msg); }); node.SetOnError((msg) => { txt.Log(msg, "red"); }); node.SetOnMessage((msg) => { txt.Log(msg); }); node.SetOnReady(node_OnReady); app.AddLayout(lay); } function node_OnReady() { node.Run("node_script.js"); } Copy Copy All Run Methods The following methods are available on the Node object: AddModule( name, dir ) CloseMsgPipe( isCmd ) Execute( js, id ) GetEnv( name ) → String GetVersion() → Number IsDone() → Boolean IsReady() → Boolean OpenMsgPipe( isCmd ) Run( file, id, newPaths ) SendMessage( msg ) SendPipeMsg( msg, isCmd ) SetEnv( name, val ) SetOnDone( cb ) SetOnError( cb ) SetOnMessage( cb ) SetOnOutput( cb ) SetOnReady( cb ) Start( args, paths ) function( msg ) function( stdout )
app/CreateNotification.htm := CreateNotification Back CreateNotification Hello World Content: - Methods The Notification object can be used to put messages in the notification drawer. ntf = app.CreateNotification( options ) → app object: Notification The “AutoCancel” option will automatically dismiss the notificatin if the user touches it. “FullScreen” tries to create a larger notification on the screen. And “OnGoing” makes the Notification closeable by your app only. Use the SetMessage method to tell the object what to display notify.SetMessage( ticker, title, text ); The Notify method tells it to send the notification: notify.Notify( id ); When the user touches your notification, your app will come to the front, even if it was not running. If you use more than one notification, app.GetNotifyId can be used to check which notification was pressed by the user. Example - Notification function OnStart() { app.ShowPopup( "Sending notification" ); notify = app.CreateNotification(); notify.SetMessage( "Ticker", "Title", "Text" ); notify.Notify( "testID" ); setTimeout( cancel, 5000 ); } function cancel() { notify.Cancel( "testID" ); app.ShowPopup( "Notification cancelled" ); } Copy Copy All Run Methods The following methods are available on the Notification object: Batch( properties ) Cancel( id ) GetType() → String: “Notification” Listen( options ) Notify( id ) SetLargeImage( image ) SetLights( color, onMs, offMs ) SetMessage( ticker, title, text, extra ) SetOnNotify( callback ) SetSmallImage( image ) function( source, title, message, extra, type )
app/CreateNxt.htm := CreateNxt Back CreateNxt Hello World Content: - Methods The NXT object is used to manage the connection between your Android phone and the Lego Mindstorms NXT brick. nxt = app.CreateNxt( ) → app object: Nxt Note: This function is deprecated. Please install and visit the NXT-Docs from the Plugins page Example - Basic function OnStart() { nxt = app.CreateNxt(); nxt.SetOnConnected( OnConnected ); nxt.ShowDevices(); } function OnConnected() { nxt.Beep( 100, 500 ); } Copy Copy All Run Example - Auto Connect function OnStart() { nxt = app.CreateNxt(); var deviceName = "myNXTbrick"; var paired = nxt.IsPaired( deviceName ); if (paired) { app.ShowProgress( "Connecting to " + deviceName + "..." ); nxt.SetOnConnect( nxt_OnConnect ); nxt.Connect( deviceName ); } } function nxt_OnConnect( success, nxt ) { if( success ) { app.ShowPopup( "Connected to: " + nxt.GetBtName() + " : " + nxt.GetBtAddress() ); nxt.Beep( 2000, 200 ); } else app.Alert( "Failed to connect!" ); app.HideProgress(); } Copy Copy All Run Example - Sensors function OnStart() { nxt = app.CreateNxt(); lay = app.CreateLayout( "linear", "FillXY,VCenter" ); var list = "Color,Distance,Light,Mail,Sound,Touch" spnType = app.CreateSpinner( list, .3 ); spnType.SetOnChange( spnType_OnChange ); lay.AddChild( spnType ); spnInput = app.CreateSpinner( "1,2,3,4", .3 ); lay.AddChild( spnInput ); btn = app.CreateButton( "Measure", .3, .1 ); btn.SetOnTouch( ReadSensor ); lay.AddChild( btn ); app.AddLayout( lay ); } function spnType_OnChange() { app.SimulateTouch( spnInput ); } function ReadSensor() { var res = "invalid", inp = Number(spnInput.GetText()); switch( spnType.GetText() ) { case "Color": res = nxt.ToColorName( nxt.ReadColorSensor( inp, "ColorDetect" )); break; case "Distance": res = nxt.ReadDistanceSensor( inp ) + " cm"; break; case "Light": res = nxt.ReadLightSensor( inp, false ); break; case "Mail": res = nxt.ReadMail( inp, "Text", false ); break; case "Sound": res = nxt.ReadSoundSensor( inp, "dB" ); break; case "Touch": res = nxt.ReadTouchSensor( inp ); break; } if(res) app.ShowPopup( res ); else app.ShowPopup( "No Value" ); } Copy All Run Methods The following methods are available on the Nxt object: Batch( properties ) Beep( frequency, duration ) Brake( motors ) CheckConnection() → Boolean Connect( name ) Disconnect() Drive( motors, power, rotations, options ) FileFindFirst( pattern ) → String FileFindNext( handle ) → String GetBtAddress() → String GetBtName() → String GetCurrentProgram() → String GetRotationCount( motor ) → Number: integer GetType() → String: “Nxt” IsBluetoothEnabled() → Boolean IsConnected() → Boolean IsEnabled() → Boolean IsMotorIdle( motor ) IsPaired( name ) → Boolean PlaySoundFile( file, repeat ) ReadColorSensor( input, mode ) → Number: integer: 1..6 or 0..1023 ReadDistanceSensor( input ) → Number: float ReadLightSensor( input, active ) → Number: integer: 0..100 ReadMail( mailbox, type, remove ) → String ReadSoundSensor( input, mode ) → Number: float ReadTouchSensor( input ) → Boolean RequestEnable() Reset( motors ) SendMail( mailbox, type, message ) SetInvert( invert ) SetLampColor( input, color ) SetOnConnect( callback ) SetOnConnected( callback ) ShowDevices() StartProgram( name ) Stop( motors ) StopProgram() ToColorName( val ) → String: “black” or “blue” or “green” or “yellow” or “red” or “white” function( connected )
app/CreateOverlay.htm := CreateOverlay Back CreateOverlay Hello World Content: - Methods Overlays are displayed above everything on the screen - even on the home screen or above other applications. ovl = app.CreateOverlay( options ) Overlays can be created from services as well which makes them almost perfect for interacting with them. Note: This function is a premium feature. Please consider subscribing to Premium to use this feature and support DroidScript in its further development. Example - Memory Monitor cfg.Portrait; function OnStart() { app.ToBack(); lay = app.CreateLayout( "Linear" ); img = app.CreateImage( null, .3, .1 ); img.SetBackColor( "#66333333" ); img.SetAutoUpdate( false ); lay.AddChild( img ); ovl = app.CreateOverlay(); ovl.AddLayout( lay, 0.8, app.GetTop() ); app.Animate( Update, 1 ); } var lst = new Array(100).fill(1e5); function Update( time ) { var mem = app.GetMemoryInfo(); lst.push( Math.round( 100 * mem.avail / mem.total ) - 50 ); lst = lst.slice( -100 ); img.Clear(); img.SetPaintColor( "red" ); img.DrawLine( 0, mem.threshold / mem.total, 1, mem.threshold / mem.total ); img.SetPaintColor( "white" ); img.DrawSamples( lst, 50 ); img.Update(); } Copy All Run Methods The following methods are available on the Overlay object: AddLayout( layout, left, top, options ) Batch( properties ) GetParent() → app object GetType() RemoveLayout( layout ) SetPosition( layout, left, top, options )
app/CreatePhoneState.htm := CreatePhoneState Back CreatePhoneState Hello World Content: - Methods The PhoneState component is able to detect phone state changes. pst = app.CreatePhoneState( types ) → app object: PhoneState The callback data depends on the type: “CellLocation” : object: { cellId, areaCode } “DataConnection” : object: { state, networkType } “DataActivity” : unknown “CallState” : object: { state, number } “ServiceState” : string: “OutOfService” “SignalStrength” : number: float “CallForwarding” : boolean “MessageWaiting” : boolean Example - Demo function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); txt = app.CreateText( "", 0.95, 0.95, "multiline,left" ); txt.SetTextSize( 14 ); lay.AddChild( txt ); app.AddLayout( lay ); var types = "CellLocation,DataConnection,DataActivity,CallState," + "ServiceState,SignalStrength,CallForwarding,MessageWaiting"; state = app.CreatePhoneState( types ); state.SetOnChange( state_OnChange ); state.Start(); } var log = []; function state_OnChange( type, data ) { log.push( type.bold() + ": br>\t" + JSON.stringify(data) ); txt.SetHtml( log.join(" br>") ); } Copy All Run Methods The following methods are available on the PhoneState object: Batch( properties ) GetType() → String: “PhoneState” SetOnChange( callback ) Start() Stop() function( type, data )
app/CreatePlayStore.htm := CreatePlayStore Back CreatePlayStore Hello World Content: - Methods Creates a new PlayStore instance for retreiving informations or purchasing items. pls = app.CreatePlayStore( ) → app object: PlayStore Notes: If your email address is listed in the 'licence testing' section of the developer console settings page, then using this sample will result in a test subscription with an order id of '1234' which recurs daily (even if configured for monthly) and you will not be charged. Subscriptions can be cancelled in the Google Play App found on your device (they will stay active for the remains of the period that has been purchased). Methods The following methods are available on the PlayStore object: Batch( properties ) GetBillingInfo( prodIDs, callback, options ) GetPurchases( callback, options ) GetType() → String: “PlayStore” Purchase( prodID, token, callback, options ) function( items ) function( prodId, orderId, purchToken, devToken, packageName )
app/CreateScroller.htm := CreateScroller Back CreateScroller Hello World Content: - Methods If you have much data to display which doesn't fit in the area availabe, you probably want to use a Scroller. scr = app.CreateScroller( width, height, options ) → app object: Scroller The options for the Scroller are the same as the LinearLayout fill options, which set how a Scroller sizes within it's parent:- “FillX”, “FillY” and “FillXY”. By default Scrollers will auto-size to wrap their contents. To add other controls to your scroller you need to put them in a scroller layout first, which you can then add to the scroller object. Example - Example function OnStart() { lay = app.CreateLayout( "Linear", "FillXY" ); scroll = app.CreateScroller( 1.0, 1.0 ); lay.AddChild( scroll ); layScroll = app.CreateLayout( "Linear", "Left" ); scroll.AddChild( layScroll ); img = app.CreateImage( "/Sys/Img/Hello.png", 2.0, 2.0 ); layScroll.AddChild( img ); app.AddLayout( lay ); } Copy Copy All Run Methods The following methods are available on the Scroller object: AddChild( layout ) AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) Batch( properties ) ClearFocus() DestroyChild( layout ) Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, width, height } GetScrollX() → Number: fraction (0..1) GetScrollY() → Number: fraction (0..1) GetTop( options ) → Number GetType() → String: “Scroller” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types RemoveChild( child ) ScrollBy( x, y ) ScrollTo( x, y ) SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetDescription( desc ) SetEnabled( enable ) SetMargins( left, top, right, bottom, mode ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type )
app/CreateSeekBar.htm := CreateSeekBar Back CreateSeekBar Hello World Content: - Methods SeekBars are bars with a moveable pointer which let the user select a value in a given range. skb = app.CreateSeekBar( width, height, options ) → app object: SeekBar The SetRange method of the SeekBar object to sets the value range of the SeekBar and the SetValue method sets the current value. Use the SetOnChange method to define a function you want to be called when the SeekBar value has changed. You can read the value parameter in your callback function to get the current SeekBar value. Example - Example function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); skb = app.CreateSeekBar( 0.8 ); skb.SetRange( 1.0 ); skb.SetValue( 0.5 ); skb.SetOnTouch( skb_OnTouch ); lay.AddChild( skb ); app.AddLayout( lay ); } function skb_OnTouch( value ) { app.ShowPopup( "Value = " + value ); } Copy Copy All Run Methods The following methods are available on the SeekBar object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) Batch( properties ) ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, width, height } GetTop( options ) → Number GetType() → String: “SeekBar” GetValue() → Number GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode, options ) SetDescription( desc ) SetEnabled( enable ) SetMargins( left, top, right, bottom, mode ) SetMaxRate( rate ) SetOnChange( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetRange( range ) SetScale( x, y ) SetSize( width, height, options ) SetValue( val ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( value )
app/CreateSensor.htm := CreateSensor Back CreateSensor Hello World Content: - Methods The sensor object can be used to access numerous sensors of your device. sns = app.CreateSensor( type, options ) → app object: Sensor You can use the SetOnChange function of the Sensor to set the name of a function you want to be called when a the changes occur. Change the rate that a sensor checks for changes by adding one the options “Fastest”, “Fast”, “Medium” or “Slow”. “Slow” is the default. Example - GetNames function OnStart() { sns = app.CreateSensor(); var names = sns.GetNames(); app.Alert(names.replace(/,/g, ",\n"), "Sensor Names"); } Copy Copy All Run Example - Accelerometer function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); txt = app.CreateText( "", 0.8, 0.3, "Multiline" ); lay.AddChild( txt ); app.AddLayout( lay ); sns = app.CreateSensor( "Accelerometer" ); sns.SetOnChange( sns_OnChange ); sns.Start(); } function sns_OnChange( x, y, z, time ) { txt.SetText( "x=" + x + "\n y=" + y + "\n z=" + z ); } Copy Copy All Run Example - Orientation function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); txt = app.CreateText( "", 0.8, 0.3, "Multiline" ); lay.AddChild( txt ); app.AddLayout( lay ); sns = app.CreateSensor( "Orientation" ); sns.SetOnChange( sns_OnChange ); sns.Start(); } function sns_OnChange( azimuth, pitch, roll, time ) { var msg = " azimuth = " + azimuth.toFixed(1); msg += "\n pitch = " + pitch.toFixed(1); msg += "\n roll = " + roll.toFixed(1); txt.SetText( msg ); } Copy Copy All Run Example - Light function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); txt = app.CreateText( "", 0.8, 0.3 ); lay.AddChild( txt ); app.AddLayout( lay ); sns = app.CreateSensor( "Light" ); sns.SetOnChange( sns_OnChange ); sns.Start(); } function sns_OnChange( lux ) { txt.SetText( "level = " + lux + " lux" ); } Copy Copy All Run Methods The following methods are available on the Sensor object: Batch( properties ) GetAzimuth() → Number GetNames() → String: comma “,” separated GetPitch() → Number GetRoll() → Number GetType() → String: “Sensor” GetValues() → List: [ time, first, second, third ] Method( name, types, p1, p2, p3, p4 ) → all types SetMaxRate( rate ) SetMinChange( min ) SetOnChange( callback ) Start() Stop() function( first, second, third, time )
app/CreateService.htm := CreateService Back CreateService Hello World Content: - Methods Services run in the background and can be used to monitor online databases, local communication ports or changes in data on the file system. They can also trigger notifications to the user and launch apps when changes or timeouts occur. DroidScript Services run in a separate process and can take advantage of multi-CPU devices, this allows CPU intensive calculations or slow procedures to be done in the background without slowing down or interfering with the main application. Any file in your project with the filename “Service.js” will run as a hidden background service. A service can be created and started using the CreateService method of the app object in your main application file:. srv = app.CreateService( packageName, className, callback, options ) → app object: Service Use “this” for the packageName and className parameters. Your service will start running when it's created and a foreground app must exist to manage the service and this foreground app must be run at least one time by the user. You can set the service to start automatically when the device is booted if required; with the SetAutoBoot method of the app object. app.SetAutoBoot( "Service" ); Stop a service using the Stop method. svc.Stop(); Messages can be sent from your app to the service using the SendMessage method on the service object: svc.SendMessage( msg ); You will need to provide a message handler to receive and process the messages (see example below). Send messages from the service to the main app by using the SendMessage method of the app object: app.SendMessage( msg ); This will also need a message handler on the application (see example below). Adding services to your application is best done working with the WiFi editor (browser IDE) because you will need to edit more than one file and also see debug message from the service. Debug and error messages are shown in gray on the debug tab of the WiFi editor. Pressing the stop button in this IDE will stop both the service and the app, but pressing the back button on your device will stop the app but leave the service running. Example - Services //our Service.js code. //In regular usage move this code to a separate Service.js file var servicejs = ` //Init variables. var count = 0; var diff = 1; //Called when service is started. function OnStart() { app.ShowPopup( "Hello from Service!" ); //Start a timer to do some regular work. setInterval( DoWork, 500 ); } //Called when we get a message from main app. function OnMessage( msg ) { app.Debug( msg ); //Handle commands from main App. if( msg == "change" ) diff = (diff > 0 ? -1 : 1); } //This is where we do some regular background task //(here we just modify a counter and send it back to the app, if its running). function DoWork() { count += diff; app.SendMessage( count ); }` function OnStart() { //Create the Service.js file //(In regular usage create the file yourself) app.WriteFile("Service.js", servicejs ); //Create a layout. lay = app.CreateLayout( "linear", "VCenter,FillXY" ); //Create text control to display data from the service. txt = app.CreateText( "", 0.4 ); txt.SetTextSize( 22 ); lay.AddChild( txt ); //Create an 'Send Message' button. btn = app.CreateButton( "Send Message to Service", 0.6, 0.1 ); lay.AddChild( btn ); btn.SetOnTouch( function(){ svc.SendMessage("change"); } ); //Create a 'Stop Service' button. btn = app.CreateButton( "Stop Service", 0.6, 0.1 ); lay.AddChild( btn ); btn.SetOnTouch( function(){ svc.Stop(); } ); //Add layout to app. app.AddLayout( lay ); //Start/connect to our service. svc = app.CreateService( "this", "this", OnServiceReady ); svc.SetOnMessage( OnServiceMessage ); //This will cause your service to start at boot. //(Set it to "none" if you need to stop it starting) //app.SetAutoBoot( "Service" ); } //Called after our service has started. function OnServiceReady() { app.Debug( "Service Ready" ); } //Called when messages comes from our service. function OnServiceMessage( msg ) { txt.SetText( "Count: " + msg ); } Copy All Run Inspect the debug console and see the log messages from the service in gray. Methods The following methods are available on the Service object: Batch( properties ) GetType() → String: “Service” SendMessage( message ) SetInBackground() SetInForeground( title, text, largeIcon, smallIcon, importance ) SetOnMessage( callback ) Stop() function( message )
app/CreateShortcut.htm := CreateShortcut Back CreateShortcut Hello World This method creates a shortcut of an app on your home screen - referencing to a js file runnable with DS. app.CreateShortcut( name, iconFile, file, options ) Note: since Android 9 this method prompts a system dialog Example - Demo function OnStart() { var file = app.GetAppPath() + "/" + app.GetAppName() + ".js"; app.CreateShortcut( "Demo", "/Sys/Img/Icon.png", file ); app.ShowPopup( "Add Shortcut" ); } Copy Copy All Run
app/CreateSMS.htm := CreateSMS Back CreateSMS Hello World Content: - Methods Returns a new SMS object to send and retreive SMS messages. sms = app.CreateSMS( ) → app object: SMS ATTENTION: This function is available in the DS X-Versions only as it doesn't meet the GooglePlay security requirements. APKs built with X-Versions are for private use only. Methods The following methods are available on the SMS object: Batch( properties ) GetType() → String: “SMS” Send( number, message, options ) SetOnMessage( callback ) SetOnStatus( callback ) function( message ) function( status )
app/CreateSpeechRec.htm := CreateSpeechRec Back CreateSpeechRec Hello World Content: - Methods The SpeechRec object can be used to listen for and recognize speech. spr = app.CreateSpeechRec( options ) → app object: SpeechRec Use the Recognize method of the SpeechRec object to tell it to start listening: speech.Recognize(); When the SpeechRec object has started listening, the OnReady callback function will be called. Use the SetOnReady method to set the name of your OnReady callback function. If the SpeechRec object recognizes speech, the OnResult callback function will be called. The results are passed to the OnResult callback function as an array, with the most probable result at the front. Use the SetOnResult method to set the name of your OnResult callback function. If the SpeechRec object does not recognize anything, the OnError callback function will be called. Use the SetOnError method to set the name of your OnError callback function. Example - Example function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); btn = app.CreateButton( "Talk To Me", 0.3, 0.1 ); btn.SetOnTouch( btn_OnTouch ); lay.AddChild( btn ); app.AddLayout( lay ); speech = app.CreateSpeechRec(); speech.SetOnReady( speech_OnReady ); speech.SetOnResult( speech_OnResult ); speech.SetOnError( speech_OnError ); } function btn_OnTouch() { speech.Recognize(); } function speech_OnReady() { app.ShowPopup( "Listening...", "Short" ); } function speech_OnResult( results ) { app.ShowPopup( results[0] ); } function speech_OnError() { app.ShowPopup( "Please speak more clearly!" ); } Copy Copy All Run Methods The following methods are available on the SpeechRec object: Batch( properties ) Cancel() GetRMS() → Number: float GetType() → String: “SpeechRec” IsListening() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types Recognize() SetOnError( callback ) SetOnReady( callback ) SetOnResult( callback ) Stop() function( error ) function( result )
app/CreateSpinner.htm := CreateSpinner Back CreateSpinner Hello World Content: - Methods Create Spinners using the CreateSpinner method of the app object. spn = app.CreateSpinner( list, width, height, options ) → app object: Spinner You can allow the Spinner to auto-size by leaving out the dimensions or you can specify a width and/or height as decimal fractions of the screen's width and height. Use the SetOnChange method of your spinner to set the name of a function you want to be called when the user selects an item. You can get the current selection of the Spinner button at any time using the GetText method and replace the option list at any time by using the SetList method. Use the SelectItem method to select a particular item in code. Example - Example function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); spin = app.CreateSpinner( "Bilbo,Frodo,Gandalf", 0.4 ); spin.SetOnChange( ShowSelection ); spin.SelectItem( "Frodo" ); lay.AddChild( spin ); app.AddLayout( lay ); } function ShowSelection( item ) { app.ShowPopup( "Selected = " + item ); } Copy Copy All Run Methods The following methods are available on the Spinner object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) Batch( properties ) ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, width, height } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “Spinner” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types SelectItem( item ) SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetDescription( desc ) SetEnabled( enable ) SetList( list, delim ) SetMargins( left, top, right, bottom, mode ) SetOnChange( callback ) SetOnTouch( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetText( item ) SetTextColor( color ) SetTextSize( size, mode ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( item, index )
app/CreateSwitch.htm := CreateSwitch Back CreateSwitch Hello World Content: - Methods Switches are a variant of toggle buttons with another look. swi = app.CreateSwitch( text, width, height, options ) → app object: Switch Use the SetOnTouch method of the switch object to set the name of a function you want to be called when the switch is touched. You can get the state of the switch at any time using the GetChecked method. The switch state is also passed into your OnTouch callback function as a parameter every time the switch is touched. Methods The following methods are available on the Switch object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) Batch( properties ) ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetChecked() → Boolean GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, width, height } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “Switch” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetChecked( checked ) SetColorFilter( color, mode ) SetDescription( desc ) SetEnabled( enable ) SetMargins( left, top, right, bottom, mode ) SetOnTouch( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetStyle( color1, color2, radius, strokeClr, strokeWidth, shadow ) SetText( text ) SetTextColor( color ) SetTextSize( size, mode ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( value )
app/CreateSynth.htm := CreateSynth Back CreateSynth Hello World Content: - Some descriptions - Methods Returns a Synth object which can produces a variety of sounds, sound effects and music. syn = app.CreateSynth( type ) → app object: Synth Some descriptions note length: default is 2.56 seconds. midi note: like n'th key on a keyboard between 0 and ~125. 12 keys are one octave. Ie. the 4'th octave: C, C#, D, D#, E, F, F#, G, G#, A, A#, B. duration: powers of two indicating whole, half, quarter etc. up to thirty second notes. frequency: A4 equals 440 Hz. Each note frequency is 12 2 (~1.06) times higher than the previous. Humans can hear a range from 10 to about 20,000 Hz. My phone's range is from 0 to about 11025 Hz Phaser: a sound filter which creates a series of peaks and troughs in the frequency spectrum VoltageControlledAmplifier: (Variable-Gain Amplifier) electronic amplifier that varies its gain Voltage-Controlled Filter: electronic amplifier that varies the frequency Example - Tetris Theme function OnStart() { syn = app.CreateSynth(); syn.SetWaveShape( "Saw" ); syn.SetVcaSustain( 0.5 ); syn.SetVolume( 1, 1 ); syn.SetNoteLength( 2 ); syn.PlayMidiTune( "76:4,71:8,72:8,74:4,72:8,71:8,69:4,69:8,72:8,76:4," + "74:8,72:8,71:4,71:8,72:8,74:4,76:4,72:4,69:4,69:8," + "69:8,71:8,72:8,74:8,74:4,77:8,81:4,79:8,77:8,76:8,76:4,72:8,76:4," + "74:8,72:8,71:4,71:8,72:8,74:4,76:4,72:4,69:4,69:4" ); } Copy All Run Example - Multiple Synths Song function OnStart() { synth1 = app.CreateSynth(); synth1.SetWaveShape( "Saw" ); synth1.SetVcaSustain( 0.5 ); synth1.SetVcaDecay( 500 ); synth1.SetVolume( 1, 1 ); synth2 = app.CreateSynth(); synth2.SetWaveShape( "Saw" ); synth2.SetVcaDecay( 300 ); synth2.SetVolume( 1, 1 ); setTimeout('synth1.PlayMidiTune("35:4,35:4,35:4,35:4,31:4,31:4,30:4,30:4")', 0*5120); setTimeout('synth1.PlayMidiTune("35:4,35:4,35:4,35:4,31:4,31:4,30:4,30:4")', 1*5120); setTimeout('synth1.PlayMidiTune("35:4,35:4,35:4,35:4,31:4,31:4,30:4,30:4")', 2*5120); setTimeout('synth1.PlayMidiTune("35:4,35:4,35:4,35:4,31:4,31:4,30:4,30:4")', 3*5120); setTimeout('synth1.PlayMidiTune("35:4,35:4,35:4,35:4,31:4,31:4,30:4,30:4")', 4*5120); setTimeout('synth1.PlayMidiTune("35:4,35:4,35:4,35:4,31:4,31:4,30:4,30:4")', 5*5120); setTimeout('synth2.PlayMidiTune("59:4,59:8,59:8,62:8,59:4,57:8,55:2,54:2")', 2*5120); setTimeout('synth2.PlayMidiTune("59:8,59:4,59:8,62:8,59:4,57:8,55:8,57:4,55:8,54:2")', 3*5120); setTimeout('synth2.PlayMidiTune("59:4,59:8,59:8,62:8,59:4,57:8,55:2,54:2")', 4*5120); setTimeout('synth2.PlayMidiTune("59:8,59:4,59:8,62:8,59:4,57:8,55:8,57:4,55:8,54:2")', 5*5120); } Copy All Run Methods The following methods are available on the Synth object: Batch( properties ) GetType() → String: “Synth” PlayMidiTune( tune ) PlayNote( note ) PlayTone( frequency, duration ) SetDelay( milliseconds ) SetDelayEnabled( enable ) SetFeedback( feedback ) SetFrequency( frequency ) SetNoteLength( duration ) SetPhaser( drywet, rate, range, feedback ) SetPhaserDryWet( drywet ) SetPhaserEnabled( enable ) SetPhaserFeedback( feedback ) SetPhaserRange( range ) SetPhaserRate( rate ) SetVca( attack, decay, sustain, release ) SetVcaAttack( attack ) SetVcaDecay( decay ) SetVcaEnabled( enable ) SetVcaRelease( release ) SetVcaSustain( sustain ) SetVcf( attack, decay, sustain, release, cuttoff, resonance, depth ) SetVcfAttack( attack ) SetVcfCutoff( cuttoff ) SetVcfDecay( decay ) SetVcfDepth( depth ) SetVcfEnabled( enable ) SetVcfRelease( release ) SetVcfResonance( resonance ) SetVcfSustain( sustain ) SetVolume( left, right ) SetWaveShape( shape ) Start() Stop()
app/CreateSysProc.htm := CreateSysProc Back CreateSysProc Hello World Content: - Methods Creates a shell SystemProcess (ie. “sh”, “su” if root or “busybox” if installed) which can be reused throughout the program. sys = app.CreateSysProc( cmd, env, dir, options ) → app object: SysProc If env or dir are not provided HOME and TMDDIR are set by the component. Example - Basic function OnStart() { lay = app.CreateLayout( "linear" ); txt = app.CreateText( "", 1, 1, "Log,Monospace,autoscale" ); lay.AddChild( txt ); app.AddLayout( lay ); sys = app.CreateSysProc( "sh" ); sys.Out( "netstat\n" ); sys.SetOnInput( sys_OnInput ); sys.SetOnError( sys_OnError ); sys.Out( "netstoat\n" ); } function sys_OnInput( msg ) { txt.Log( msg ); } function sys_OnError( msg ) { txt.Log( msg ); } Copy All Run Example - Colored function OnStart() { lay = app.CreateLayout( "linear" ); scr = app.CreateScroller( 1, 1, "horizontal" ); lay.AddChild( scr ); txt = app.CreateText( "", 1, -1, "monospace,log" ); txt.SetTextSize( 8 ); txt.SetLog( 1000 ); scr.AddChild( txt ); app.AddLayout( lay ); sys = app.CreateSysProc( "sh" ); sys.SetOnInput( sys_OnInput ); sys.SetOnError( sys_OnError ); Exec( "netstat\n" ); // filter files containing 'D' in /sdcard/ and forward to stderr Exec( "ls -al /sdcard/ | grep D > 2\n" ); } function Exec( cmd ) { sys.Out( cmd ); txt.Log( cmd, "green" ); scr.ScrollTo( 0, txt.GetHeight() ); } function sys_OnInput( msg ) { txt.Log( msg ); scr.ScrollTo( 0, txt.GetHeight() ); } function sys_OnError( msg ) { txt.Log( msg, "red" ); scr.ScrollTo( 0, txt.GetHeight() ); } Copy All Run Methods The following methods are available on the SysProc object: Batch( properties ) Err( maxLines, options ) GetType() → String: “SysProc” In( maxLines, options ) Method( name, types, p1, p2, p3, p4 ) → all types Out( command ) ReadFileAsByte( file ) → Number: bytes SetOnError( callback ) SetOnInput( callback ) WriteToFile( file, data ) function( data )
app/CreateTabs.htm := CreateTabs Back CreateTabs Hello World Content: - Methods Tabs are useful if you have multiple subsections in your app. The user can then press the title of a tab and the control will automatically switch to the corresponding layout. tab = app.CreateTabs( list, width, height, options ) → app object: Tabs To add children to a tab layout you have to retreive it first (because they were already created by the control): var layTab1 = tab.GetLayout( "TabName1" ); Then you canuse it as every normal layout control Example - Basic function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); var tabs = app.CreateTabs( "Tab 1,Tab 2,Tab 3", 0.8, 0.8, "VCenter" ); lay.AddChild( tabs ); tab1 = tabs.GetLayout( "Tab 1" ); tab1.SetBackGradient( "red", "green", "", "left-right" ); tab1 = tabs.GetLayout( "Tab 2" ); tab1.SetBackGradient( "green", "blue", "", "left-right" ); tab1 = tabs.GetLayout( "Tab 3" ); tab1.SetBackGradient( "blue", "red", "", "left-right" ); app.AddLayout( lay ); } Copy All Run Methods The following methods are available on the Tabs object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) Batch( properties ) ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetCurrentTabName() → String GetHeight( options ) → Number GetLayout( name ) → app object: Layout GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, width, height } GetTop( options ) → Number GetType() → String: “Tabs” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types parent.AddTab( name ) SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetCornerRadius( radius ) SetDescription( desc ) SetEnabled( enable ) SetMargins( left, top, right, bottom, mode ) SetOnChange( callback ) SetOnChildChange( callback ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetTextSize( size, mode ) SetTouchable( touchable ) SetTouchThrough( through ) SetVisibility( mode ) Show() ShowTab( name ) Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( name ) function( src ) function( event )
app/CreateText.htm := CreateText Back CreateText Hello World Content: - Methods If you want to display text in your app you can use the Text object. txt = app.CreateText( text, width, height, options ) → app object: Text You can use the “Multiline” option to allow multi-line text and the “Left” or “Right” options to align the text. The default is single line centered text. Other options you will see used in the samples include “AutoScale”, “Bold”, “Html” and “FontAwesome”. Use the SetText and GetText functions of the Text object to set and get it's text. Example - Single line function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); txt = app.CreateText( "Hello" ); txt.SetTextSize( 22 ); lay.AddChild( txt ); app.AddLayout( lay ); } Copy Copy All Run You can change the look of a Text using the SetBackColor and SetTextColor functions on the Text object. Example - Multi line function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); txt = app.CreateText( "Hello\nWorld", 0.8, 0.2, "Multiline" ); txt.SetTextSize( 12 ); txt.SetTextColor( "#ff6666ff" ); txt.SetBackColor( "#ffffffff" ); lay.AddChild( txt ); app.AddLayout( lay ); } Copy Copy All Run Text can be shortened using ellipsis (...) when the size of the control is too small to show all the text. Use the SetEllipsize to control where the ellipsis is placed. Available modes are “start”, “middle”, “end” and “marq”. Example - Ellipsize function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); txt = app.CreateText( "The quick brown fox jumps over the lazy dog", 0.75 ); txt.SetTextSize( 28 ); txt.SetEllipsize( "end" ); lay.AddChild( txt ); app.AddLayout( lay ); } Copy Copy All Run You can also set a background image/pattern or background gradient for the Text using the SetBackground and SetBackGradient functions. See Layouts for examples of how to use these functions. Methods The following methods are available on the Text object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) Batch( properties ) ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetHtml() → String: html code GetLeft( options ) → Number GetLineCount() → Number: integer GetLineStart( line ) → Number: integer GetLineTop( line ) → Number: fraction (0..1) GetMaxLines() → Number: integer GetParent() → app object GetPosition( options ) → Object: { left, top, width, height } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “Text” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Log( message, options ) Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetDescription( desc ) SetEllipsize( mode ) SetEnabled( enable ) SetFontFile( file ) SetHtml( str ) SetLog( maxLines ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetOnTouchDown( callback ) SetOnTouchMove( callback ) SetOnTouchUp( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetText( text ) SetTextColor( color ) SetTextShadow( radius, dx, dy, color ) SetTextSize( size, mode ) SetTouchable( touchable ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src ) function( event ) function( event ) function( event ) function( event )
app/CreateTextEdit.htm := CreateTextEdit Back CreateTextEdit Hello World Content: - Methods If you want the user to enter custom data you probably need the TextEdit control. edt = app.CreateTextEdit( text, width, height, options ) → app object: TextEdit For number input only you can apply the “numbers” option. You can use the SetOnChange method of the TextEdit to set the name of a function you want to be called when a the text is changed. Use the SetText and GetText functions to set and get the text in the TextEdit. Example - Using OnChange function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); edt = app.CreateTextEdit( "Edit me", 0.8, 0.3 ); edt.SetOnChange( edt_OnChange ); lay.AddChild( edt ); txt = app.CreateText( "", 0.8, 0.3 ); txt.SetMargins( 0, 0.02, 0, 0 ); lay.AddChild( txt ); app.AddLayout( lay ); } function edt_OnChange() { txt.SetText( edt.GetText() ); } Copy Copy All Run You can change the look of a TextEdit using the SetBackColor and SetTextColor functions on the TextEdit object. Example - Blue on White function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); edt = app.CreateTextEdit( "Hello", 0.8, 0.4 ); edt.SetTextColor( "#ff6666ff" ); edt.SetBackColor( "#ffffffff" ); lay.AddChild( edt ); app.AddLayout( lay ); } Copy Copy All Run You can also set a background image/pattern or background gradient for the List using the SetBackground and SetBackGradient functions. See Layouts for examples of how to use these functions. Example - Password function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); edt = app.CreateTextEdit( "", 0.8, 0.4, "Password,Singleline" ); edt.SetHint( "Password" ); edt.SetOnEnter( edt_OnEnter ); lay.AddChild( edt ); app.AddLayout( lay ); } function edt_OnEnter() { var password = edt.GetText(); app.ShowPopup( password ); } Copy Copy All Run Methods The following methods are available on the TextEdit object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) Batch( properties ) ClearFocus() ClearHistory() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetCursorLine() → Number: integer GetCursorPos() → Number: integer GetHeight( options ) → Number GetHtml() → String: html code GetLeft( options ) → Number GetLineCount() → Number: integer GetLineStart( line ) → Number: integer GetLineTop( line ) → Number: fraction (0..1) GetMaxLines() → Number: integer GetParent() → app object GetPosition( options ) → Object: { left, top, width, height } GetSelectedText() → String GetSelectionEnd() → Number: integer GetSelectionStart() → Number: integer GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “TextEdit” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() InsertText( text, start ) IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types Redo() ReplaceText( text, start, end ) SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetCursorColor( color ) SetCursorPos( position ) SetDescription( desc ) SetEnabled( enable ) SetHint( text ) SetHtml( str ) SetMargins( left, top, right, bottom, mode ) SetOnChange( callback ) SetOnEnter( callback ) SetOnFocus( callback ) SetSelectColor( col ) SetSelection( start, stop ) SetSize( width, height, options ) SetText( text ) SetTextColor( color ) SetTextSize( size, mode ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) Undo() function( type )
app/CreateTheme.htm := CreateTheme Back CreateTheme Hello World Content: - Methods Returns a Theme object. thm = app.CreateTheme( baseTheme ) → app object: Theme Note: This function is a premium feature. Please consider subscribing to Premium to use this feature and support DroidScript in its further development. Example - Hackers Theme function OnStart() { SetHackerTheme(); lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); skb = app.CreateSeekBar( .8 ); skb.SetValue( 50 ); lay.AddChild( skb ); spn = app.CreateSpinner( "FRED,BILL,MARK", .4, .1 ); spn.SetMargins( 0, .05, 0, .05 ); lay.AddChild( spn ); tgl = app.CreateToggle( "Toggle", .3, .1 ); lay.AddChild( tgl ); edt = app.CreateTextEdit( "Hello World", .8 ); edt.SetMargins( 0, .05, 0, .05 ); lay.AddChild( edt ); chk = app.CreateCheckBox( "Check me", .3 ); lay.AddChild( chk ); app.AddLayout( lay ); app.Alert( "My Text", "Custom theme" ); } function SetHackerTheme() { var theme = app.CreateTheme("dark"); theme.SetBtnTextColor( "green" ); theme.SetTitleColor( "green" ); theme.SetDialogBtnTxtColor( "green" ); theme.SetTextColor( "green" ); theme.AdjustColor( -76 ); app.SetTheme( theme ); } Copy Copy All Run Methods The following methods are available on the Theme object: AdjustColor( hue, saturation, brightness, contrast ) Batch( properties ) GetType() → String: “Theme” Method( name, types, p1, p2, p3, p4 ) → all types SetBackColor( color ) SetBackground( file, options ) SetBtnTextColor( color ) SetButtonOptions( options ) SetButtonPadding( left, top, right, bottom, mode ) SetButtonStyle( color1, color2, radius, strokeClr, strokeWidth, shadow, checkClr ) SetCheckBoxOptions( options ) SetDialogBtnColor( color ) SetDialogBtnTxtColor( color ) SetDialogColor( color ) SetDialogCornerRadius( radius ) SetDimBehind( dim ) SetHighlightColor( color ) SetListDividerColor( color ) SetProgressBackColor( color ) SetProgressBarOptions( options ) SetProgressOptions( options ) SetProgressTextColor( color ) SetTextColor( color1, color2 ) SetTextEditOptions( options ) SetTitleColor( color ) SetTitleDividerColor( color ) SetTitleDividerHeight( height ) SetTitleHeight( height, options ) SetTitleTextSize( size, options )
app/CreateToggle.htm := CreateToggle Back CreateToggle Hello World Content: - Methods Toggle buttons are basically Buttons with an additional light bar indicating if it is activated or not. The user can toggle this state by pressing on it. tgl = app.CreateToggle( text, width, height, options ) → app object: Toggle You can allow the toggle button to auto-size by leaving out the dimensions or you can specify a width and height as decimal fractions of the screen's width and height. Use the SetOnTouch method of your button object to set the name of a function you want to be called when the button is touched. You can get the state of the toggle button at any time using the GetChecked method. The button state is also passed into your OnTouch callback function as a parameter every time the button is touched. Example - Basic function OnStart() { lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); tgl = app.CreateToggle( "Toggle Me" ); tgl.SetOnTouch( ShowState ); lay.AddChild( tgl ); app.AddLayout( lay ); } function ShowState( isChecked ) { app.ShowPopup( "Checked = " + isChecked, "Short" ); } Copy Copy All Run Methods The following methods are available on the Toggle object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) Batch( properties ) ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetChecked() → Boolean GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, width, height } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “Toggle” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetChecked( checked ) SetColorFilter( color, mode ) SetDescription( desc ) SetEnabled( enable ) SetMargins( left, top, right, bottom, mode ) SetOnTouch( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetStyle( color1, color2, radius, strokeClr, strokeWidth, shadow ) SetText( text ) SetTextColor( color ) SetTextSize( size, mode ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( value )
app/CreateUSBSerial.htm := CreateUSBSerial Back CreateUSBSerial Hello World Content: - Methods The USBSerial component can be used to communicate with other USB devices connected to yours. usb = app.CreateUSBSerial( baudRate, dataBits, stopBits, parity, device ) → app object: USBSerial The default constructor values are: baudrate: 9600 To find out more about RTD and DTR or USB serial at all visit Wikipedia: RS-232 Note: this application only works on devices that support OTG and allow access to external serial devices. Known to work: Nexus7, GalaxyS3/S4, ExperiaZUltra, TescoHudl Dont work: Nexus4, GalaxyS1, AsusMemo Methods The following methods are available on the USBSerial object: Batch( properties ) GetCD() GetDTR() GetRTS() GetType() → String: “USBSerial” IsConnected() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types SetDataMode( mode ) SetDTR( onOff ) SetMaxRead( bytes ) SetMaxWrite( bytes ) SetOnReceive( callback ) SetRTS( onOff ) SetSplitMode( mode, p2, p3 ) SetTimeout( ms ) Start() Stop() Write( text, encoding ) function( data )
app/CreateVideoView.htm := CreateVideoView Back CreateVideoView Hello World Content: - Methods The VideoView can be used to play local video files from the filesystem or video streams from remote sources. vid = app.CreateVideoView( width, height, options ) → app object: VideoView Use SetFile to set the video file or video stream address. player.SetFile( "https://file-examples.com/wp-content/uploads/2017/04/file_example_MP4_640_3MG.mp4" ); When the video is ready to play, the OnReady callback function will be called, you can then use Play to start playing the video. If the video cannot be played, the OnError callback function will be called. Use SetOnReady and SetOnError to set the names of your OnReady and OnError callback functions. Example - Video Stream function OnStart() { lay = app.CreateLayout( "Linear", "FillXY,VCenter" ); app.ShowProgress( "Buffering..." ); player = app.CreateVideoView( 0.9, 0.4 ); player.SetOnReady( playerOnReady ); player.SetOnError( player_OnError ); lay.AddChild( player ); player.SetFile( "https://file-examples.com/wp-content/uploads/2017/04/file_example_MP4_640_3MG.mp4" ); app.AddLayout( lay ); } function playerOnReady() { app.HideProgress(); app.ShowPopup( "Ready" ); player.Play(); } function player_OnError(e) { app.HideProgress(); app.ShowPopup( "Error" ); } Copy Copy All Run Methods The following methods are available on the VideoView object: AdjustColor( hue, saturation, brightness, contrast ) Batch( properties ) ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetDuration() → Number: float GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, width, height } GetTop( options ) → Number GetType() → String: “VideoView” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsPlaying() → Boolean IsReady() → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types Pause() Play() SeekTo( seconds ) SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetDescription( desc ) SetEnabled( enable ) SetFile( file ) SetMargins( left, top, right, bottom, mode ) SetOnComplete( callback ) SetOnError( callback ) SetOnReady( callback ) SetOnSubtitle( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetSubtitles( file ) SetVisibility( mode ) SetVolume( left, right ) Show() Stop() Tween( target, duration, type, repeat, yoyo, callback )
app/CreateWebServer.htm := CreateWebServer Back CreateWebServer Hello World Content: - Methods Web servers form the foundation of the web, especially the Internet of Things (IoT). sock = app.CreateWebServer( port, options ) → app object: WebServer Turning your phone or tablet into a web server or creating a network of interconnected devices is very simple with DroidScript. Set a document root for the server using the SetFolder method of the WebServer object. This is the folder location on your device that your web pages will be served from. wbs.SetFolder( path ); Start the server using the Start method. wbs.Start(); And stop it using the Stop method. wbs.Stop(); The following example shows how to create a basic webserver for serving pages over WiFi from your device. It will serve a built in demo page. For simplicity some of the features in the demo page will not work in this first example. Try them and you will see how the server presents errors. The next example shows how to handle all the features of the demo page. Example - Basic function OnStart() { var ip = app.GetIPAddress(); app.Alert( ip +":8080", "Type the following address into your browser" ); serv = app.CreateWebServer( 8080 ); serv.SetFolder( "/sdcard/DroidScript" ); serv.Start(); } Copy Copy All Run The second example shows how to accept file upload and permit directory listings by including permissions in the options parameter of the app.CreateWebServer method. It also adds a servlet to respond to messsages from the web client. A servelet can be used to process data supplied by a user via form elements or it can handle requests made from the client application. To get a better understanding of how client - server messaging works you can view the source of the served demo page and the network view in the developer tools of your favorite browser to see how the simple GET request is sent from the client browser to the servlet for processing by the OnServlet function when the Send Message button is clicked. Example - Servlets function OnStart() { var ip = app.GetIPAddress(); app.Alert( ip +":8080", "Type the following address into your browser" ); serv = app.CreateWebServer( 8080, "Upload,ListDir" ); serv.SetFolder( "/sdcard/DroidScript" ); serv.AddServlet( "/message", OnServlet ); serv.Start(); } function OnServlet( request, info ) { serv.SetResponse( "Got it!" ); app.ShowPopup( info.remoteAddress + " says: " + request.msg ); } Copy Copy All Run Web sockets are faster than servlets and can be used for both client - server applications or peer-to-peer systems where each connected node is both a client and a server without a centralized server. This makes web sockets very useful for datasharing in multiplayer games. All requests sent to the same servlet will queue up behind each other and are processed in order. The server application is said to be blocking all other requests whilst a servlet completes each task synchronously. Web sockets recieve the request and then start a process to handle the request. When the task is complete any data or messages to be returned will be sent back to the relevant connected clients. In this case the server application is said to be non-blocking or asynchronous. See Also: CreateWebSocket Web sockets can be used for broadcast purposes, for example sending the same message to all connected clients. They can also be used to send different direct messages to a specific one device using the IP address. The following example demonstrates web sockets being used to receive messages from and broadcasting messages to connected devices. Example - Send and Receive messages var indexhtml = ` html> head> title>WebSockets Demo /title> script> var count = 0; function Connect() { // Open web socket to phone. ws = new WebSocket( "ws://" + window.location.host ); ws.onopen = ws_onopen; ws.onmessage = ws_onmessage; ws.onclose = ws_onclose; ws.onerror = ws_onerror; } function Send() { ws.send( "Hello " + count++ ); } function ws_onopen() { id_info.innerHTML = "Socket Open"; } function ws_onmessage( msg ) { id_info.innerHTML = msg.data; } function ws_onclose() { id_info.innerHTML = "Socket Closed"; } function ws_onerror(e) { id_info.innerHTML = "Socket Error: " + e.data; } /script> /head> body> h2>DroidScript WebSockets Demo /h2> div id="id_info">Ready /div> button onclick="Connect()">Connect /button> button onclick="Send()">Send Message /button> /body> /html>`; var count = 0; function OnStart() { // Create the Index.html file // note: in regular use move the html to a separate file app.WriteFile( "Index.html", indexhtml ); ip = app.GetIPAddress(); app.Alert( ip +":8080", "Type the following address into your browser" ); app.PreventWifiSleep(); lay = app.CreateLayout( "linear", "VCenter,FillXY" ); txt = app.CreateText( "No connected clients.", 0.8, 0.3, "AutoScale,MultiLine" ); txt.SetTextSize( 22 ); lay.AddChild( txt ); txtMsg = app.CreateText( "", 0.8, 0.3, "AutoScale,MultiLine" ); txtMsg.SetTextSize( 22 ); lay.AddChild( txtMsg ); btn = app.CreateButton( "Send Message", 0.4, 0.1); btn.SetMargins( 0, 0.05, 0, 0 ); btn.SetOnTouch( SendMessage ); lay.AddChild( btn ); app.AddLayout( lay ); serv = app.CreateWebServer( 8080 ); serv.SetFolder( app.GetAppPath() ); serv.SetOnReceive( serv_OnReceive ); serv.Start(); setInterval( ShowConnections, 3000 ); } function ShowConnections() { var clients = serv.GetWebSockClients(); var list = []; for( var i = 0; i clients.length; i++ ) list.push(clients[i].remoteAddress); if(list.length) txt.SetText( list.join("\n") ); } function SendMessage() { serv.SendText( "Hello " + count++ ) } function serv_OnReceive( msg, ip ) { txtMsg.SetText( ip + ": " + msg ); } Copy All Run Methods The following methods are available on the WebServer object: AddRedirect( pattern, location ) AddServlet( path, callback ) Batch( properties ) Disconnect( ip, id ) GetType() → String: “WebServer” GetWebSockClients() → List: of objects: [{ remoteAddress, id }] Method( name, types, p1, p2, p3, p4 ) → all types SendText( txt, ip, id ) SetFolder( folder ) SetOnReceive( callback ) SetOnUpload( callback ) SetResponse( text ) SetUploadFolder( folder ) Start() Stop() function( args, info ) function( msg, ip, id ) function( filename, ip )
app/CreateWebSocket.htm := CreateWebSocket Back CreateWebSocket Hello World Content: - Methods WebSocket are useful when constantly comminicating with a server and when a fast reaction time is required. wbs = app.CreateWebSocket( ip, id, retry, options ) → app object: WebSocket A web socket will automatically open after creating it. Once after finished loading, the OnOpen callback is called. In order to receive messages from the server you have to specify a OnMessage callback. See Also: CreateWebServer Example - Basic function OnStart() { ip = app.GetIPAddress(); lay = app.CreateLayout( "linear", "VCenter,FillXY" ); txt = app.CreateText( "No connected clients.", 0.8, 0.3, "AutoScale,log" ); txt.SetTextSize( 22 ); lay.AddChild( txt ); app.AddLayout( lay ); serv = app.CreateWebServer( 8080 ); serv.SetFolder( app.GetAppPath() ); serv.SetOnReceive( serv_OnReceive ); serv.Start(); var sock = app.CreateWebSocket( "sock1", ip, 8080 ); sock.SetOnOpen( OnSockOpen ); sock.SetOnClose( OnSockClose ); } function OnSockOpen() { app.ShowPopup( "Connected" ); var clients = serv.GetWebSockClients(); for(var i in clients) txt.Log( clients[i].id + ": " + clients[i].remoteAddress ); } function OnSockClose() { app.ShowPopup( "Disconnected" ); } Copy Copy All Run Methods The following methods are available on the WebSocket object: Batch( properties ) Close() GetSocket() → JavaScript object: WebSocket IsOpen() → Boolean Send( message ) SetOnClose( callback ) SetOnMessage( callback ) SetOnOpen( callback ) function( message )
app/CreateWebView.htm := CreateWebView Back CreateWebView Hello World Content: - Methods You can create a control to display local or remote web pages in your App using the CreateWebView method. web = app.CreateWebView( width, height, options, zoom ) → app object: WebView If you are loading remote web pages, then you might want to use the SetOnProgress method to set the name of a callback function that you want called to report the progress of loading the page. You can use the LoadUrl method to load an internal or external web page or the LoadHtml method to load text directly from within your App. web.LoadUrl( url, options ); web.LoadHtml( html, baseFolder, options ); If you need to, you can use the Execute method to execute JavaScript code within the WebView. web.Execute( text ); Example - Remote function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); web = app.CreateWebView( 1, 1, "Progress" ); web.SetOnProgress( web_OnProgess ); lay.AddChild( web ); app.AddLayout( lay ); web.LoadUrl( "http:///www.google.com" ); } function web_OnProgess( progress ) { app.Debug( "progress = " + progress ); } Copy Copy All Run Example - Local File function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); web = app.CreateWebView( 0.8, 0.8 ); web.SetBackColor( "#00000000" ); lay.AddChild( web ); app.AddLayout( lay ); web.LoadUrl( "file:///Sys/Html/Page.htm" ); } Copy Copy All Run Example - Direct Html function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); web = app.CreateWebView( 0.8, 0.8 ); web.SetBackColor( "#00000000" ); lay.AddChild( web ); app.AddLayout( lay ); html = " html> body> center>" + " img src='Img/Droid2.png'>" + " div style='color:white; font-size:30;'>" + " Hello World! /div> br>" + " /center> /body> /html>"; web.LoadHtml( html, "file:///Sys/" ); } Copy Copy All Run Methods The following methods are available on the WebView object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) Back() Batch( properties ) CanGoBack() → Boolean CanGoForward() → Boolean Capture( file ) ClearCookies() ClearFocus() ClearHistory() Execute( code, callback ) Focus() Forward() Func( name, args... ) GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetHomeUrl() → String: url path GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, width, height } GetTop( options ) → Number GetType() → String: “WebView” GetUrl() → String: url path GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean LoadFailed() → Boolean LoadHtml( html, baseFolder, options ) LoadUrl( url, options ) Method( name, types, p1, p2, p3, p4 ) → all types Print() Reload() SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetBlockedUrls( urls ) SetColorFilter( color, mode ) SetContextMenus( links, images ) SetDescription( desc ) SetEnabled( enable ) SetErrorPage( url ) SetInject( file ) SetMargins( left, top, right, bottom, mode ) SetOnConsole( callback ) SetOnContextMenu( callback ) SetOnError( callback ) SetOnProgress( callback ) SetOnRequest( callback ) SetOnTouch( callback ) SetOnUrl( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetRedirect( urlFrom, urlTo ) SetScale( x, y ) SetSize( width, height, options ) SetTextZoom( zoom ) SetTouchMode( mode ) SetUserAgent( agent, options ) SetUserCreds( name, password ) SetVisibility( mode ) Show() SimulateKey( keyName, modifiers, pause ) Stop() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( result ) function( msg ) function( item, url, img, type ) function( error ) function( progress ) function( url, method, isMain, isRedirect ) function( event ) function( url )
app/CreateWizard.htm := CreateWizard Back CreateWizard Hello World Content: - Page Initialisation - Methods The wizard is supposed to simplify a configuration progress which requires several inputs and decisions by the user. These can be settings and usage terms on first startup or an installation process as you might know from desktop applications. wiz = app.CreateWizard( title, width, height, callback, options ) The callback function will be called each time the user changes the wizard page. The functions gets the current wizard layout and the page index (starting from 1) to identify the current progress. Note: This function is a premium feature. Please consider subscribing to Premium to use this feature and support DroidScript in its further development. Page Initialisation On the very first call the page index is 0 which means 'initialisation'. Then you have to create and add all wizard pages to the passed (frame) layout. In case the user cancels the wizard the index is -1. Example - Demo function OnStart() { var theme = app.CreateTheme( "light" ); app.SetTheme( theme ); wiz = app.CreateWizard( "My Wizard", 0.7, 0.7, OnWizard ); wiz.Show(); } function OnWizard( lay, page ) { switch( page ) { case 0: wizTxt = app.CreateText( "", -1, -1, "MultiLine" ); wizTxt.SetTextSize( 19 ); lay.AddChild( wizTxt ); wizFlag = app.CreateText( "[fa-flag-checkered]", -1, -1, "FontAwesome" ); wizFlag.SetMargins( 0, 0.05, 0, 0 ); wizFlag.SetTextSize( 64 ); wizFlag.Gone(); lay.AddChild( wizFlag ); break; case 1: var msg = "This is the first page of your wizard"; wizTxt.SetText( msg ); break; case 2: var msg = "You can put any controls you like here, including" + " a webview and have as many pages as you like"; wizTxt.SetText( msg ); wizFlag.Gone(); break; case 3: wizTxt.SetText( "Wizard complete!" ); wizFlag.Show(); wiz.Finish(); break; case 4: wiz.Dismiss(); app.ShowPopup( "Wizard finished" ); break; case -1: app.ShowPopup( "Wizard cancelled" ); } } Copy All Run Methods The following methods are available on the Wizard object: Batch( properties ) Dismiss() Finish() GetButtons() → List: of objects: [ btnCancel, btnPrev, btnNext ] GetDialog() → app object: Dialog GetLayout() → app object: Layout GetType() → String: “Wizard” Hide() IsVisible() → Boolean Show() function( layout, page )
app/CreateYesNoDialog.htm := CreateYesNoDialog Back CreateYesNoDialog Hello World Content: - Methods The YesNo dialog can be used to let the user confirm a specific action. ynd = app.CreateYesNoDialog( message, options ) → app object: YesNoDialog Its the equivalent to the js confirm function, but it is more customizable. (and doesn't crash when aborting Example - Basic function OnStart() { ynd = app.CreateYesNoDialog( "Choose an answer" ); ynd.SetOnTouch( Ynd_OnTouch ); ynd.Show(); } function Ynd_OnTouch( result ) { app.Alert( result, "Result" ); } Copy All Run Methods The following methods are available on the YesNoDialog object: AdjustColor( hue, saturation, brightness, contrast ) Batch( properties ) Dismiss() GetType() → String: “YesNoDialog” Hide() Method( name, types, p1, p2, p3, p4 ) → all types SetBackColor( color, radius ) SetBackground( file, options ) SetButtonText( yes, no ) SetOnTouch( callback ) SetSize( width, height, options ) Show() function( result )
app/CreateZipUtil.htm := CreateZipUtil Back CreateZipUtil Hello World Content: - Methods The ZipUtil is handy for creating, editing and extracting zip files. zip = app.CreateZipUtil( mode ) → app object: ZipUtil You can even add files or texts to existing zip files, list their contents and extract single files from them. Example - List Contents function OnStart() { var name = app.GetAppName(); var file = "/sdcard/" + name + ".zip"; var zip = app.CreateZipUtil(); zip.Open( file ); var list = zip.List("").split(","); app.Alert(list.join(",\n")); zip.Close(); } Copy All Run Example - Compress function OnStart() { var name = app.GetAppName(); var fldr = app.GetPath() + "/" + name; var file = "/sdcard/" + name + ".zip"; app.ShowProgress(); var zip = app.CreateZipUtil(); zip.Create( file ); AddFolder( zip, name, fldr ); zip.Close(); app.HideProgress(); app.ShowPopup( "saved to " + file ); } function AddFolder( zip, name, fldr ) { var list = app.ListFolder( fldr,""); for( var i = 0; i list.length; i++ ) { var title = list[i]; if( !app.IsFolder( fldr + "/" + title ) ) zip.AddFile( name + "/" + title, fldr + "/" + title ); else AddFolder( zip, name + "/" + title, fldr + "/"+title ); } } Copy Copy All Run Methods The following methods are available on the ZipUtil object: AddFile( name, file ) AddText( name, text ) Batch( properties ) Close() Create( file ) CreateDebugKey( file ) CreateKey( file, password, name, organization ) Extract( name, file ) GetType() → String: “ZipUtil” List( path ) → String: comma “,” separated Open( file ) Sign( fileIn, fileOut, keyStore, password ) → Boolean UpdateManifest( fileIn, fileOut, packageName, appName, permissions, options )
app/Debug.htm := Debug Back Debug Hello World This function is an app equivalent to console.log(msg) which writes text into a console visible in debug mode “true” or “console”. app.Debug( message ) See Also: SetDebug Example - Demonstration function OnStart() { app.CreateDebug(); app.ShowDebug(true); app.Debug("\n\t\tHello World!"); } Copy Copy All Run
app/DeleteDatabase.htm := DeleteDatabase Back DeleteDatabase Hello World DeleteDatabase removes a specific database See Also: OpenDatabase. app.DeleteDatabase( name )
app/DeleteFile.htm := DeleteFile Back DeleteFile Hello World DeleteFile deletes a given file from the filesystem. app.DeleteFile( file ) This makes it hard to restore it! See Also: WriteFile, RenameFile, FileExists Example - Delete created file function OnStart() { app.WriteFile( "myFile.txt", "Bye World!\n", "Append" ); app.DeleteFile("myFile.txt"); if(app.FileExists("myFile.txt")) app.ShowPopup("myFile was not deleted!"); else app.ShowPopup("myFile was deleted!"); } Copy Copy All Run
app/DeleteFolder.htm := DeleteFolder Back DeleteFolder Hello World DeleteFolder does the same as DeleteFile but with folders. app.DeleteFolder( folder ) It recursively removes all files and folders of the given folder and finally deletes it. See Also: MakeFolder, RenameFolder, FolderExists Example - Delete created folder function OnStart() { app.MakeFolder("myFolder"); app.DeleteFolder("myFolder"); if(app.FolderExists("myFolder")) app.ShowPopup("myFolder was not deleted!"); else app.ShowPopup("myFolder was deleted!"); } Copy All Run
app/DestroyLayout.htm := DestroyLayout Back DestroyLayout Hello World DestroyLayout destroys a layout and all its contents so it can't be used any more. app.DestroyLayout( layout ) As a result, all memory occupied by these objects will be released. See Also: CreateLayout, AddLayout Example - Destroy layout and check if deleted //Called when application is started. function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); btn = app.CreateButton( "Don't Press Me", 0.3, 0.1 ); btn.SetOnTouch( btn_OnTouch ); lay.AddChild( btn ); app.AddLayout( lay ); } function btn_OnTouch() { app.DestroyLayout(lay); var text = this.GetText() || "nothing in here!"; app.ShowPopup(text); } Copy Copy All Run
app/DisableKeys.htm := DisableKeys Back DisableKeys Hello World DisableKeys prevents the default behavior of several hard, soft or keyboard keys. app.DisableKeys( keyList ) This way you can apply a custom action for them using SetOnKey. You can find the complete list of keycodes on the Android Developer Page Example - Surprise var prev; function OnStart() { app.DisableKeys( "VOLUME_DOWN,VOLUME_UP" ); lay = app.CreateLayout( "Linear", "FillX" ); lay.SetPadding( 0, .85 ); lay.Hide(); img = app.CreateImage( "/Sys/Img/Hello.png", -1, .3 ); lay.AddChild( img ); app.AddLayout( lay ); app.ShowPopup( "Press the volume keys!" ); app.SetOnKey( OnKey ); } function OnKey(action, name, code, extra) { if( action != prev ) { if( action == "Down" ) lay.Animate( "SlideFromBottom", null, 300 ); if( action == "Up" ) lay.Animate( "SlideToBottom" , null, 300 ); } prev = action; } Copy Copy All Run
app/DisableTouch.htm := DisableTouch Back DisableTouch Hello World Use this method to prevent any user interaction with the app. app.DisableTouch( disable ) You could use this for a safe mode for a slideshow. Example - Demo function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY,touchspy" ); btn = app.CreateButton( "Disable", 0.3, 0.1 ); btn.SetOnTouch( btn_OnTouch ); lay.AddChild( btn ); app.AddLayout( lay ); } function btn_OnTouch() { app.DisableTouch( true ); app.ShowPopup( "Touch Disabled." ); } Copy Copy All Run
app/DiscoverBtDevices.htm := DiscoverBtDevices Back DiscoverBtDevices Hello World Use DiscoverBtDevices to search for other bluetooth devices which are not paired with the current device. app.DiscoverBtDevices( filter, onFound, onComplete ) If any was found it will be forwarded directly to the onFound callback. If the search has finished onComplete function will be called. See Also: CreateBluetoothSerial, PairBtDevice, IsBtDevicePaired Example - Discover Bluetooth Devices function OnStart() { app.SetBluetoothEnabled(true); lay = app.CreateLayout( "linear", "VCenter,FillXY" ); lst = app.CreateList( "", 0.8, 0.4 ); lst.SetBackColor("#11ffffff"); lay.AddChild( lst ); app.AddLayout( lay ); app.ShowProgress(); app.DiscoverBtDevices( "", OnFound, OnComplete ); } function OnFound( name, address) { lst.AddItem( name, address ); } function OnComplete() { app.HideProgress(); } Copy Copy All Run function( name, address )
app/DownloadFile.htm := DownloadFile Back DownloadFile Hello World Downloads a file using the Android's built-in download manager which creates a notification with the current download status and a custom title and description. app.DownloadFile( source, destination, title, description, options ) In some cases there seems to appear a dialog - you can prevent that using the NoDialog option. With this methof you won't be able to get a OnComplete callback - if you need that check out CreateDownloader. Example - Downloading the DroidScript logo function OnStart() { var src = "http://www.androidscript.org/droidscriptwp/wp-content/uploads/2015/10/droidscript_logo_64x64.png"; var dst = "/sdcard/Downloads/logo.png"; app.DownloadFile(src, dst, "MyTitle", "My Description", "NoDialog"); } Copy All Run Example - Download to external storage function OnStart() { var src = "http://www.androidscript.org/droidscriptwp/wp-content/uploads/2015/10/droidscript_logo_64x64.png"; var dst = app.GetExternalFolder() + "/Downloads/logo.png"; app.DownloadFile(src, dst, "MyTitle", "My Description", "NoDialog"); } Copy All Run
app/EnableBackKey.htm := EnableBackKey Back EnableBackKey Hello World Allows to en- or disable the devices back key. app.EnableBackKey( enable ) When it is disabled the global OnBack app event will called when the user presses the back button - otherwise the app exits. You can use this method to create a custom BACK command that allows you to navigate between your layouts. Example - Example function OnStart() { app.EnableBackKey( false ); } function OnBack() { var yesNo = app.CreateYesNoDialog( "Exit App?" ); yesNo.SetOnTouch( yesNo_OnTouch ); yesNo.Show(); } function yesNo_OnTouch( result ) { if( result=="Yes" ) app.Exit(); } Copy Copy All Run
app/Error.htm := Error Back Error Hello World Shows a detailed error message with message, file and line in an asynchroneous dialog. app.Error( message, line, file, quit ) You can also set it to quit the app after the user dismisses the dialog. See Also: Alert Example - Show error and exit function OnStart() { var msg = "How dare you running that sample.\nI will close immediately!"; app.Error( msg, 4, "demo.js", true ); } Copy All Run
app/Execute.htm := Execute Back Execute Hello World Executes a piece of code asynchroneously to your program. app.Execute( js ) It is designed for interacting with your main app from within a WebView. Example - Execute code from WebView var html = ` html> head> script src='file:///android_asset/app.js'> /script> /head> script> var source = "html"; function btn_OnTouch() { app.Execute( "app.Alert( 'source: " + source + "\\\\ntarget: ' + source );" ); } /script> body style="text-align: center;"> input type="button" onclick="btn_OnTouch()" value="Click me!"> /button> /body> /html>`; var source = "app"; function OnStart() { lay = app.CreateLayout( "linear", "fillxy,vcenter" ); web = app.CreateWebView( .5, .2 ); web.LoadHtml( html ); lay.AddChild( web ); btn = app.CreateButton("call myFunction", .4, .1); btn.SetOnTouch(btn_OnTouch); lay.AddChild(btn); app.AddLayout( lay ); } function btn_OnTouch() { app.Execute( "app.Alert( 'source: " + source + "\\ntarget: ' + source );" ); } Copy All Run
app/Exit.htm := Exit Back Exit Hello World With Exit you can cancel and completely stop the app. app.Exit( kill ) You can also forcefully kill the app by passing true as first argument. Example - Exit dialog function OnStart() { app.EnableBackKey( false ); app.ShowPopup( "Press the back key" ); } function OnBack() { var yesNo = app.CreateYesNoDialog( "Exit App?" ); yesNo.SetOnTouch( yesNo_OnTouch ); } function yesNo_OnTouch( result ) { if( result == "Yes" ) app.Exit(); } Copy All Run
app/ExtExec.htm := ExtExec Back ExtExec Hello World Content: - Enable Termux ExtExec allows you to execute Linux shell commands in the powerful Linux environment provided by the free app called Termux. app.ExtExec( name, file, args, options ) Note: This function is a premium feature. Please consider subscribing to Premium to use this feature and support DroidScript in its further development. The Termux app runs as a service and there's almost no limit to what you can achieve with a full blown Linux machine running on your Android device! How about installing git, or nodejs or using ssh or gzip. Try typing 'busybox' at the terminal prompt to see what built-in commands are already available to you. Enable Termux To enable termux support you have to install Termux and the Tasker Plugin from PlayStore first. Then give termux sdcard permissions in the Android settings under apps/termux. After that create a symbolic link from the tasker plugin folder to your home directory: mkdir -p .termux /sdcard/termux/scripts ln -s /sdcard/termux/scripts .termux/tasker Finally you can run a termux shell script from inside DroidScript: Example - Open Termux and pass arguments function OnStart() { app.WriteFile( "/sdcard/termux/scripts/hello.sh", "echo Hello $1 and $2" ); var err = app.ExtExec( "termux", "hello.sh", 'World "' + app.GetUser() + '"', "" ); if( err ) app.Alert( "Termux Error:" + err ); } Copy Copy All Run Example - Execute in Background and retreive output var itv, lock = "/sdcard/.termuxlock"; var script = ` { # this is a comment echo This is a message # prints to stdout sleep 1 # waits 1 second echo This is an error 1> 2 # prints to stderr } 1>/sdcard/out.txt 2>/sdcard/err.txt; # forward stdout and stderr to files rm ` + lock; // remove script lock file function OnStart() { app.WriteFile( "/sdcard/termux/scripts/hello.sh", script ); app.WriteFile( lock, "" ); app.ShowProgress( "Script is running" ); var err = app.ExtExec( "termux", "hello.sh", "", "hide" ); if(err) app.Alert(err); lay = app.CreateLayout( "linear", "VCenter,FillXY" ); txt = app.CreateText( "", .8, .8, "monospace,multiline,left" ); lay.AddChild( txt ); app.AddLayout( lay ); itv = setInterval( CheckReady, 100 ); } function CheckReady() { if( !app.FileExists( lock )) { app.HideProgress(); clearInterval(itv); var stdout = app.ReadFile( "/sdcard/out.txt" ); var stderr = app.ReadFile( "/sdcard/err.txt" ); var text = "stdout:\n" + stdout + "\n\n" + "stderr:\n" + stderr; txt.SetText( text ); } } Copy Copy All Run
app/ExtractAssets.htm := ExtractAssets Back ExtractAssets Hello World ExtractAssets allows to extract folders and files from your compiled APK to the local storage. app.ExtractAssets( source, destination, overwrite, options ) But it works for local DroidScript projects as well. When override is false, already existant files will be kept and not overridden. Example - Extract File function OnStart() { app.WriteFile( "myData.txt", "main: " + app.GetAppName() ); app.ExtractAssets( "myData.txt", "/sdcard/myData.txt" ); app.Alert(app.ReadFile("/sdcard/myData.txt")); } Copy All Run Example - Extract Folder function OnStart() { app.MakeFolder( app.GetAppPath() + "/myFolder" ); app.WriteFile( app.GetAppPath() + "/myFolder/myData.txt", "main: " + app.GetAppName() ); app.ExtractAssets( "myFolder", "/sdcard/myFolder" ); app.Alert(app.ReadFile("/sdcard/myFolder/myData.txt")); } Copy All Run
app/ExtractPlugins.htm := ExtractPlugins Back ExtractPlugins Hello World ExtractPlugins overrides old plugin versions in the app's private folder with newer versions shipped with the APK. app.ExtractPlugins() This function is for debug purposes to forcefully update the plugins of an app even if the APK version did not change.
app/FileExists.htm := FileExists Back FileExists Hello World FileExists Checks if a given file exists in your filesystem or not. app.FileExists( file ) → Boolean See Also: WriteFile, CopyFile, RenameFile Example - Example function OnStart() { if(app.FileExists("myFile.txt")) { app.ShowPopup("myFile exists!"); } else { app.ShowPopup("myFile does not exist!"); } } Copy Copy All Run
app/FolderExists.htm := FolderExists Back FolderExists Hello World Checks if a given folder exits or not. app.FolderExists( folder ) → Boolean See Also: MakeFolder, CopyFolder, RenameFolder Example - Example function OnStart() { if(app.FolderExists("myFolder")) app.ShowPopup("myFolder exists!"); else app.ShowPopup("myFolder does not exist!"); } Copy Copy All Run
app/Func.htm := Func Back Func Hello World Call main app functions from inside a webview. app.Func( name, args... ) Example - WebView Greeter var html = ` html> head> meta name="viewport" content="width=device-width"> script src='file:///android_asset/app.js'> /script> /head> script> function greetWeb(name) { app.ShowPopup("Hello " + name + ", I'm the WebView"); } function greetApp() { app.Func("greetApp", "WebView"); } function OnRequest(err, s) { alert(s.split("\\n").join("\\n")) } /script> input type="button" onclick="greetApp()" value="Greet App"/> /html> ` function OnStart() { var lay = app.CreateLayout("linear", "FillXY,VCenter"); web = app.AddWebView(lay, 1, 0.5); web.LoadHtml(html); var btn = app.AddButton(lay, "Greet WebView"); btn.SetOnTouch(greetWeb); app.AddLayout(lay); } function greetApp(name) { app.ShowPopup("Hello " + name + ", I'm the App"); } function greetWeb() { web.Func("greetWeb", "App"); } Copy All Run
app/GA.htm := GA Back GA Hello World With Google Analytics implemented via analytics.js you can track the use of your apps in real-time and watch as people are using it all over the planet and see what city they are in. app.GA( command, [...fields], options ) You can get lots of usage statistics including what version of your app they are using, what version of Android, the time of day they are using your app, what device they are using and even which parts of the app people are using the most. You can find more informations on the Google Developers page. Note: This function is a premium feature. Please consider subscribing to Premium to use this feature and support DroidScript in its further development.
app/GetAccessibility.htm := GetAccessibility Back GetAccessibility Hello World Returns information about the availability of several accesibility features on the device. app.GetAccessibility() → Object: { enabled, exploreByTouch, screenReader }
app/GetAccounts.htm := GetAccounts Back GetAccounts Hello World Returns a string of all known account names on the device separated with comma ','. app.GetAccounts() → String: comma “,” separated See Also: ChooseAccount Example - Get Accounts function OnStart() { var accounts = app.GetAccounts(); dlg = app.CreateListDialog( "Select an account:", accounts ); dlg.SetOnTouch( dlg_OnTouch ); dlg.Show(); } function dlg_OnTouch( account ) { app.ShowPopup( "Selected Account: " + account ); } Copy Copy All Run
app/GetActivities.htm := GetActivities Back GetActivities Hello World GetActivities returns a list of object of currently running activities. app.GetActivities() → List: [{ label, packageName, className }] Note: This function is deprecated. Filters are applied since Android 11. Full functionality can be accessed in the X-Version of DS. See Android Package Visibility for more information. See Also: GetRunningApps, GetRunningServices Example - Show Activities function OnStart() { app.ShowProgress(); var lay = app.CreateLayout( "linear" ); var list = app.GetActivities(); lst = app.CreateList( "", 1, 1 ); lay.AddChild( lst ) app.AddLayout(lay); for(var i in list) { var a = list[i]; lst.AddItem(a.label, a.packageName); } app.HideProgress(); } Copy All Run
app/GetAppLangCode.htm := GetAppLangCode Back GetAppLangCode Hello World Convert the user language name to it's 2 character long language code. app.GetAppLangCode( name ) → String If no argument is passed, the current language code is returned. See Also: GetLanguage
app/GetAppLanguages.htm := GetAppLanguages Back GetAppLanguages Hello World Returns the available translation languages specified in your lang.json file. app.GetAppLanguages() → List: [ code] See Also: SetAppLanguage
app/GetAppName.htm := GetAppName Back GetAppName Hello World Returns the name of the current app. app.GetAppName() → String Example - Show app name function OnStart() { var name = app.GetAppName(); app.Alert( name ); } Copy Copy All Run
app/GetAppPath.htm := GetAppPath Back GetAppPath Hello World Returns the path to the app assets folder. app.GetAppPath() → String: path to file or folder ( “/absolute/...” or “relative/...” ) In a DroidScript project the path should be “/sdcard/DroidScript/APPNAME” In an apk it instead returns the absolute path to the “/Assets” folder See Also: GetPath, GetPrivateFolder Example - Show app path function OnStart() { var path = app.GetAppPath(); app.Alert( path ); } Copy Copy All Run
app/GetBatteryLevel.htm := GetBatteryLevel Back GetBatteryLevel Hello World Returns the current battery level of the device in percent. app.GetBatteryLevel() → Number: percent See Also: GetChargeType, IsCharging Example - Show Battery Level function OnStart() { var lvl = app.GetBatteryLevel(); app.Alert( lvl ); } Copy Copy All Run
app/GetBluetoothAddress.htm := GetBluetoothAddress Back GetBluetoothAddress Hello World Returns the hexadecimal Bluetooth address of the device, following the pattern “00:00:00:00:00:00”. app.GetBluetoothAddress() → String See Also: CreateBluetoothSerial Example - Show Bluetooth Address function OnStart() { var addr = app.GetBluetoothAddress(); app.Alert( addr ); } Copy Copy All Run
app/GetBluetoothName.htm := GetBluetoothName Back GetBluetoothName Hello World Returns the Bluetooth name of the device. app.GetBluetoothName() → String See Also: CreateBluetoothSerial Example - Show Bluetooth Name function OnStart() { var name = app.GetBluetoothName(); app.Alert( name ); } Copy Copy All Run
app/GetBtProfileState.htm := GetBtProfileState Back GetBtProfileState Hello World Returns the Bluetooth State of a given Bt connection type. app.GetBtProfileState( type ) → String: “Connected” or “Disconnected” See Also: CreateBluetoothSerial Example - Show Bluetooth Profile State function OnStart() { var states = "a2dp|headset|gatt|health".split( "|" ); var lst = []; for( var i in states ) { var state = app.GetBtProfileState( states[i] ); lst.push( states[i] + + ": " + state); } app.Alert( lst.join( "\n" ) ); } Copy Copy All Run
app/GetBuildNum.htm := GetBuildNum Back GetBuildNum Hello World GetBuildNum returns the build number of an APK. app.GetBuildNum() → Number: integer Example - Show build number function OnStart() { var num = app.GetBuildNum(); app.Alert( num ); } Copy Copy All Run
app/GetChargeType.htm := GetChargeType Back GetChargeType Hello World Returns the current charge type. app.GetChargeType() → String: “AC” or “USB” or “Wireless” or “None” If the device isn't charging the result is “None”. See Also: GetBatteryLevel, IsCharging Example - Show Charge Type function OnStart() { var type = app.GetChargeType(); app.Alert( type ); } Copy Copy All Run
app/GetClipboardText.htm := GetClipboardText Back GetClipboardText Hello World GetClipboardText returns text that was last copied to the clipboard. app.GetClipboardText() → String See Also: SetClipboardText Example - show latest clipboard text function OnStart() { var text = app.GetClipboardText(); app.Alert( text ); } Copy Copy All Run
app/GetCountry.htm := GetCountry Back GetCountry Hello World Returns the name of the device country (ie. app.GetCountry() → String “United Kingdom” or “Deutschland”) See Also: GetCountryCode, See Also: GetLanguage Example - Show Country function OnStart() { var name = app.GetCountry(); app.Alert( name ); } Copy Copy All Run
app/GetCountryCode.htm := GetCountryCode Back GetCountryCode Hello World Returns the code of the device country (ie. app.GetCountryCode() → String “GB” or “DE”) See Also: GetCountry, GetLanguageCode Example - Show Country Code function OnStart() { var code = app.GetCountryCode(); app.Alert( code ); } Copy Copy All Run
app/GetData.htm := GetData Back GetData Hello World Returns data stored via app.SetData(key, value). app.GetData( name ) → String All data will be lost when the app is closed. See Also: SetData Example - Get Saved Data function OnStart() { app.SetData( "myvar", "Hello World!" ); var data = app.GetData("myvar"); app.Alert( data, "Saved Data:" ); } Copy Copy All Run Example - Random Value function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); btn = app.AddButton( lay, "Press Me", 0.3, 0.1 ); btn.SetOnTouch( btn_OnTouch ); app.AddLayout( lay ); } function btn_OnTouch() { app.SetData( "number", 100 * Math.random() | 0 ); var data = app.GetData( "number" ); app.ShowPopup( "Data: " + data); } Copy Copy All Run
app/GetDatabaseFolder.htm := GetDatabaseFolder Back GetDatabaseFolder Hello World Returns the path to the database folder of the app. app.GetDatabaseFolder() → String: path to file or folder ( “/absolute/...” or “relative/...” ) An example pattern is “/data/data/packageName/databases”. See Also: OpenDatabase Example - Show function OnStart() { var dir = app.GetDatabaseFolder(); app.Alert( dir ); } Copy Copy All Run
app/GetDebug.htm := GetDebug Back GetDebug Hello World . app.GetDebug() → String: comma “,” separated: “console”, “ds”, “adb”, “all” The available modes are: “console”: allows console.log messages “ds”: allows app.Debug messages “adb”: allows adb debug messages (ie at apk startup) true: enable all debug messages false or “” : disable all debug messages See Also: Debug, SetDebug, IsDebugging Example function OnStart() { app.SetDebug("adb"); var switches = app.GetDebug(); app.Alert(switches); } Copy All Run
app/GetDefaultOrientation.htm := GetDefaultOrientation Back GetDefaultOrientation Hello World Returns the default Orientation of the device. app.GetDefaultOrientation() → String: “Portrait” or “Landscape” The result modes can be “Portrait” if the device width is smaller than the device height, or “Landscape” vice versa. See Also: SetOrientation, GetOrientation Example - Show Default Orientation function OnStart() { var orient = app.GetDefaultOrientation(); app.Alert( orient ); } Copy Copy All Run
app/GetDeviceId.htm := GetDeviceId Back GetDeviceId Hello World Returns the alphanumeric ID of the device which is different for each device. app.GetDeviceId() → String Example - Show Devide ID function OnStart() { var id = app.GetDeviceId(); app.Alert( id ); } Copy Copy All Run
app/GetDisplayHeight.htm := GetDisplayHeight Back GetDisplayHeight Hello World Get the display height of the app in pixels. app.GetDisplayHeight() → Number: pixel Therefore the android status bar and virtual buttons won't be included to the value. See Also: GetDisplayWidth, GetScreenHeight Example - Show display height function OnStart() { var height = app.GetDisplayHeight(); app.Alert( height ); } Copy Copy All Run
app/GetDisplayWidth.htm := GetDisplayWidth Back GetDisplayWidth Hello World Get the display width of the app in pixels. app.GetDisplayWidth() → Number: pixel Therefore virtual buttons won't be included to the value. See Also: GetDisplayHeight, GetScreenWidth Example - Show display width function OnStart() { var width = app.GetDisplayWidth(); app.Alert( width ); } Copy Copy All Run
app/GetDrawerState.htm := GetDrawerState Back GetDrawerState Hello World Returns the current drawer state of a drawer on a given side. app.GetDrawerState( side ) → String: “Open” or “Closed” See Also: OpenDrawer, CloseDrawer, AddDrawer Example function OnStart() { lay = app.CreateLayout( "Linear", "FillXY,VCenter,Left" ); btnOpen = app.CreateButton( "»", .1, .3, "gray" ); btnOpen.SetOnTouch( btn_OnTouch ); btnOpen.SetTextSize( 20 ); lay.AddChild( btnOpen ); app.AddLayout( lay ); layDrawer = app.CreateLayout( "Linear", "Horizontal,FillXY,VCenter,Right" ); layDrawer.SetBackground( "/Sys/Img/BlueBack.jpg" ); txt2 = app.CreateText( "Hello" ); txt2.SetTextSize( 40 ); layDrawer.AddChild( txt2 ); btnClose = app.CreateButton( "«", .1, .3, "gray" ); btnClose.SetOnTouch( btn_OnTouch ); btnClose.SetTextSize( 20 ); btnClose.SetMargins( .2 ); layDrawer.AddChild( btnClose ); app.AddDrawer( layDrawer, "left", 0.8 ); app.LockDrawer( "left" ); } function btn_OnTouch() { if(app.GetDrawerState("left") == "Closed") app.OpenDrawer( "left" ); else // "Open" app.CloseDrawer( "left" ); } Copy Copy All Run
app/GetDSVersion.htm := GetDSVersion Back GetDSVersion Hello World Returns the current DroidScript version number in the format 0.00. app.GetDSVersion() → Number: float Example - Show DroidScript Version function OnStart() { var ver = app.GetDSVersion(); app.Alert( ver ); } Copy Copy All Run
app/GetEnv.htm := GetEnv Back GetEnv Hello World Returns the value of an environment variable defined on the device. app.GetEnv( name ) → String Example - Show PATH environment variable function OnStart() { var envPath = app.GetEnv("PATH"); app.Alert( envPath ); } Copy Copy All Run
app/GetExternalFolder.htm := GetExternalFolder Back GetExternalFolder Hello World GetExternalFolder returns the path to the external micro sdcard of the device. app.GetExternalFolder() → String: path to file or folder ( “/absolute/...” or “relative/...” ) Normally it is something like “/storage/extsd” or “/storage/extSdCard” See Also: GetInternalFolder Example - Show External Folder function OnStart() { var dir = app.GetExternalFolder(); app.Alert( dir ); } Copy Copy All Run
app/GetFileDate.htm := GetFileDate Back GetFileDate Hello World GetFileDate returns a Date object containing the last modified date of a file or folder. app.GetFileDate( file ) → JavaScript object: Date Example - Show /sdcard/ last modifies date function OnStart() { var date = app.GetFileDate("/sdcard/"); app.Alert( date.toLocaleString() ); } Copy All Run
app/GetFileSize.htm := GetFileSize Back GetFileSize Hello World GetFileSize returns the size of a file or folder in bytes. app.GetFileSize( file ) → Number: float Example - Show /sdcard/ folder size function OnStart() { var size = app.GetFileSize( "/sdcard/" ); app.Alert( size / 1024 + " kB" ); } Copy All Run
app/GetFreeSpace.htm := GetFreeSpace Back GetFreeSpace Hello World Returns the free space of the internal or external storage in GigaBytes. app.GetFreeSpace( mode ) → Number: gigabytes Example - Show remaining internal and external storage function OnStart() { var intSize = Math.round(app.GetFreeSpace("internal") * 1024); var extSize = Math.round(app.GetFreeSpace("external") * 1024); var text = "internal: " + intSize + " MB\n" + "external: " + extSize + " MB"; app.Alert( text ); } Copy Copy All Run
app/GetInstalledApps.htm := GetInstalledApps Back GetInstalledApps Hello World Returns a list of objects containing informations about installed apps. app.GetInstalledApps() → List: [{ packageName, className, uid, targetSdkVersion, dataDir, sourceDir, publicSourceDir, nativeLibraryDir }] Note: This function is deprecated. Filters are applied since Android 11. Full functionality can be accessed in the X-Version of DS. See Android Package Visibility for more information. See Also: GetRunningApps, GetRunningServices Example - Show installed apps function OnStart() { app.ShowProgress(); var lay = app.CreateLayout( "linear" ); var list = app.GetInstalledApps(); lst = app.CreateList( "", 1, 1 ); lay.AddChild( lst ); for(var i in list) { var a = list[i]; lst.AddItem(a.packageName); } app.AddLayout(lay); app.HideProgress(); } Copy All Run
app/GetIntent.htm := GetIntent Back GetIntent Hello World Returns an intent object sent to the app. app.GetIntent() → Object: { action, type, data, flags, extras: { app_intent, app_file, app_options } } See Also: SendIntent Example - Get received intent data function OnStart() { var int = app.GetIntent(); app.Alert( JSON.stringify( int )); } Copy Copy All Run
app/GetInternalFolder.htm := GetInternalFolder Back GetInternalFolder Hello World Get devices internal “/sdcard/” path. app.GetInternalFolder() → String: path to file or folder ( “/absolute/...” or “relative/...” ) Normally it should be “/storage/emulated/legacy”. See Also: GetExternalFolder Example - Show Internal Storage Path function OnStart() { var dir = app.GetInternalFolder(); app.Alert( dir ); } Copy Copy All Run
app/GetIPAddress.htm := GetIPAddress Back GetIPAddress Hello World GetIPAddress returns the current network ip address. app.GetIPAddress() → String It should look like “0.0.0.0” which is the default value for disabled internet connection. The individual numbers can have values between 0 and 255. Example - Show Device IP function OnStart() { var ip = app.GetIPAddress(); app.Alert( ip ); } Copy All Run
app/GetJoystickName.htm := GetJoystickName Back GetJoystickName Hello World Returns the name of a conected joystick. app.GetJoystickName( id ) → String See Also: GetJoystickState Example - Show Joystick name on id 0 function OnStart() { name = app.GetJoystickName( 0 ); app.Alert( name ); } Copy Copy All Run
app/GetJoystickState.htm := GetJoystickState Back GetJoystickState Hello World Returns the state of a connected joystick. app.GetJoystickState( id, key ) → Number The key can have many values depending on the used controller. The axis-n keys are for different joystick x/y/z axes or the D-Pad - you will best try which key stands for which button with the attached example. See Also: GetJoystickName Example - Show States function OnStart() { lay = app.CreateLayout( "linear" ); txt = app.CreateText( "", 1, 1, "monospace,left,multiline" ); lay.AddChild( txt ); app.AddLayout( lay ); app.SetDebug( "console" ); app.Animate( ShowStates, 10 ); } function ShowStates() { var keys = "A|B|C|X|Y|Z|R1|L1|Up|Down|Left|Right|Start|ThumbLeft|ThumbRight|" + "axis-0|axis-1|axis-2|axis-3|axis-4|axis-5|axis-6|axis-7|axis-8|axis-9"; keys = keys.split("|"); var lst = []; for(var i in keys) { var state = app.GetJoystickState(0, keys[i]); lst.push(keys[i] + ": " + state); } txt.SetText( lst.join( "\n" ) ); } Copy Copy All Run
app/GetJoystickStates.htm := GetJoystickStates Back GetJoystickStates Hello World Returns an object with all keystates. app.GetJoystickStates( id ) → Object: { key: value } See Also: GetJoystickState
app/GetKeyboardHeight.htm := GetKeyboardHeight Back GetKeyboardHeight Hello World Returns the height of the device keyboard in pixels. app.GetKeyboardHeight() → Number: pixel Returns 0 if the keyboard is hidden. See Also: ShowKeyboard Example - Show Keyboard Height function OnStart() { lay = app.CreateLayout( "linear" ); txt = app.CreateText( "Keyboard Height: ", .8, -1, "left" ); lay.AddChild( txt ); edt = app.CreateTextEdit( "Hello World", .8, .4 ); lay.AddChild( edt ); app.SetOnShowKeyboard( OnKeyboardShow ); app.AddLayout( lay ); } function OnKeyboardShow() { var height = app.GetKeyboardHeight(); txt.SetText( "Keyboard Height: " + height + "px" ); } Copy Copy All Run
app/GetLanguage.htm := GetLanguage Back GetLanguage Hello World GetLanguage returns the name of the devices language (ie. “English” or “Deutsch”). app.GetLanguage() → String See Also: GetLanguageCode, GetCountry Example - Show User Language function OnStart() { var lang = app.GetLanguage(); app.Alert( lang ); } Copy Copy All Run
app/GetLanguageCode.htm := GetLanguageCode Back GetLanguageCode Hello World GetLanguageCode returns the user language code (ie. “en” or “de”). app.GetLanguageCode() → String See Also: GetLanguage, GetCountryCode Example - Show User Language Code function OnStart() { var code = app.GetLanguageCode(); app.Alert( code ); } Copy Copy All Run
app/GetMacAddress.htm := GetMacAddress Back GetMacAddress Hello World Returns the alphanumeric Media-Access-Control address of the device. app.GetMacAddress() → String Style should be “00:00:00:00:00:00”. The individual numbers can have hexadecimal values between 00 and FF. Example - Show MAC Address function OnStart() { var mac = app.GetMacAddress(); app.ShowPopup( mac ); } Copy Copy All Run
app/GetMediaFile.htm := GetMediaFile Back GetMediaFile Hello World Returns a file path to a unique media file matching the format “/storage/emulated/0/Pictures/[folder]/YYYYMMDD_hhmmSSsss[ext]”. app.GetMediaFile( folder, ext ) → String: path to file or folder ( “/absolute/...” or “relative/...” ) The folder for this file will be created automatically. See Also: CreateImage, CreateCameraView Example - Get Media File function OnStart() { var path = app.GetMediaFile("Hello World", ".png"); app.Alert( path ); } Copy Copy All Run
app/GetMemoryInfo.htm := GetMemoryInfo Back GetMemoryInfo Hello World Returns an object containing informations about the RAM memory. app.GetMemoryInfo() → Object: { avail, low, threshold, total } Example - Basic function OnStart() { var mem = app.GetMemoryInfo(); var s = JSON.stringify( mem ); app.Alert( s.replace( /,/g, ",\n ") ); } Copy Copy All Run Example - Show Memory function OnStart() { lay = app.CreateLayout( "linear", "fillxy,vcenter" ); txt = app.CreateText( "", .8, -1, "monospace,multiline" ); txt.SetTextSize( 25 ); lay.AddChild( txt ); app.AddLayout( lay ); app.Animate( ShowMemory, 2 ); } function ShowMemory() { var mem = app.GetMemoryInfo(); text = Math.round( mem.avail / 1024 ** 2 ) + "/" + Math.round( mem.total / 1024 ** 2 ) + " MB br> br>" + Math.round( 100 * mem.avail / mem.total ) + "%"; if( mem.low ) color = "red"; else color = "white"; txt.SetHtml( text.fontcolor( color )); } Copy All Run
app/GetMetadata.htm := GetMetadata Back GetMetadata Hello World Returns a string list of metadata values contained in an audio file. app.GetMetadata( file, keys ) → String: comma “,” separated See Also: CreateMediaPlayer Example - Retreive all Metadata function OnStart() { app.ChooseFile( "Choose an audio file", "audio/mpeg", OnChoose ); } function OnChoose( path ) { var keys = ( "album,artist,genre,title,composer," + "author,duration" ).split(","); var data = app.GetMetadata( path, keys ) data = data.slice(1).split(","); var lst = []; for(var i in keys) lst.push(keys[i] + ": " + data[i]); app.Alert( lst.join( "\n" ), path ); } Copy Copy All Run
app/GetModel.htm := GetModel Back GetModel Hello World Returns the model name of the device. app.GetModel() → String Example - Get Device Model function OnStart() { model = app.GetModel(); app.ShowPopup( model ); } Copy Copy All Run
app/GetName.htm := GetName Back GetName Hello World Returns the name of the APK application. app.GetName() → String meaning if your app runs in DroidScript, the name will be “DroidScript” as well. Example - Get app Name function OnStart() { name = app.GetName(); app.Alert( name ); } Copy Copy All Run
app/GetNotifyId.htm := GetNotifyId Back GetNotifyId Hello World If the app was started by a notification, this function will return the id of that notification. app.GetNotifyId() → String See Also: CreateNotification Example - Example function OnStart() { var id = app.GetNotifyId(); if( id ) app.Alert( id, "Notification ID" ); else { not = app.CreateNotification(); not.SetMessage( "You have an urgent notification", "Press me!", "Do as the title says." ); not.Notify( 1234 ); setTimeout( app.Exit, 2000 ); } } Copy Copy All Run
app/GetObjects.htm := GetObjects Back GetObjects Hello World Returns a map of DroidScript control objects with their id as key. app.GetObjects() → List: [ id: control ] Example - Show Types of all Objects function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); img = app.CreateImage( "/Sys/Img/Hello.png", 0.2, -1 ); lay.AddChild( img ); btn = app.CreateButton( "Get Objects", 0.3, 0.1 ); btn.SetMargins( 0, 0.05, 0, 0 ); btn.SetOnTouch( btn_OnTouch ); lay.AddChild( btn ); app.AddLayout( lay ); } function btn_OnTouch() { var objs = app.GetObjects(); var lst = []; for(var i in objs) lst.push( i + ": " + objs[i].GetType() ); app.Alert( lst.join( "\n" )); } Copy All Run
app/GetOptions.htm := GetOptions Back GetOptions Hello World Returns all current app settings. app.GetOptions() → String: comma “,” separated: “portrait”, “landscape”, “dark”, “light”, “holo”, “node”, “hybrid”, “mui”, “transparent”, “debug”, “remote”, “noswapify” If ran from inside DroidScript, “debug,remote,holo” is the default value. See Also: SetOptions Example - Show App Options cfg.No_Dom, cfg.Portrait; function OnStart() { var opt = app.GetOptions(); app.Alert( opt ); } Copy All Run
app/GetOrientation.htm := GetOrientation Back GetOrientation Hello World Returns the current device orientation. app.GetOrientation() → String: “Portrait” or “Landscape” The result modes can be “Portrait” if the device width is smaller than the device height, or “Landscape” vice versa. See Also: SetOrientation, GetDefaultOrientation, GetRotation Example - Example function OnStart() { orient = app.GetOrientation(); app.Alert( orient ); } Copy Copy All Run
app/GetOSVersion.htm := GetOSVersion Back GetOSVersion Hello World GetOSVersion returns the API target level of the android version. app.GetOSVersion() → Number: integer Example - Show Android API Level function OnStart() { version = app.GetOSVersion(); app.Alert( version ); } Copy Copy All Run
app/GetPackageName.htm := GetPackageName Back GetPackageName Hello World Returns the package name of the APK. app.GetPackageName() → String Example - Show Package Name function OnStart() { var pkg = app.GetPackageName(); app.Alert( pkg ); } Copy Copy All Run
app/GetPairedBtDevices.htm := GetPairedBtDevices Back GetPairedBtDevices Hello World Returns a list of objects containing the name and bluetooth address of paired devices. app.GetPairedBtDevices() → List: of objects: [{ name, address }] Note that Bluetooth must be turned on to receive this information. See Also: UnpairBtDevice, CreateBluetoothSerial, DiscoverBtDevices Example - Show var itv; function OnStart() { lay = app.CreateLayout( "linear", "fillxy,vcenter" ); lst = app.CreateList( "", .8, .8 ); lay.AddChild( lst ); app.AddLayout( lay ); if( !app.IsBluetoothEnabled() ) app.SetBluetoothEnabled( true ); itv = setInterval( checkBtOn, 200 ); } function checkBtOn() { if( app.IsBluetoothOn() ) { app.HideProgress(); clearInterval( itv ); var devices = app.GetPairedBtDevices(); for( var i in devices ) lst.AddItem( devices[i].name, devices[i].address ); } } Copy Copy All Run
app/GetPath.htm := GetPath Back GetPath Hello World Returns the path to the local storage folder of the APK. app.GetPath() → String: path to file or folder ( “/absolute/...” or “relative/...” ) See Also: GetAppPath, GetPrivateFolder Example - Show App Path function OnStart() { var path = app.GetPath(); app.Alert( path ); } Copy Copy All Run
app/GetPermission.htm := GetPermission Back GetPermission Hello World GetPermission accepts a list of 'dangerus' classified permissions and returns a list of ungranted permissions in the callback function, or in case of only “ExtSDCard” the path URI of the user-selected folder. app.GetPermission( type, callback ) See Also: CheckPermission RemovePermission ListPermissions Example - Get ExtSDCard Permission and User-Selected Path function OnStart() { var path = app.GetPermission( "extsdcard", OnPermission ); } function OnPermission( pathURI ) { app.Alert( pathURI ); } Copy Copy All Run function( ungranted )
app/GetPrivateFolder.htm := GetPrivateFolder Back GetPrivateFolder Hello World Returns the path to a folder located in the apps private space which is normally not accessible by other apps or the user himself. app.GetPrivateFolder( name, options ) → String: path to file or folder ( “/absolute/...” or “relative/...” ) See Also: GetAppPath, GetPath Example - Show function OnStart() { var path = app.GetPrivateFolder( "temp" ); app.Alert( path ); } Copy Copy All Run
app/GetResourceId.htm := GetResourceId Back GetResourceId Hello World Returns the id of a resource. app.GetResourceId( name, options ) → String See Also: LoadPlugin
app/GetRingerMode.htm := GetRingerMode Back GetRingerMode Hello World Returns the current ringer mode of the device which can be “Normal”, “Vibrate” or “Silent”. app.GetRingerMode() → String: “Normal” or “Vibrate” or “Silent” See Also: SetRingerMode Example - Show Current Ringer Mode function OnStart() { var mode = app.GetRingerMode(); app.Alert( mode ) } Copy Copy All Run
app/GetRotation.htm := GetRotation Back GetRotation Hello World Returns the current rotation of the device around it's Z-Axis in 90 degree steps. app.GetRotation() → Number: angle in degrees (0..360): 0 or 90 or 180 or 270 The values are relative to the initial orientation of the device on startup. See Also: GetOrientation Example - Repeatedly Show Rotation function OnStart() { app.Animate( ShowRotation, 2 ); } function ShowRotation() { var mode = app.GetRotation(); app.ShowPopup( mode ); } Copy Copy All Run Example - Show Rotation and switch Orientation cfg.Portrait; function OnStart() { app.Animate( ShowRotation, 2 ); setTimeout( 'app.SetOrientation("landscape")', 5000 ); } function ShowRotation() { var mode = app.GetRotation(); app.ShowPopup( mode ); } Copy Copy All Run
app/GetRouterAddress.htm := GetRouterAddress Back GetRouterAddress Hello World Returns the routers ip address. app.GetRouterAddress() → String: ip address (Its typically your own IP but ending with a .1, ie. 192.168.178.1) Example - Get Router Address function OnStart() { var ip = app.GetRouterAddress(); app.Alert(ip); } Copy All Run
app/GetRSSI.htm := GetRSSI Back GetRSSI Hello World Content: - Understanding RSSI Returns the current Received Signal Strength Indication which is a measurement of the power present in a received WiFi signal in dBm (decibel milliwatt). app.GetRSSI() → Number: integer: -127..-30 Understanding RSSI Signal Strength TL;DR Required for -30 dBm Amazing N/A -67 dBm Very Good VoIP/VoWiFi, streaming video -70 dBm Okay Email, web -80 dBm Not Good N/A -90 dBm Unusable N/A -127 dBm Disabled N/A source: metageek.com See Also: SetWifiEnabled, IsWifiEnabled Example - Show RSSI function OnStart() { app.Animate( ShowRSSI, 1); } function ShowRSSI() { var rssi = app.GetRSSI(); app.ShowPopup( rssi ); } Copy All Run
app/GetRunningApps.htm := GetRunningApps Back GetRunningApps Hello World Returns a list of objects containing info about all currently running apps in the fore- or background. app.GetRunningApps() → List: of objects: [{ user, pid, name, foreground }] Note: This function is deprecated. Filters are applied since Android 11. Full functionality can be accessed in the X-Version of DS. See Android Package Visibility for more information. See Also: GetRunningServices, GetInstalledApps Example - Show Running Apps function OnStart() { app.ShowProgress(); var lay = app.CreateLayout( "linear", "fillxy,vcenter" ); lst = app.CreateList( "", .9, .9 ); lst.SetTextSize1( 15 ); lay.AddChild( lst ); var list = app.GetRunningApps(); for( var i in list ) { var a = list[i]; var body = "user: " + a.user + "\npid: " + a.pid + "\nforeground: " + a.foreground; lst.AddItem( a.name, body ); } app.AddLayout( lay ); app.HideProgress(); } Copy Copy All Run Example - Is In Foreground function OnStart() { app.Animate(CheckForeground, 0.2); } function CheckForeground() { var apps = app.GetRunningApps(); var name = app.GetPackageName(); if(!app.IsAPK()) name += ":NewActivityProcess"; for(var i in apps) { if(apps[i].name == name) app.ShowPopup("In Foreground: " + apps[i].foreground); } } Copy All Run
app/GetRunningServices.htm := GetRunningServices Back GetRunningServices Hello World Returns a list of objects containing info about all currently running services in the background. app.GetRunningServices() → List: of objects: [{ user, pid, name }] Note: This function is deprecated. Filters are applied since Android 11. Full functionality can be accessed in the X-Version of DS. See Android Package Visibility for more information. See Also: GetRunningApps, GetInstalledApps Example - Show Running Services function OnStart() { app.ShowProgress(); var lay = app.CreateLayout( "linear", "fillxy,vcenter" ); lst = app.CreateList( "", .9, .9 ); lst.SetTextSize1( 15 ); lay.AddChild( lst ); var list = app.GetRunningServices(); for( var i in list ) { var a = list[i]; var body = "user: " + a.user + "\npid: " + a.pid; lst.AddItem( a.name, body ); } app.AddLayout( lay ); app.HideProgress(); } Copy Copy All Run
app/GetScreenDensity.htm := GetScreenDensity Back GetScreenDensity Hello World Returns the density of the device's screen. app.GetScreenDensity() → Number: integer See Also: GetScreenWidth, GetScreenHeight, SetDensity Example - Show Screen Density function OnStart() { var dens = app.GetScreenDensity(); app.Alert( dens ); } Copy Copy All Run
app/GetScreenHeight.htm := GetScreenHeight Back GetScreenHeight Hello World Returns the total screen height of the device in pixels. app.GetScreenHeight( options ) → Number: pixel With the 'Real' option softkeys will be included in the value. See Also: GetScreenWidth, GetScreenDensity Example - Show Screen Height function OnStart() { var height = app.GetScreenHeight(); app.Alert( height ); } Copy Copy All Run
app/GetScreenWidth.htm := GetScreenWidth Back GetScreenWidth Hello World Returns the total screen width of the device in pixels. app.GetScreenWidth( options ) → Number: pixel With the 'Real' option softkeys will be included in the value. See Also: GetScreenHeight, GetScreenDensity Example - Show Screen Width function OnStart() { var width = app.GetScreenWidth(); app.Alert( width ); } Copy Copy All Run
app/GetSharedFiles.htm := GetSharedFiles Back GetSharedFiles Hello World Returns a path list of files shared with the app. app.GetSharedFiles() → List: [ path ] If the results were retreived they can't be read an other time, unless they will be shared again. See Also: GetSharedText, SendFile, SendText Example - Show Shared Files function OnStart() { var files = app.GetSharedFiles(); if( files ) app.Alert( files.join( "\n" ) ); else app.ShowPopup( "No shared files received." ); } Copy Copy All Run
app/GetSharedText.htm := GetSharedText Back GetSharedText Hello World Returns the value of a shared text. app.GetSharedText() → String If the result is returned, it cannot be read another time unless it is shared again. See Also: GetSharedFiles, SendFile, SendText Example - Show Shared Text function OnStart() { var text = app.GetSharedText(); if( text ) app.Alert( text ); else app.ShowPopup( "No shared text received." ); } Copy Copy All Run
app/GetSpeakerPhone.htm := GetSpeakerPhone Back GetSpeakerPhone Hello World Checks if the speaker is enabled for phone calls. app.GetSpeakerPhone() → Boolean Returns false if no call is active. See also: SetSpeakerPhone. Example - Show if Speaker is Enabled function OnStart() { var speaker = app.GetSpeakerPhone(); app.Alert( speaker ); } Copy All Run
app/GetSpecialFolder.htm := GetSpecialFolder Back GetSpecialFolder Hello World Returns the full path to a special folder commonly used for images, videos, music etc. app.GetSpecialFolder( name ) → String: path to file or folder ( “/absolute/...” or “relative/...” ) See Also: GetPath, GetAppPath, WriteFile Example - Get Pictures folder function OnStart() { var fld = app.GetSpecialFolder( "Pictures" ); app.Alert( fld ); } Copy All Run
app/GetSpeechEngines.htm := GetSpeechEngines Back GetSpeechEngines Hello World Returns a list of installed tts engines. app.GetSpeechEngines() → List: [ engines ] See Also: TextToSpeech
app/GetSSID.htm := GetSSID Back GetSSID Hello World Returns the name (SSID) of the current network the user is connected with. app.GetSSID() → String If WiFi is disabled “” is returned. See Also: IsWifiEnabled, SetWifiEnabled, WifiConnect Example - Show SSID function OnStart() { var ssid = app.GetSSID(); app.Alert( ssid ); } Copy All Run
app/GetTextBounds.htm := GetTextBounds Back GetTextBounds Hello World Calculates text dimensions based on a specific control or with default settings. app.GetTextBounds( txt, size, width, obj ) → Object: { width, height }
app/GetThemeInfo.htm := GetThemeInfo Back GetThemeInfo Hello World Returns the configuration of the current theme. app.GetThemeInfo() → Object: { baseTheme, holo, dark, titleHeight, backColor, dialogColor, btnColor, dialogBtnColor, textColor1, textColor2, btnTextColor, highlightColor }
app/GetThumbnail.htm := GetThumbnail Back GetThumbnail Hello World Creates a downscaled copy of an existing image. app.GetThumbnail( source, destination, width, height ) Pass -1 as width or height to keep the aspect ratio. See Also: CreateImage Example - Create Thumbnail function OnStart() { lay = app.CreateLayout( "absolute" ); img = app.CreateImage( "/Sys/Img/Hello.png" ); lay.AddChild( img ); app.GetThumbnail( "/Sys/Img/Hello.png", "/sdcard/Hello_thmb.png", 100, -1 ); thmb = app.CreateImage( "/sdcard/Hello_thmb.png" ); lay.AddChild( thmb ); app.AddLayout( lay ); } Copy Copy All Run
app/GetTop.htm := GetTop Back GetTop Hello World Returns the upper border distance from the app display to the device screen as height relative float or in pixels with the px option. app.GetTop( options ) → Number: fraction (0..1) Example - GetTop function OnStart() { var top = app.GetTop(); app.Alert(top, "Top"); } Copy All Run
app/GetType.htm := GetType Back GetType Hello World Returns the object class name. app.GetType() → String: “App” Example - GetType function OnStart() { var type = app.GetType(); app.Alert( type, "Type" ); } Copy Copy All Run
app/GetUser.htm := GetUser Back GetUser Hello World Returns the email-address of the currently active user account. app.GetUser() → String: account Email See Also: GetAccounts Example - Show App Path function OnStart() { var usr = app.GetPath(); app.Alert( usr, "Active User:" ); } Copy Copy All Run
app/GetVersion.htm := GetVersion Back GetVersion Hello World Returns the app version number of the currently running apk. app.GetVersion() → Number Example - Show App Version function OnStart() { var version = app.GetVersion(); app.Alert( version, "App Version:" ); } Copy Copy All Run
app/GetVolume.htm := GetVolume Back GetVolume Hello World Returns the volume level of a given audio type as a number between 0 and 1. app.GetVolume( stream ) → Number: fraction (0..1) By default the “System” volume is returned. See Also: SetVolume Example - Get System Volume function OnStart() { var vol = app.GetVolume(); app.Alert( vol, "System Volume:" ); } Copy Copy All Run
app/GoToSleep.htm := GoToSleep Back GoToSleep Hello World Forces the screen to turn off and puts the device to sleep. app.GoToSleep() (This has the same effect as pressing the power button) See Also: WakeUp Example - Sleep and Wake function OnStart() { app.GoToSleep(); setTimeout("app.WakeUp()", 5000) } Copy Copy All Run
app/HasSoftNav.htm := HasSoftNav Back HasSoftNav Hello World Checks if the device has a soft navigation bar on the screen. app.HasSoftNav() → Boolean Example - Check Softkeys function OnStart() { var hasSoftNav = app.HasSoftNav(); app.Alert( hasSoftNav, "Has Soft Keys:" ); } Copy Copy All Run
app/Hide.htm := Hide Back Hide Hello World Hides the main app layout in order to save performance when (re)creating controls. app.Hide() See Also: Show
app/HideKeyboard.htm := HideKeyboard Back HideKeyboard Hello World Hides the device keyboard if it is currently shown. app.HideKeyboard() See Also: ShowKeyboard, SetOnShowKeyboard Example - Toggle Keyboard function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); tgl = app.CreateToggle( "Keyboard", 0.3, 0.1 ); tgl.SetOnTouch( tgl_OnTouch ); lay.AddChild( tgl ); edt = app.CreateTextEdit( "Text", .8, .1 ); edt.Focus(); lay.AddChild(edt); app.AddLayout( lay ); } function tgl_OnTouch( show ) { if( show ) app.ShowKeyboard( edt ); else app.HideKeyboard(); } Copy Copy All Run
app/HideProgress.htm := HideProgress Back HideProgress Hello World Hides a previously shown progress indicator. app.HideProgress() See also ShowProgress. Example - Show and Hide Progress function OnStart() { app.ShowProgress( "Loading..." ); setTimeout( "app.HideProgress()", 3000 ); } Copy Copy All Run
app/HideProgressBar.htm := HideProgressBar Back HideProgressBar Hello World Hides a previously shown progress bar dialog. app.HideProgressBar() See also ShowProgressBar, UpdateProgressBar. Example - Progress Bar function OnStart() { app.ShowProgressBar( "Loading..." ); for( prog = 0; prog 100; prog++ ) app.UpdateProgressBar( prog ); app.HideProgressBar(); } Copy Copy All Run
app/HttpRequest.htm := HttpRequest Back HttpRequest Hello World HttpRequest sends a request to a server. app.HttpRequest( type, baseUrl, path, params, callback, headers ) baseUrl and path will just be added to one string to get the address. Multiple parameters are available using pipes: “param1=value1|param2=value2” Example - Get Funfact var address = "http://www.randomfunfacts.com"; app.HttpRequest( "GET", address, null, null, handleReply ); function handleReply( error, reply ) { if( error ) alert( reply ); else { var funfact = reply.slice( reply.indexOf(" i>") + 3, reply.indexOf(" /i>") ); alert( funfact ); } } Copy Copy All Run function( error, reply, status )
app/InIDE.htm := InIDE Back InIDE Hello World In ide. app.InIDE() → Boolean Example - Check IDE function OnStart() { var inIDE = app.InIDE(); app.Alert( inIDE, "Is in IDE:" ); } Copy Copy All Run
app/InstallApp.htm := InstallApp Back InstallApp Hello World Starts the installation process of an apk file from your local drive. app.InstallApp( apkFile, callback, options ) → Boolean function( packageName, status )
app/IsAPK.htm := IsAPK Back IsAPK Hello World Returns whether current app is an APK or not (case not it's a DroidScript Project). app.IsAPK() → Boolean Example - Check APK function OnStart() { var isAPK = app.IsAPK(); app.Alert( isAPK, "is APK:" ); } Copy Copy All Run
app/IsAppInstalled.htm := IsAppInstalled Back IsAppInstalled Hello World Checks if an app given by a package name is installed. app.IsAppInstalled( packageName ) → Boolean See also: GetPackageName, GetInstalledApps Example - Check App Installed function OnStart() { var pkg = app.GetPackageName(); var isInstalled = app.IsAppInstalled( pkg ); app.Alert( isInstalled, pkg + " installed:" ); } Copy Copy All Run
app/IsBluetoothEnabled.htm := IsBluetoothEnabled Back IsBluetoothEnabled Hello World Return whether bluetooth was enabled. app.IsBluetoothEnabled() → Boolean See Also: SetBluetoothEnabled Example - Check Bluetooth Status function OnStart() { var status = app.IsBluetoothEnabled() var state = app.IsBluetoothOn(); app.ShowPopup( "Bluetooth is " + (status ? "enabled" : "disabled") + (status == state ? " and " : " but ") + (state ? "on" : "off") ); } Copy Copy All Run
app/IsBluetoothOn.htm := IsBluetoothOn Back IsBluetoothOn Hello World Checks if bluetooth is enabled and on. app.IsBluetoothOn() → Boolean See Also: CreateBluetoothSerial, DiscoverBtDevices Example - Check Bluetooth Status function OnStart() { var status = app.IsBluetoothEnabled() var state = app.IsBluetoothOn(); app.ShowPopup( "Bluetooth is " + (status ? "enabled" : "disabled") + (status == state ? " and " : " but ") + (state ? "on" : "off") ); } Copy Copy All Run
app/IsBtDevicePaired.htm := IsBtDevicePaired Back IsBtDevicePaired Hello World Checks if a given bluetooth device was paired with the user device. app.IsBtDevicePaired( name ) → Boolean See Also: GetPairedBtDevices, UnpairBtDevice Example - Check Paired function OnStart() { app.ShowProgress( "enabling Bluetooth" ); app.SetBluetoothEnabled( true ); while( !app.IsBluetoothOn() ) app.Wait( 0.2 ); app.HideProgress(); if( devices.length ) { paired = app.IsBtDevicePaired( devices[0].name ); app.Alert( paired, devices[0].name + " paired" ); } else app.ShowPopup( "No Paired devices found" ); } Copy Copy All Run Example - Check Paired from Available function OnStart() { app.ShowProgress( "enabling Bluetooth" ); app.SetBluetoothEnabled( true ); while( !app.IsBluetoothOn() ) app.Wait( 0.2 ); app.HideProgress(); app.DiscoverBtDevices( "", bt_OnFound, bt_OnComplete ); app.ShowProgress( "Discovering bt devices" ); } function bt_OnFound( name, address ) { var paired = app.IsBtDevicePaired( name ); app.ShowPopup( name + ": paired: " + paired ); } function bt_OnComplete() { app.HideProgress(); } Copy Copy All Run Example - Pairing and Unpairing bluetooth devices function OnStart() { app.ShowProgress( "enabling Bluetooth" ); app.SetBluetoothEnabled( true ); while( !app.IsBluetoothOn() ) app.Wait( 0.2 ); app.HideProgress(); app.DiscoverBtDevices( "", bt_OnFound, bt_OnComplete ); app.ShowProgress( "Discovering bt devices" ); lay = app.CreateLayout( "linear" ); lst = app.CreateList( "", 1, 1, "fontawesome" ); lst.SetOnTouch( pair ); lay.AddChild( lst ); app.AddLayout( lay ); } function bt_OnFound( name, address ) { var image = ""; if( app.IsBtDevicePaired( name )) image = "[fa-bluetooth]"; lst.AddItem( name, address, image ); } function bt_OnComplete() { app.HideProgress(); } function pair( name, address ) { if(!app.IsBtDevicePaired( name )) { app.ShowProgress( "Pairing " + name ); app.PairBtDevice( address, OnPair ); lst.SetItem( name, name, address, ""); } else { app.ShowProgress( "Unpairing " + name ); app.UnpairBtDevice( address, OnUnpair ); lst.SetItem( name, name, address, ""); } } function OnPair( name, address ) { app.Alert( name + " " + address, "Pairing successful!" ); } function OnUnpair() { app.Alert( name + " " + address, "Unpairing successful!" ); } Copy All Run
app/IsCharging.htm := IsCharging Back IsCharging Hello World Checks if phone is currently charging or not. app.IsCharging() → Boolean See Also: GetBatteryLevel, GetChargeType Example - Check Charging State function OnStart() { var charging = app.IsCharging(); app.Alert( charging, "is charging:" ); } Copy Copy All Run
app/IsChrome.htm := IsChrome Back IsChrome Hello World Checks if the device is running on ChromeOS. app.IsChrome() → Boolean See Also: IsTablet Example - Check APK function OnStart() { var isChrome = app.IsChrome(); app.Alert( isChrome, "is Chrome:" ); } Copy Copy All Run
app/IsConnected.htm := IsConnected Back IsConnected Hello World Checks if the device is connected to any network. app.IsConnected() → Boolean See Also: SetWifiEnabled, WifiConnect, SetOnWifiChange Example - Check Connected function OnStart() { var isConnected = app.IsConnected(); app.Alert( isConnected, "is Connected:" ); } Copy Copy All Run
app/IsDebugging.htm := IsDebugging Back IsDebugging Hello World Checks if the app is currently debugging. app.IsDebugging() → Boolean See also SetDebug, Debug Example - Check Debugging function OnStart() { var isDbg = app.IsDebugging(); app.Alert( isDbg, "now debugging:" ); } Copy Copy All Run
app/IsDebugVisible.htm := IsDebugVisible Back IsDebugVisible Hello World Returns if the debug view is currently visible to the user. app.IsDebugVisible() → Boolean See Also: Debug, ShowDebug Example - Toggle Debug function OnStart() { app.CreateDebug(); lay = app.CreateLayout( "linear", "VCenter,FillXY" ); tgl = app.CreateToggle( "WiFi Access Point", -1, 0.1 ); tgl.SetOnTouch( ShowDebug ); tgl.SetChecked( true ); lay.AddChild( tgl ); app.AddLayout( lay ); } function ShowDebug( show ) { app.ShowDebug( show ); var vis = app.IsDebugVisible(); app.ShowPopup( vis ); } Copy Copy All Run
app/IsFolder.htm := IsFolder Back IsFolder Hello World Checks if the passed fs path leads to a folder. app.IsFolder( folder ) → Boolean See Also: FolderExists, FileExists Example - Check /sdcard/ available function OnStart() { var isFolder = app.IsFolder("/sdcard/"); app.Alert( isFolder, "/sdcard/ is Folder:" ); } Copy Copy All Run
app/IsKeyboardShown.htm := IsKeyboardShown Back IsKeyboardShown Hello World Checks if the device keyboard is currently visible or not. app.IsKeyboardShown() → Boolean See Also: ShowKeyboard, HideKeyboard Example - Is Keyboard Shown function OnStart() { var kbShown = app.IsKeyboardShown(); app.Alert( kbShown, "Is Keyboard Shown:" ); } Copy Copy All Run
app/IsLocationEnabled.htm := IsLocationEnabled Back IsLocationEnabled Hello World Checks if a specific location mode was enabled. app.IsLocationEnabled( mode ) → Boolean See Also: CreateLocator Example - Check Locatoin Enabled function OnStart() { var locEnabled = app.IsLocationEnabled(); app.Alert( locEnabled, "Location Enabled:" ); } Copy Copy All Run
app/IsNavBarOnRight.htm := IsNavBarOnRight Back IsNavBarOnRight Hello World Checks if the Navigation Bar is on the righthand side of the display. app.IsNavBarOnRight() → Boolean Example - Check NavBar is on the Dark Side function OnStart() { var navOnRight = app.IsNavBarOnRight(); app.Alert( navOnRight, "NavBar on right" ); } Copy Copy All Run
app/IsNewVersion.htm := IsNewVersion Back IsNewVersion Hello World Checks if the apk version number increased compared to the last time started. app.IsNewVersion() → Boolean Example - Check Version Number increased function OnStart() { var newVersion = app.IsNewVersion(); app.Alert( newVersion, "Is new version:" ); } Copy Copy All Run
app/IsPortrait.htm := IsPortrait Back IsPortrait Hello World Checks if the device is in portrait mode. app.IsPortrait() → Boolean Example - Check Portrait function OnStart() { var isPortrait = app.IsPortrait(); app.Alert( isPortrait, "is Portrait:" ); } Copy Copy All Run
app/IsPremium.htm := IsPremium Back IsPremium Hello World Checks if the user has a DroidScript premium subscription inside the IDE. app.IsPremium() → Boolean Example - Check Premium subscription function OnStart() { var premium = app.IsPremium(); app.Alert( premium, "IsPremium" ); } Copy Copy All Run
app/IsScoped.htm := IsScoped Back IsScoped Hello World Indicates 'scoped storage' on Android 10+. app.IsScoped() → Boolean
app/IsScreenOn.htm := IsScreenOn Back IsScreenOn Hello World Checks if the device screen is currently on. app.IsScreenOn() → Boolean Example - Check Screen On function OnStart() { app.ShowPopup( "You may now disable your screen." ) setTimeout( checkScreenOn, 5000 ); } function checkScreenOn() { screenOn = app.IsScreenOn(); app.ShowPopup( screenOn, "Screen On:" ); } Copy Copy All Run
app/IsService.htm := IsService Back IsService Hello World Checks if the currently running app instance is a service. app.IsService() → Boolean Example - Check if App is Service function OnStart() { var isSvc = app.IsService(); app.Alert( isSvc, "IsService" ); } Copy Copy All Run
app/IsStarted.htm := IsStarted Back IsStarted Hello World Checks if the app has finished loading. app.IsStarted() → Boolean It will return true after OnStart has returned. Example - Check Started setTimeout('app.Alert( app.IsStarted(), "Started in global:" );'); function OnStart() { var started = app.IsStarted(); app.Alert( started, "Started in OnStart:" ); } Copy Copy All Run
app/IsTablet.htm := IsTablet Back IsTablet Hello World Checks if the user device is a tablet. app.IsTablet() → Boolean See Also: IsChrome Example - Check Tablet function OnStart() { tablet = app.IsTablet(); app.ShowPopup( tablet, "Is Tablet:" ); } Copy Copy All Run
app/IsTV.htm := IsTV Back IsTV Hello World Checks if the OS is AndroidThings. app.IsTV() → Boolean See Also: IsTablet, IsChrome
app/IsWifiApEnabled.htm := IsWifiApEnabled Back IsWifiApEnabled Hello World Checks if the mobile Wifi Access Point is enabled on the user device. app.IsWifiApEnabled() → Boolean See Also: SetWifiApEnabled Example - Check WifiAccessPoint Enabled function OnStart() { var wapEnabled = app.IsWifiApEnabled(); app.Alert( wapEnabled, "Wifi Access Point Enabled:" ); } Copy Copy All Run
app/IsWifiEnabled.htm := IsWifiEnabled Back IsWifiEnabled Hello World Checks if Wifi is enabled on the user device. app.IsWifiEnabled() → Boolean See Also: SetWifiEnabled, SetOnWifiChange, IsWifiApEnabled Example - Check Wifi Enabled function OnStart() { var wifiEnabled = app.IsWifiEnabled(); app.Alert( wifiEnabled, "Wifi Enabled:" ); } Copy Copy All Run
app/KillApp.htm := KillApp Back KillApp Hello World Kills a running app by its process ID. app.KillApp( pid ) You can retreive a list of all running apps with their pids using the GetRunningApps function of the app object. Example - Demo function OnStart() { var apps = app.GetRunningApps(); var curApps = apps.filter( function(v) { return v.foreground; }); var pid = curApps[0].pid; alert( "Kill app " + curApps[0].name ); app.KillApp( pid ); app.ShowPopup( "Done" ); // not shown } Copy Copy All Run
app/LaunchApp.htm := LaunchApp Back LaunchApp Hello World Launches an app if installed or search for it on GooglePlay otherwise. app.LaunchApp( packageName, noPlay )
app/ListFolder.htm := ListFolder Back ListFolder Hello World The ListFolder method returns a list of all files and folders in a given folder. app.ListFolder( path, filter, limit, options ) → List: [ paths ] The filter parameter is an can be used to specify a filter pattern. For example to find only mp3 files, you would specify “.mp3” as a filter The You can also optionally sort the list in alphabetica order with the “alphasort” option. See Also: WalkFolder, IsFolder, CreateList Example - List home directory function OnStart() { var list = app.ListFolder( "/sdcard/" ); ldg = app.CreateListDialog( "/sdcard/*", list ); ldg.Show(); } Copy Copy All Run Example - List .jpg assets function OnStart() { var list = app.ListFolder( "/Sys/Img", ".jpg" ); ldg = app.CreateListDialog( "/Sys/Img/*.jpg", list ); ldg.Show(); } Copy Copy All Run
app/ListPermissions.htm := ListPermissions Back ListPermissions Hello World Returns a list of granted permissions See Also: GetPermission CheckPermission RemovePermission. app.ListPermissions( type ) → List: [ perm] Example - List Permissions function OnStart(perms) { var perms = app.ListPermissions("storage"); app.Alert(perms, "Permissions:"); } Copy All Run
app/LoadBoolean.htm := LoadBoolean Back LoadBoolean Hello World Load a saved boolean value to remember varibale values between multiple app starts. app.LoadBoolean( name, default, file ) → Boolean See also: SaveBoolean. Example - Detect First Start var file = "demofile"; function OnStart() { var first = app.LoadBoolean( "first", true, file ); if(first) app.ShowPopup( "You ran this demo for the first time!" ); else app.ShowPopup( "This is not the first time you have run this demo." ); app.SaveBoolean( "first", false, file ); } Copy Copy All Run
app/LoadJson.htm := LoadJson Back LoadJson Hello World Load a saved json object to remember varibale values between multiple app starts. app.LoadJson( name, default, file ) → Object See also: SaveNumber.
app/LoadNumber.htm := LoadNumber Back LoadNumber Hello World Load a saved number value to remember varibale values between multiple app starts. app.LoadNumber( name, default, file ) → Number See also: SaveNumber. Example - Click Counter var clicks = 0, file = "demofile"; function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); clicks = app.LoadNumber( "clicks", 0, file ); btn = app.CreateButton( "Click Me", 0.5, 0.1 ); btn.SetOnTouch( btn_OnTouch ); lay.AddChild( btn ); app.AddLayout( lay ); } function btn_OnTouch() { app.SaveNumber( "clicks", ++clicks, file ); app.ShowPopup( "Clicks: " + clicks ); } Copy Copy All Run
app/LoadPlugin.htm := LoadPlugin Back LoadPlugin Hello World Import an installed plugin to your app. app.LoadPlugin( url ) You can download plugins from DroidScript's plugin page, Google Playstore or you can create self-written plugins. You can find instructions on how to create plugins on DroidScript.org) or on my BlogSpot page.
app/LoadScript.htm := LoadScript Back LoadScript Hello World Loads a local JavaScript file asynchronously to your app to make its functionality available in your app. app.LoadScript( path, callback ) See Also: Script Example - Compute the Answer to the Ultimate Question of Life, the Universe, and Everything var scriptJS = ` var num = 7; function computeNum() { return 6 * num; } `; function OnStart() { app.WriteFile( "script.js", scriptJS ) app.LoadScript( "script.js", OnLoad ); } function OnLoad() { app.ShowPopup( "script.js loaded." ); app.Alert( computeNum(), "computed number: " ); } Copy Copy All Run function( info )
app/LoadText.htm := LoadText Back LoadText Hello World Load saved text value to remember varibale values between multiple app starts. app.LoadText( name, default, file ) See also: SaveText. Example - Load Saved Text var file = "demofile"; function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); var text = app.LoadText( "value", "My Value", file ); edtValue = app.CreateTextEdit( text, .5 ); lay.AddChild( edtValue ); btnSave = app.CreateButton( "Save Value", 0.5, 0.1 ); btnSave.SetOnTouch( btnSave_OnTouch ); lay.AddChild( btnSave ); btnLoad = app.CreateButton( "Load Value", 0.5, 0.1 ); btnLoad.SetOnTouch( btnLoad_OnTouch ); lay.AddChild( btnLoad ); app.AddLayout( lay ); } function btnSave_OnTouch() { app.SaveText( "value", edtValue.GetText(), file ); app.ShowPopup( "Value Saved." ); } function btnLoad_OnTouch() { var value = app.LoadText( "value", "no value stored", file ); app.ShowPopup( value ); } Copy Copy All Run
app/Lock.htm := Lock Back Lock Hello World Locks the device. app.Lock() Requires Root See Also: Unlock Example - Demo function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY,touchspy" ); btn = app.CreateButton( "Disable", 0.3, 0.1 ); btn.SetOnTouch( btn_OnTouch ); lay.AddChild( btn ); app.AddLayout( lay ); } function btn_OnTouch() { app.Lock(); app.ShowPopup( "Locked" ); } Copy All Run
app/LockDrawer.htm := LockDrawer Back LockDrawer Hello World Make drawer on a specific side unaccessible for the app and the user, hiding it if necessary. app.LockDrawer( side ) You can only unlock it using the UnlockDrawer method. See Also: AddDrawer Example - Basic function OnStart() { lay = app.CreateLayout( "Linear", "FillXY,VCenter" ); tgl = app.CreateToggle( "Locked", -1, -1, "fontawesome" ); tgl.SetPadding( .1, .05, .1, .05 ); tgl.SetOnTouch( OnLockChange ); tgl.SetTextSize( 30 ); lay.AddChild( tgl ); app.AddLayout( lay ); layDrawer = app.CreateLayout( "Linear", "FillXY,VCenter" ); layDrawer.SetBackground( "/Sys/Img/BlueBack.jpg" ); app.AddDrawer( layDrawer, "left", 0.8 ); } function OnLockChange( lock ) { if( lock ) app.LockDrawer( "left" ); else app.UnlockDrawer( "left" ); } Copy Copy All Run Example - Open and Close Drawer via Button function OnStart() { lay = app.CreateLayout( "Linear", "FillXY,VCenter,Left" ); btnOpen = app.CreateButton( "»", .1, .3, "gray" ); btnOpen.SetOnTouch( btn_OnTouch ); btnOpen.SetTextSize( 20 ); lay.AddChild( btnOpen ); app.AddLayout( lay ); layDrawer = app.CreateLayout( "Linear", "Horizontal,FillXY,VCenter,Right" ); layDrawer.SetBackground( "/Sys/Img/BlueBack.jpg" ); txt2 = app.CreateText( "Hello" ); txt2.SetTextSize( 40 ); layDrawer.AddChild( txt2 ); btnClose = app.CreateButton( "«", .1, .3, "gray" ); btnClose.SetOnTouch( btn_OnTouch ); btnClose.SetTextSize( 20 ); btnClose.SetMargins( .2 ); layDrawer.AddChild( btnClose ); app.AddDrawer( layDrawer, "left", 0.8 ); app.LockDrawer( "left" ); } function btn_OnTouch() { if(app.GetDrawerState("left") == "Closed") app.OpenDrawer( "left" ); else // "Open" app.CloseDrawer( "left" ); } Copy Copy All Run
app/MakeFolder.htm := MakeFolder Back MakeFolder Hello World Creates a new folder in the local filesystem recursively. app.MakeFolder( folder ) See Also: FolderExists Example - Create folder function OnStart() { app.MakeFolder("myFolder"); if(app.FolderExists("myFolder")) app.ShowPopup("myFolder exists!"); else app.ShowPopup("myFolder does not exist!"); } Copy Copy All Run
app/OpenDatabase.htm := OpenDatabase Back OpenDatabase Hello World Content: - Methods OpenDatabase creates or opens a local database in which large amounts of data can be stored that can still be queried in a reasonable amount of time. db = app.OpenDatabase( name ) → app object: Database Methods The following methods are available on the Database object: addTransaction( transaction ) close( success, error ) Close() Delete() executeSql( statement, params, success, error ) ExecuteSql( sql, params, success, error ) GetName() → String GetType() → String: “Database” name → String open( success, error ) readTransaction( fn, error, success ) startNextTransaction() transaction( fn, error, success ) function( msg ) function( tx, res ) function( t, err ) function( res ) function( err ) function( tx ) function( fnc, res )
app/OpenDrawer.htm := OpenDrawer Back OpenDrawer Hello World Opens the drawer layout on the given side with slide animation. app.OpenDrawer( side ) See Also: AddDrawer Example - Open and Close Drawer via Button function OnStart() { lay = app.CreateLayout( "Linear", "FillXY,VCenter,Left" ); btnOpen = app.CreateButton( "»", .1, .3, "gray" ); btnOpen.SetOnTouch( btn_OnTouch ); btnOpen.SetTextSize( 20 ); lay.AddChild( btnOpen ); app.AddLayout( lay ); layDrawer = app.CreateLayout( "Linear", "Horizontal,FillXY,VCenter,Right" ); layDrawer.SetBackground( "/Sys/Img/BlueBack.jpg" ); txt2 = app.CreateText( "Hello" ); txt2.SetTextSize( 40 ); layDrawer.AddChild( txt2 ); btnClose = app.CreateButton( "«", .1, .3, "gray" ); btnClose.SetOnTouch( btn_OnTouch ); btnClose.SetTextSize( 20 ); btnClose.SetMargins( .2 ); layDrawer.AddChild( btnClose ); app.AddDrawer( layDrawer, "left", 0.8 ); app.LockDrawer( "left" ); } function btn_OnTouch() { if(app.GetDrawerState("left") == "Closed") app.OpenDrawer( "left" ); else // "Open" app.CloseDrawer( "left" ); } Copy Copy All Run
app/OpenFile.htm := OpenFile Back OpenFile Hello World Allows the user to open a file with an external application on the device. app.OpenFile( file, type, choose ) The choose parameter shows the user a custom message in the choose dialog. See also: SendFile. Example - Example function OnStart() { app.WriteFile( "/sdcard/test.txt", "Hello" ); app.OpenFile( "/sdcard/test.txt", "text/plain", "Choose Editor" ); } Copy Copy All Run
app/OpenUrl.htm := OpenUrl Back OpenUrl Hello World Allows the user to open an url with an external application on the device. app.OpenUrl( url, type, choose ) The choose parameter shows the user a custom message in the choose dialog. See Also: CreateWebView, OpenFile Example - Example function OnStart() { app.OpenUrl( "http://droidscript.org" ); } Copy Copy All Run
app/PairBtDevice.htm := PairBtDevice Back PairBtDevice Hello World Pairs a bluetooth device with yours. app.PairBtDevice( address, callback ) See Also: GetPairedBtDevices, IsBtDevicePaired, DiscoverBtDevices Example - Pairing and Unpairing bluetooth devices function OnStart() { app.ShowProgress( "enabling Bluetooth" ); app.SetBluetoothEnabled( true ); while( !app.IsBluetoothOn() ) app.Wait( 0.2 ); app.HideProgress(); app.DiscoverBtDevices( "", bt_OnFound, bt_OnComplete ); app.ShowProgress( "Discovering bt devices" ); lay = app.CreateLayout( "linear" ); lst = app.CreateList( "", 1, 1, "fontawesome" ); lst.SetOnTouch( pair ); lay.AddChild( lst ); app.AddLayout( lay ); } function bt_OnFound( name, address ) { var image = ""; if( app.IsBtDevicePaired( name )) image = "[fa-bluetooth]"; lst.AddItem( name, address, image ); } function bt_OnComplete() { app.HideProgress(); } function pair( name, address ) { if(!app.IsBtDevicePaired( name )) { app.ShowProgress( "Pairing " + name ); app.PairBtDevice( address, OnPair ); lst.SetItem( name, name, address, ""); } else { app.ShowProgress( "Unpairing " + name ); app.UnpairBtDevice( address, OnUnpair ); lst.SetItem( name, name, address, ""); } } function OnPair( name, address ) { app.Alert( name + " " + address, "Pairing successful!" ); } function OnUnpair() { app.Alert( name + " " + address, "Unpairing successful!" ); } Copy All Run
app/Path2Uri.htm := Path2Uri Back Path2Uri Hello World Returns a content:// path for images and videos. app.Path2Uri( path ) → String: file path or content:// uri: “content://[uri]”
app/PinScreen.htm := PinScreen Back PinScreen Hello World Pins the app on the screen. app.PinScreen( enable )
app/PlayRingtone.htm := PlayRingtone Back PlayRingtone Hello World Play a specific ringtone type based on the users device settings for ringtones. app.PlayRingtone( type ) Type can be “Alarm”, “Notification” or “Ringtone”. Example - Play Notification Sound function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); btn = app.CreateButton( "Press Me", 0.3, 0.1 ); btn.SetOnTouch( btn_OnTouch ); lay.AddChild( btn ); app.AddLayout( lay ); } function btn_OnTouch() { app.PlayRingtone("Notification"); } Copy All Run
app/PlaySound.htm := PlaySound Back PlaySound Hello World Plays a sound file stored remotely or on the local filesystem. app.PlaySound( file ) See Also: CreateMediaPlayer Example - Play Local Sound File function OnStart(){ lay = app.CreateLayout( "linear", "VCenter,FillXY" ); btn = app.CreateButton( "Press Me", 0.3, 0.1 ); btn.SetOnTouch( btn_OnTouch ); lay.AddChild( btn ); app.AddLayout( lay ); } function btn_OnTouch() { app.PlaySound( "/Sys/Snd/Trill.ogg" ); } Copy Copy All Run Example - Play Remote Sound File function OnStart(){ lay = app.CreateLayout( "linear", "VCenter,FillXY" ); btn = app.CreateButton( "Press Me", 0.3, 0.1 ); btn.SetOnTouch( btn_OnTouch ); lay.AddChild( btn ); app.AddLayout( lay ); } function btn_OnTouch() { app.PlaySound( "https://sgarman.net/silly.mp3" ); } Copy Copy All Run
app/PreventScreenLock.htm := PreventScreenLock Back PreventScreenLock Hello World The PreventScreenLock method prevents the device screen from dimming and locking while your app is in the foreground. app.PreventScreenLock( mode ) Example - Example function OnStart() { app.PreventScreenLock( true ); } Copy Copy All Run
app/PreventWifiSleep.htm := PreventWifiSleep Back PreventWifiSleep Hello World Prevent the device WiFi from powering down. app.PreventWifiSleep() See Also: SetWifiEnabled, IsWifiEnabled Example - Example function OnStart() { app.PreventWifiSleep(); } Copy Copy All Run
app/QueryContent.htm := QueryContent Back QueryContent Hello World Queries content from the android content model. app.QueryContent( uri, columns, select, args, sort ) The uri typically have the syntax “content://authority/path/id”. You can find more infos about it on the Android Developer page. The coloumns are specific for the database you are accessing. You can get this information from the respective content provider. select is a optional sql command to filter the results. args is an optional parameter for arguments you want to include to the sql command. The placeholder for these arguments are '?' signs in the sql command. Note: This function is a premium feature. Please consider subscribing to Premium to use this feature and support DroidScript in its further development. Example - Show Contacts function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); lst = app.CreateList( "", 1, 1 ); lay.AddChild( lst ); app.AddLayout( lay ); var uri = "content://com.android.contacts/data"; var columns = "display_name,data1"; var select = "mimetype='vnd.android.cursor.item/phone_v2'"; var rows = app.QueryContent( uri, columns, select, null, "display_name" ); var list = []; for(var i in rows) list.push( rows[i].display_name + ":" + rows[i].data1 + ": " ); lst.SetList( list ); } Copy All Run
app/Quit.htm := Quit Back Quit Hello World Quits the app with showing an Alert dialog box before exiting. app.Quit( msg, title, options ) The function will pause the program and exit before any further commands can be executed. Example - Quit function OnStart() { app.ShowPopup( "Exciting" ); app.Quit( "App will now exit anyway.", "No error detected." ); app.ShowPopup( "Exited" ); // not shown } Copy Copy All Run
app/ReadFile.htm := ReadFile Back ReadFile Hello World Reads a file from the local filesystem and returns its contents. app.ReadFile( file, encoding ) See also: WriteFile Example - Append file and get line count function OnStart() { app.WriteFile( "myFile.txt", "Hello World from Copy\n", "Append" ); var txt = app.ReadFile("myFile.txt"); var length = txt.split("\n").length; app.ShowPopup("myFile contains " + length + " lines"); } Copy Copy All Run
app/ReadFileData.htm := ReadFileData Back ReadFileData Hello World Reads file data from the local filesystem and returns its contents. app.ReadFileData( file, mode ) See also: WriteFile
app/RealPath.htm := RealPath Back RealPath Hello World Converts short file paths to full paths. app.RealPath( path )
app/RedirectAssets.htm := RedirectAssets Back RedirectAssets Hello World Reads the assets folders “Img”,“Snd”,“Html” and “Misc” from an external folder outside the apk. app.RedirectAssets( dir ) Example - Redirect Assets function OnStart() { app.RedirectAssets("/sdcard/DroidScript/Hello World/"); lay = app.CreateLayout( "Linear", "VCenter,FillXY" ); img = app.CreateImage( "Img/Hello World.png" ); lay.AddChild( img ); app.AddLayout( lay ); } Copy Copy All Run
app/RemoveDrawer.htm := RemoveDrawer Back RemoveDrawer Hello World Removes a drawer layout from a given side. app.RemoveDrawer( side ) See also: AddDrawer Example - left function OnStart() { lay = app.CreateLayout( "Linear", "FillXY,VCenter" ); txt1 = app.CreateText( " -- swipe" ); txt1.SetTextSize( 30 ); lay.AddChild( txt1 ); app.AddLayout( lay ); layDrawer = app.CreateLayout( "Linear", "FillXY,VCenter" ); layDrawer.SetBackground( "/Sys/Img/BlueBack.jpg" ); btn = app.CreateButton( "Remove" ); btn.SetOnTouch( RemoveDrawer ); layDrawer.AddChild( btn ); app.AddDrawer( layDrawer, "left", 0.8 ); } function RemoveDrawer() { app.RemoveDrawer( "left" ); } Copy Copy All Run
app/RemoveLayout.htm := RemoveLayout Back RemoveLayout Hello World Removes a layout added to the app. app.RemoveLayout( layout ) See also: AddLayout Example - Vertical function OnStart() { lay = app.CreateLayout( "Linear", "FillXY,VCenter" ); txt = app.CreateText( "Hello" ); txt.SetTextSize( 50 ); lay.AddChild( txt ); btn = app.CreateButton( "Remove" ); btn.SetOnTouch( RemoveDrawer ); lay.AddChild( btn ); app.AddLayout( lay ); } function RemoveDrawer() { app.RemoveLayout( lay ); } Copy Copy All Run
app/RemovePermission.htm := RemovePermission Back RemovePermission Hello World Removes a granted permission See Also: GetPermission CheckPermission ListPermissions. app.RemovePermission( uri ) Example function OnStart() { var lay = app.CreateLayout( "linear", "VCenter,FillXY" ) spn = app.AddSpinner(lay, app.ListPermissions(), .5); btn = app.AddButton( lay, "Remove", 0.3 ) btn.SetOnTouch( btn_OnTouch ) app.AddLayout( lay ) } function btn_OnTouch() { var perm = spn.GetText(); if(perm) { app.RemovePermission(perm); app.ShowPopup("Removed " + perm); } } Copy All Run
app/RenameFile.htm := RenameFile Back RenameFile Hello World Renames a file on the local filesystem. app.RenameFile( source, destination ) This method can also be used to move a file to a whole other destination. See Also: WriteFile, CopyFile, DeleteFile Example - Example function OnStart() { var oldfile = "test.txt"; var newfile = "test2.txt"; app.WriteFile( oldfile, "Created: " + new Date() ); app.RenameFile( oldfile, newfile ); } Copy Copy All Run
app/RenameFolder.htm := RenameFolder Back RenameFolder Hello World Renames a folder on the local filesystem. app.RenameFolder( source, destination ) This method can also be used to move a folder to a whole other destination. See Also: MakeFolder, CopyFolder, DeleteFolder Example - Rename function OnStart() { app.RenameFolder( "/sdcard/MyFolder", "/sdcard/YourFolder" ); } Copy Copy All Run Example - Move function OnStart() { app.RenameFolder( "/sdcard/MyFolder", "/sdcard/DroidScript/MyFolder" ); } Copy Copy All Run
app/ReplaceInFile.htm := ReplaceInFile Back ReplaceInFile Hello World Replaces all occurances of some text or a regex pattern in a local file with some other text. app.ReplaceInFile( file, txt, rep, options ) Example - Replace Text in File function OnStart() { app.WriteFile( "file.txt", "Hello world, exciting world." ); app.ReplaceInFile( "file.txt", "world", "user" ); app.Alert( app.ReadFile( "file.txt" ), "Result" ); } Copy Copy All Run Example - Replace Regular Expression function OnStart() { app.WriteFile( "file.txt", "Hello world, exciting world." ); app.ReplaceInFile( "file.txt", "(\\w+)o (\\w+)", "$2 is $1" ); app.Alert( app.ReadFile( "file.txt" ), "Result" ); } Copy Copy All Run
app/SaveBoolean.htm := SaveBoolean Back SaveBoolean Hello World Save a boolean value to remember varibale values between multiple app starts. app.SaveBoolean( name, value, file ) See also: LoadBoolean. Example - Detect First Start var file = "demofile"; function OnStart() { var first = app.LoadBoolean( "first", true, file ); if(first) app.ShowPopup( "You ran this demo for the first time!" ); else app.ShowPopup( "This is not the first time you have run this demo." ); app.SaveBoolean( "first", false, file ); } Copy Copy All Run
app/SaveCookies.htm := SaveCookies Back SaveCookies Hello World Saves cookies for webviews or html apps. app.SaveCookies() See also: ClearCookies
app/SaveJson.htm := SaveJson Back SaveJson Hello World Save a json object to remember varibale values between multiple app starts and updates. app.SaveJson( name, value, file ) See also: LoadNumber.
app/SaveNumber.htm := SaveNumber Back SaveNumber Hello World Save a number value to remember varibale values between multiple app starts and updates. app.SaveNumber( name, value, file ) See also: LoadNumber. Example - Click Counter var clicks = 0, file = "demofile"; function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); clicks = app.LoadNumber( "clicks", 0, file ); btn = app.CreateButton( "Click Me", 0.5, 0.1 ); btn.SetOnTouch( btn_OnTouch ); lay.AddChild( btn ); app.AddLayout( lay ); } function btn_OnTouch() { app.SaveNumber( "clicks", ++clicks, file ); app.ShowPopup( "Clicks: " + clicks ); } Copy Copy All Run
app/SaveText.htm := SaveText Back SaveText Hello World Save a text value to remember varibale values between multiple app starts and updates. app.SaveText( name, value, file ) See also: LoadText. Example - Load Saved Text var file = "demofile"; function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); var text = app.LoadText( "value", "My Value", file ); edtValue = app.CreateTextEdit( text, .5 ); lay.AddChild( edtValue ); btnSave = app.CreateButton( "Save Value", 0.5, 0.1 ); btnSave.SetOnTouch( btnSave_OnTouch ); lay.AddChild( btnSave ); btnLoad = app.CreateButton( "Load Value", 0.5, 0.1 ); btnLoad.SetOnTouch( btnLoad_OnTouch ); lay.AddChild( btnLoad ); app.AddLayout( lay ); } function btnSave_OnTouch() { app.SaveText( "value", edtValue.GetText(), file ); app.ShowPopup( "Value Saved." ); } function btnLoad_OnTouch() { var value = app.LoadText( "value", "no value stored", file ); app.ShowPopup( value ); } Copy Copy All Run
app/ScanFile.htm := ScanFile Back ScanFile Hello World Forces android to scan an image file to appear in the phone's gallery. app.ScanFile( file ) See also: CreateImage, CreateCameraView, ScreenShot. Example - Add Image to Gallery function OnStart() { img = app.CreateImage( null, 1, 1 ); img.SetPaintColor( "green" ); img.DrawCircle( 0.5, 0.5, 0.3 ); img.Save( app.GetAppPath() + "/circle.jpg" ); app.ScanFile( "circle.jpg" ); app.ChooseImage(); } Copy All Run
app/ScheduleJob.htm := ScheduleJob Back ScheduleJob Hello World Schedules background jobs defined in a Job.js file See Also: CancelJob
app/ScreenShot.htm := ScreenShot Back ScreenShot Hello World Takes a screen shot of your app and saves it to the specified path. app.ScreenShot( fileName, quality ) Quality is an optional percentage value for jpg files defaulting to 95. See also: GetMediaFile Example - Take Screenshot function OnStart() { lay = app.CreateLayout( "linear" ); img = app.CreateImage( null, 1, 1 ); img.SetPaintColor( "green" ); img.DrawCircle( 0.5, 0.5, 0.3 ); lay.AddChild( img ); app.AddLayout( lay ); app.ScreenShot( "/sdcard/file.jpg" ); img.SetImage( "/sdcard/file.jpg" ); } Copy Copy All Run
app/Script.htm := Script Back Script Hello World Loads a local JavaScript file to your app to make its functionality available in your app. app.Script( file, noDefer ) By default it is loaded just before OnStart is being called unless you set “NoDefer” to true which forces inline loading. This is to ensure errors are highlighted correctly in external source files. See Also: LoadScript Example - Deferred Loading (recommended) app.WriteFile( "script.js", "var num = 7;\nfunction computeNum() { return 6 * num; }" ); app.Script( "script.js" ); function OnStart() { app.ShowPopup( "script.js loaded." ); app.Alert( computeNum(), "computed number: " ); } Copy Copy All Run Example - Inline Loading app.WriteFile( "script.js", "var num = 7;\nfunction computeNum() { return 6 * num; }" ); function OnStart() { app.Script( "script.js", true ); // without noDefer true computeNum won't be defined app.ShowPopup( "script.js loaded." ); app.Alert( computeNum(), "computed number: " ); } Copy Copy All Run
app/SendFile.htm := SendFile Back SendFile Hello World Send a file to a remote target, ie. via Email. app.SendFile( file, subject, text, choose ) The subject and text arguments will be auto filled and the choose text will be displayed when the user selects the target app. Default may be something like 'Complete action using'. See Also: SendImage, SendText, SendMail Example - Send File function OnStart() { app.WriteFile( "file.txt", "Hello World" ); app.SendFile( app.GetAppPath() + "/file.txt", "Shared File", app.GetUser() + " shared file.txt with you" ); } Copy Copy All Run
app/SendImage.htm := SendImage Back SendImage Hello World Send an image to a remote target, ie. app.SendImage( file, choose ) via Email or a messenger. The choose text will be displayed when the user selects the target app. Default may be something like 'Complete action using'. See Also: SendFile, SendText, SendMail
app/SendIntent.htm := SendIntent Back SendIntent Hello World Intens can be used to perform an operation between different applications or activities. app.SendIntent( packageName, className, action, category, uri, type, extras, options, callback ) It is basically a passive data structure holding an abstract description of an action to be performed. package name and class name can specify the intent target, but you can also leave them null and define a category instead to let the user choose an application of that categoy. If you expect a callback you have to pass the “result” option. The result code can be -1: operation succeeded 1: user-defined activity results 0: operation canceled Many common usage examples are shown in 09AppIntents. For more information visit the Android Developer Page. There you can find informations about the activity, category and extra. See Also: GetIntent function( resultCode, data )
app/SendMail.htm := SendMail Back SendMail Hello World Content: - Using Gmail Send an EMail to someone using the default mail application. The passed argumets will be auto-filled. app.SendMail( address, subject, body, attach, type, options ) GMail will not work due to privacy restrictions. Read more about this in this post by DaveSmart: Using Gmail ”Even though Gmail is the fastest way to get started with sending emails, it is by no means a preferable solution unless you are using OAuth2 authentication. Gmail expects the user to be an actual user not a robot so it runs a lot of heuristics for every login attempt and blocks anything that looks suspicious to defend the user from account hijacking attempts. For example you might run into trouble if your server is in another geographical location – everything works in your dev machine but messages are blocked in production. Additionally Gmail has came up with the concept of 'less secure' apps which is basically anyone who uses plain password to login to Gmail, so you might end up in a situation where one username can send (support for 'less secure' apps is enabled) but other is blocked (support for 'less secure' apps is disabled). When using this method make sure to enable the required functionality by completing the “captcha enable”. Without this, less secure connections won't work. Note: These changes are not recommended to make to your main email account! To prevent having login issues you should either use XOAUTH2 (see details here) or use another provider and preferably a dedicated one like Mailgun or SendGrid or any other. Usually these providers have free plans available that are comparable to the daily sending limits of Gmail. Gmail has a limit of 500 recipients a day (a message with one To and one Cc address counts as two messages since it has two recipients) for gmail.com addresses and 2000 for Google Apps customers, larger SMTP providers usually offer about 200-300 recipients a day for free.“ See Also: SendSMS, SendFile Example - Example function OnStart() { app.CopyFile( "/Sys/Img/Hello.png", "/sdcard/Hello.png" ); app.SendMail( "myfriend@gmail.com", "MySubject", "Hello", "/sdcard/Hello.png" ); } Copy Copy All Run
app/SendMessage.htm := SendMessage Back SendMessage Hello World Send a message from a Service to the main app. app.SendMessage( message ) Example - Services //our Service.js code. //In regular usage move this code to a separate Service.js file var servicejs = ` //Init variables. var count = 0; var diff = 1; //Called when service is started. function OnStart() { app.ShowPopup( "Hello from Service!" ); //Start a timer to do some regular work. setInterval( DoWork, 500 ); } //Called when we get a message from main app. function OnMessage( msg ) { app.Debug( msg ); //Handle commands from main App. if( msg == "change" ) diff = (diff > 0 ? -1 : 1); } //This is where we do some regular background task //(here we just modify a counter and send it back to the app, if its running). function DoWork() { count += diff; app.SendMessage( count ); }` function OnStart() { //Create the Service.js file //(In regular usage create the file yourself) app.WriteFile("Service.js", servicejs ); //Create a layout. lay = app.CreateLayout( "linear", "VCenter,FillXY" ); //Create text control to display data from the service. txt = app.CreateText( "", 0.4 ); txt.SetTextSize( 22 ); lay.AddChild( txt ); //Create an 'Send Message' button. btn = app.CreateButton( "Send Message to Service", 0.6, 0.1 ); lay.AddChild( btn ); btn.SetOnTouch( function(){ svc.SendMessage("change"); } ); //Create a 'Stop Service' button. btn = app.CreateButton( "Stop Service", 0.6, 0.1 ); lay.AddChild( btn ); btn.SetOnTouch( function(){ svc.Stop(); } ); //Add layout to app. app.AddLayout( lay ); //Start/connect to our service. svc = app.CreateService( "this", "this", OnServiceReady ); svc.SetOnMessage( OnServiceMessage ); //This will cause your service to start at boot. //(Set it to "none" if you need to stop it starting) //app.SetAutoBoot( "Service" ); } //Called after our service has started. function OnServiceReady() { app.Debug( "Service Ready" ); } //Called when messages comes from our service. function OnServiceMessage( msg ) { txt.SetText( "Count: " + msg ); } Copy Copy All Run
app/SendSMS.htm := SendSMS Back SendSMS Hello World Send an SMS to someone using the default SMS application. The passed argumets will be auto-filled or requested by the SMS app otherwise. app.SendSMS( msg, number ) See Also: SendMail, SendText, SendFile Example - Send SMS function OnStart() { app.SendSMS( "Hello World!", "0123456789" ); } Copy All Run
app/SendText.htm := SendText Back SendText Hello World This Method is used for sharing text between apps. app.SendText( text, subject, choose ) If choose is defined, an android dialog will appear with the choose value as info text. Otherwise the dialog will appear if the user did not specify an app which should be always opened for this type of data. The subject parameter seems to be obsolete these times and is just kept for backwards compatibility. See Also: SendFile Example - Demo function OnStart() { app.SendText("Hello World", "My Subject", "Choose an app"); } Copy Copy All Run
app/SetAlarm.htm := SetAlarm Back SetAlarm Hello World Set a time when you want your app to start automatically if it is not already opened. app.SetAlarm( type, id, callback, time, interval, options ) When the alarm is fired, the global OnAlarm event will be fired. Example - Set Alarm function OnStart() { var now = Date.now(); app.SetAlarm( "Set", 1234, OnAlarm, Date.now() + 3000 ); // app.ToBack(); // app.Exit(); } function OnAlarm( id ) { app.ShowPopup( "Got Alarm: id = " + id ); } Copy Copy All Run function( id )
app/SetAppLanguage.htm := SetAppLanguage Back SetAppLanguage Hello World Loads the current language code from the lang.json file in your project root folder. app.SetAppLanguage( name ) Make sure you use the standard 2 letter language codes. See Also: GetAppLanguages Example - Switch Language var langJson = ` { "langs": [ "English", "Español" ], "codes": { "english":"en", "español":"es" }, "trans" : { "SelectLang" : { "en":"Please select your prefered language from the 'Settings' menu", "es":"Selecciona tu idioma preferido en el menú 'Configuración'" } } }`; function OnStart() { app.WriteFile( "lang.json", langJson ); app.SetAppLanguage( "English" ); lay = app.CreateLayout( "linear", "VCenter,FillXY" ); spinLang = app.CreateSpinner( "English,Español", 0.4 ); spinLang.SetOnChange( spinLang_OnChange ); lay.AddChild( spinLang ); app.AddLayout( lay ); app.ShowPopup(T( "SelectLang" )); } function spinLang_OnChange() { language = spinLang.GetText(); app.SetAppLanguage( language ); app.DestroyLayout( lay ); OnStart(); } Copy All Run
app/SetAutoBoot.htm := SetAutoBoot Back SetAutoBoot Hello World Causes the current running APK or its Service to be started automatically when your device boots. app.SetAutoBoot( auto ) See Also: SetAutoStart Example - Set Auto Boot function OnStart() { app.SetAutoBoot( true ); app.ShowPopup( "You may reboot your phone now." ); } Copy All Run Example - Unset Auto Boot function OnStart() { app.SetAutoBoot( false ); app.ShowPopup( "AutoBoot Disabled." ); } Copy All Run
app/SetAutoStart.htm := SetAutoStart Back SetAutoStart Hello World Set a DroidScript project name which will be launched automatically when DroidScript starts. app.SetAutoStart( appName ) Note: This function is deprecated. in favour of ide.AutoStart See Also: SetSharedApp, SetAutoBoot Example - Auto Start 'Hello World' function OnStart() { app.SetAutoStart( "Hello World" ); app.ShowPopup( "You may now restart DroidScript." ); } Copy All Run Example - Unset Autostart function OnStart() { app.SetAutoStart( "" ); app.ShowPopup( "Autostart unset." ); } Copy All Run
app/SetAutoWifi.htm := SetAutoWifi Back SetAutoWifi Hello World Automatically enables the use of the WiFi editor. app.SetAutoWifi( auto ) This method is mainly useful for headless devices like AndroidTV which don't have a DroidScript UI. Note: This function is deprecated. in favour of ide.AutoWifi Example - Auto Enable WiFi function OnStart() { app.SetAutoWifi( true ); } Copy All Run
app/SetBackColor.htm := SetBackColor Back SetBackColor Hello World Changes the background color of the app. app.SetBackColor( color ) Example - Blue Background function OnStart() { app.SetBackColor( "blue" ); } Copy All Run
app/SetBluetoothEnabled.htm := SetBluetoothEnabled Back SetBluetoothEnabled Hello World Enables Bluetooth on the device. app.SetBluetoothEnabled( enable ) See Also: IsBluetoothEnabled, IsBluetoothOn, CreateBluetoothSerial Example - Enabling Bluetooth function OnStart() { app.ShowProgress( "Enabling Bluetooth" ); if( !app.IsBluetoothEnabled() ) app.SetBluetoothEnabled( true ); var cnt = 0; while( !app.IsBluetoothOn() ++cnt 10 ) app.Wait( 0.3 ); app.HideProgress(); } Copy Copy All Run Example - En/Disable Bluetooth var itv = 0; function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); btnSave = app.CreateButton( "Enable", 0.5, 0.1 ); btnSave.SetOnTouch( btn_OnTouch ); lay.AddChild( btnSave ); btnLoad = app.CreateButton( "Disable", 0.5, 0.1 ); btnLoad.SetOnTouch( btn_OnTouch ); lay.AddChild( btnLoad ); app.AddLayout( lay ); } function btn_OnTouch() { if( itv ) return; var op = this.GetText(); if( op == "Enable" ) { app.ShowProgress( "Enabling Bluetooth" ); if( !app.IsBluetoothEnabled() ) app.SetBluetoothEnabled( true ); itv = setInterval( checkBtOn, 200 ); } else { app.ShowProgress( "Disabling Bluetooth" ); if( app.IsBluetoothEnabled() ) app.SetBluetoothEnabled( false ); itv = setInterval( checkBtOff, 200 ); } } function checkBtOn() { if( app.IsBluetoothOn() ) { app.HideProgress(); app.ShowPopup( "Bluetooth is on" ); clearInterval( itv ); itv = 0; } } function checkBtOff() { if( !app.IsBluetoothOn() ) { app.HideProgress(); app.ShowPopup( "Bluetooth is off" ); clearInterval( itv ); itv = 0; } } Copy All Run
app/SetClipboardText.htm := SetClipboardText Back SetClipboardText Hello World The SetClipboardText method puts text data on the device clip board. app.SetClipboardText( text ) This allows you to copy and paste text between different applications. See Also: GetClipboardText Example - Example function OnStart() { app.SetClipboardText( "Sample Text" ); } Copy Copy All Run
app/SetData.htm := SetData Back SetData Hello World Saves variables until the app closes. All saved data will be lost afterwards. app.SetData( name, value ) See Also: GetData, ClearData Example - Basic function OnStart() { app.SetData( "myvar", "Hello World!" ); var data = app.GetData("myvar"); app.Alert( data, "Saved Data:" ); } Copy Copy All Run Example - Random Value function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); btn = app.AddButton( lay, "Press Me", 0.3, 0.1 ); btn.SetOnTouch( btn_OnTouch ); app.AddLayout( lay ); } function btn_OnTouch() { var data = 100 * Math.random() | 0; app.SetData( "number", data ); app.ShowPopup( "Data: " + app.GetData( "number" )); } Copy Copy All Run
app/SetDebug.htm := SetDebug Back SetDebug Hello World SetDebug lets you control the debugging level. app.SetDebug( switches ) The available modes are: “console”: allows console.log messages “ds”: allows app.Debug messages “adb”: allows adb debug messages (ie at apk startup) true: enable all debug messages false or “” : disable all debug messages Note that debugging is disabled in apk release mode by default. Otherwise it is always enabled at start. See Also: Debug, GetDebug, IsDebugging Example - Demonstration function OnStart() { app.CreateDebug(); app.Debug("default 1"); // default on console.log("default 2"); // default on app.SetDebug("adb"); app.Debug("adb 3"); // off console.log("adb 4"); // off app.SetDebug("console"); app.Debug("console 5"); // off console.log("console 6"); // on app.SetDebug("ds"); app.Debug("ds 7"); // on console.log("ds 8"); // off app.SetDebug(""); app.Debug("null 9"); // off console.log("null 10"); // off app.SetDebug("true"); app.Debug("true 11"); // on console.log("true 12"); // on app.SetDebug("false"); app.Debug("hello 13"); // off console.log("hello 14"); // off } Copy Copy All Run
app/SetDensity.htm := SetDensity Back SetDensity Hello World Changes the dpi value (dots per inch) that affects the content of any control created afterwards. app.SetDensity( dpi ) The smaller the value, the smaller the scaling. See Also: GetScreenDensity Example - Demonstration function OnStart() { var dens = app.GetScreenDensity(); lay = app.CreateLayout( "linear", "VCenter,FillXY" ); app.SetDensity(dens / 2); btn = app.CreateButton( "Press Me", -1, .1 ); lay.AddChild( btn ); app.SetDensity(dens); btn = app.CreateButton( "Press Me", -1, .1 ); lay.AddChild( btn ); app.SetDensity(dens * 2); btn = app.CreateButton( "Press Me", -1, .1 ); lay.AddChild( btn ); app.AddLayout( lay ); } Copy Copy All Run
app/SetInBackground.htm := SetInBackground Back SetInBackground Hello World Set the current service to run in the background. app.SetInBackground() See Also: StartService, SetInForeground. Example var serviceJS = ` function OnStart() { var i = 0; setInterval( function() { app.ShowPopup(i++); }, 2000 ); } function OnMessage( msg) { if( msg == "fg" ) app.SetInForeground( "My Service", "Service is running", "/Sys/Img/Hello.png", "/Sys/Img/Icon.png", "low"); else if( msg == "bg" ) app.SetInBackground(); }`; function OnStart() { app.WriteFile( "Service.js", serviceJS ); lay = app.CreateLayout( "linear", "VCenter,FillXY" ); tgl = app.CreateToggle( "Foreground", 0.3, 0.1 ); tgl.SetOnTouch( tgl_OnTouch ); lay.AddChild( tgl ); app.AddLayout( lay ); svc = app.CreateService( "this", "this", OnSvcStart ); } function tgl_OnTouch( fg ) { if( fg ) svc.SendMessage( "fg" ); else svc.SendMessage( "bg" ); } Copy Copy All Run
app/SetInForeground.htm := SetInForeground Back SetInForeground Hello World Set the current service to run in the foreground. app.SetInForeground( title, text, largeIcon, smallIcon, importance ) See Also: StartService, SetInBackground Example var serviceJS = ` function OnStart() { var i = 0; setInterval( function() { app.ShowPopup(i++); }, 2000 ); } function OnMessage( msg) { if( msg == "fg" ) app.SetInForeground( "My Service", "Service is running", "/Sys/Img/Hello.png", "/Sys/Img/Icon.png", "low"); else if( msg == "bg" ) app.SetInBackground(); }`; function OnStart() { app.WriteFile( "Service.js", serviceJS ); lay = app.CreateLayout( "linear", "VCenter,FillXY" ); tgl = app.CreateToggle( "Foreground", 0.3, 0.1 ); tgl.SetOnTouch( tgl_OnTouch ); lay.AddChild( tgl ); app.AddLayout( lay ); svc = app.CreateService( "this", "this", OnSvcStart ); } function tgl_OnTouch( fg ) { if( fg ) svc.SendMessage( "fg" ); else svc.SendMessage( "bg" ); } Copy Copy All Run
app/SetJoystickOptions.htm := SetJoystickOptions Back SetJoystickOptions Hello World Set options for the connected joystick. app.SetJoystickOptions( options ) The “forwardkeys” option allows the joystick key presses to pass onto the child controls of the main activity. (They are normally prevented from reaching child controls). See Also: GetJoystickName, GetJoystickState Example - ForwardKeys function OnStart() { app.SetJoystickOptions( "ForwardKeys" ); } Copy All Run
app/SetKioskMode.htm := SetKioskMode Back SetKioskMode Hello World Blocks android functionality to keep the rest of your phone safe while others may use your app. app.SetKioskMode( mode, enable, options, packages ) Note: This function is a premium feature. Please consider subscribing to Premium to use this feature and support DroidScript in its further development. ATTENTION: This function is available in the DS X-Versions only as it doesn't meet the GooglePlay security requirements. APKs built with X-Versions are for private use only. Example - Demo function OnStart() { app.SetKioskMode( "Status,Nav", true, "Black" ); } Copy All Run
app/SetMargins.htm := SetMargins Back SetMargins Hello World Set the default margins settings for controls. app.SetMargins( left, top, right, bottom, mode )
app/SetMenu.htm := SetMenu Back SetMenu Hello World Set the app menu fields. app.SetMenu( list, iconPath ) When a menu entry is touched, the global OnMenu event will be called. See Also: ShowMenu Example - Example function OnStart() { app.SetMenu( "Start,Stop,Pause" ); lay = app.CreateLayout( "linear", "" ); btn = app.CreateButton( "[fa-gear]", -1, -1, "fontawesome" ); btn.SetOnTouch( app.ShowMenu ); lay.AddChild( btn ); app.AddLayout( lay ); } function OnMenu( item ) { app.ShowPopup( item, "Short" ); } Copy Copy All Run Example - Menu Icons function OnStart() { menus = "Files:folder,Music:list,Images:picture"; app.SetMenu( menus ); app.ShowMenu(); } function OnMenu( item ) { app.ShowPopup( item, "Short" ); } Copy Copy All Run
app/SetMockLocation.htm := SetMockLocation Back SetMockLocation Hello World Emulates a GPS location on the device. app.SetMockLocation( lat, lng, accuracy ) Note: This function is a premium feature. Please consider subscribing to Premium to use this feature and support DroidScript in its further development.
app/SetNavBarColor.htm := SetNavBarColor Back SetNavBarColor Hello World Change the android NavBar color. app.SetNavBarColor( color ) Note: This function is a premium feature. Please consider subscribing to Premium to use this feature and support DroidScript in its further development. Example - Change NavBar Color function OnStart() { app.SetNavBarColor("green"); } Copy Copy All Run
app/SetOnBroadcast.htm := SetOnBroadcast Back SetOnBroadcast Hello World Define a callback function for incoming Broadcast messages. app.SetOnBroadcast( callback, action ) You can find a list of broadcasts available for android SDK ver. 28 here See also: Broadcast function( type, msg )
app/SetOnDebug.htm := SetOnDebug Back SetOnDebug Hello World Define a callback function for debug messages. app.SetOnDebug( callback ) See also: Debug, SetDebug Example - OnDebug function OnStart() { app.SetOnDebug( OnDebug ); app.Debug( "app started" ); } function OnDebug(msg) { app.SetDebug(); app.Alert( msg, "Received debug message:" ); app.SetDebug( true ); } Copy Copy All Run
app/SetOnError.htm := SetOnError Back SetOnError Hello World Define a callback function to catch thrown errors messages. app.SetOnError( callback ) See also: Error Example - Catch JS Errors function OnStart() { app.SetOnError( OnError ); throw "My thrown error"; } function OnError( msg, line, file ) { var text = 'Message: "' + msg + '"\n' + 'Line: ' + line + '\n' + 'File: "' + app.Uri2Path(file) + '"'; app.Alert( text, "Received error message:" ); } Copy Copy All Run function( error )
app/SetOnKey.htm := SetOnKey Back SetOnKey Hello World You can use SetOnKey for receiving and handling all key events fired in the application. app.SetOnKey( callback ) You may want to use it with DisableKeys - i.e. for defining a custom ENTER command for automatic control focussing. You can find the complete list of keys and their codes on the Android Developer Page. See Also: SimulateKey Example - Demonstration app.DisableKeys( 'VOLUME_DOWN,VOLUME_UP,BACK' ); function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); txt = app.CreateText( "", -1, -1, "multiline,left,monospace" ); lay.AddChild( txt ); edt = app.CreateTextEdit( "", .8, .1 ); lay.AddChild( edt ); app.AddLayout( lay ); app.SetOnKey( OnKey ); edt.Focus(); app.ShowKeyboard( edt ) edt.Gone(); } function OnKey(action, name, code, extra) { var text = "action:" + action + "\nname :" + name + "\ncode :" + code + "\nextra :" + extra; txt.SetText( text ); } Copy Copy All Run Example - Surprise var prev; function OnStart() { app.DisableKeys( "VOLUME_DOWN,VOLUME_UP" ); app.ShowPopup( "Press the volume keys!" ); lay = app.CreateLayout( "Linear", "FillX" ); lay.SetPadding( 0, .85 ); lay.Hide(); img = app.CreateImage( "/Sys/Img/Hello.png", -1, .3 ); lay.AddChild( img ); app.AddLayout( lay ); app.SetOnKey( OnKey ); } function OnKey(action, name, code, extra) { if( action != prev ) { if( action == "Down" ) lay.Animate( "SlideFromBottom", null, 300 ); if( action == "Up" ) lay.Animate( "SlideToBottom" , null, 300 ); } prev = action; } Copy Copy All Run function( action, name, keycode, extrakeys )
app/SetOnShowKeyboard.htm := SetOnShowKeyboard Back SetOnShowKeyboard Hello World Define a callback function to detect when keyboard visible state has changed. app.SetOnShowKeyboard( callback ) See Also: ShowKeyboard, HideKeyboard Example - Toggle Keyboard function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); tgl = app.CreateToggle( "Keyboard", 0.3, 0.1 ); tgl.SetOnTouch( tgl_OnTouch ); lay.AddChild( tgl ); edt = app.CreateTextEdit( "Text", .8, .1 ); edt.Focus(); lay.AddChild(edt); app.AddLayout( lay ); app.SetOnShowKeyboard( OnKeyboardShown ); } function tgl_OnTouch( show ) { if( show ) app.ShowKeyboard( edt ); else app.HideKeyboard(); } function OnKeyboard( shown ) { app.ShowPopup( "Keyboard shown: " + shown ); } Copy Copy All Run function( shown )
app/SetOnWifiChange.htm := SetOnWifiChange Back SetOnWifiChange Hello World Define a callback function to detect when the WiFi connected state has changed. app.SetOnWifiChange( callback ) The state parameter can be “CONNECTING”, “CONNECTED”, or “DISCONNECTED”. The WiFi ssid is passed on “CONNECTED” only. See Also: WifiConnect, WifiScan Example - Detect WiFi Changes function OnStart() { app.SetOnWifiChange( OnWifiChange ); } function OnWifiChange( state, ssid ) { if( state.EndsWith( "ED" )) { app.ShowPopup( state + "\n" + ssid ); app.HideProgress(); } else app.ShowProgress( state ) } Copy Copy All Run function( state, ssid )
app/SetOptions.htm := SetOptions Back SetOptions Hello World Define some global options for the app. app.SetOptions( options ) See Also: GetOptions
app/SetOrientation.htm := SetOrientation Back SetOrientation Hello World Set the display orientation to a fixed value. app.SetOrientation( orient, callback ) You can unlock it again passing “Default” as orientation. See Also: GetOrientation Example - Change Orientation function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); spn = app.CreateSpinner( "Default,Landscape,ReverseLandscape,Portrait,ReversePortrait", 0.3, 0.1 ); spn.SetOnChange( SetOrientation ); lay.AddChild( spn ); app.AddLayout( lay ); } function SetOrientation( orient ) { app.SetOrientation( orient ) } Copy Copy All Run
app/SetPosition.htm := SetPosition Back SetPosition Hello World Change the main app's position and size. app.SetPosition( left, top, width, height, options ) Mostly used for transparent apps. Example - SetPosition function OnStart() { app.SetPosition( 0.2, 0.2, .6, .6 ); lay = app.CreateLayout( "linear", "VCenter,fillxy" ); lay.SetBackColor("blue") btn = app.CreateButton( "Hello World", 0.3, 0.1 ); // 1, 1 will overflow lay.AddChild( btn ); app.AddLayout( lay ); } Copy Copy All Run
app/SetPriority.htm := SetPriority Back SetPriority Hello World Changes the GUI thread priority. app.SetPriority( level )
app/SetRingerMode.htm := SetRingerMode Back SetRingerMode Hello World Change the current ringer mode of the device which can be “Normal”, “Vibrate” or “Silent”. app.SetRingerMode( mode ) See Also: GetRingerMode Example - SetRingerMode Demo function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); spn = app.CreateSpinner( "Normal,Vibrate,Silent" ); spn.SetOnChange( SetRingerMode ); lay.AddChild( spn ); btn = app.CreateButton( "Press Me", 0.3, 0.1 ); btn.SetOnTouch( Notify ); lay.AddChild( btn ); app.AddLayout( lay ); } function SetRingerMode( mode ) { app.SetRingerMode( mode ); } function Notify() { var ntf = app.CreateNotification(); ntf.SetMessage( "RingerMode Demo", "RingerMode Demo notifies:", "Helo World" ); ntf.Notify(); } Copy Copy All Run
app/SetScreenBrightness.htm := SetScreenBrightness Back SetScreenBrightness Hello World Change the screen brightness to a value between 0 and 1, where 0 is the lowest and 1 the highest possible brightness value. app.SetScreenBrightness( level ) Example - SetScreenBrightness Demo function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); lay.SetBackColor( "white" ); spn = app.CreateSeekBar( 1 ); spn.SetOnChange( SetScreenBrightness ); spn.SetRange( 1 ); lay.AddChild( spn ); app.AddLayout( lay ); } function SetScreenBrightness( level ) { app.SetScreenBrightness( level ); } Copy All Run
app/SetScreenMode.htm := SetScreenMode Back SetScreenMode Hello World Changes the screen mode of your application. app.SetScreenMode( mode ) If null is passed, the app menu will be dismissed. When called, the global OnConfig function will be called (if defined). Example - SetScreenMode Demo function OnStart() { lay = app.CreateLayout( "Linear", "Vertical,VCenter,FillXY" ); spn = app.CreateSpinner( "Default,Normal,Full,Game" ); spn.SetOnChange( SetScreenMode ); lay.AddChild( spn ); app.AddLayout( lay ); } function SetScreenMode( mode ) { app.SetScreenMode( mode ); } Copy Copy All Run
app/SetSharedApp.htm := SetSharedApp Back SetSharedApp Hello World Define a DroidScript Project which will be automatically started when DS received shared data. app.SetSharedApp( name ) Check out the 'Shared Data' sample in the DS samples section. See Also: SetAutoStart Example - Example function OnStart() { app.SetSharedApp( "Hello World" ); } Copy All Run
app/SetSpeakerPhone.htm := SetSpeakerPhone Back SetSpeakerPhone Hello World En/Disables the speaker for phone calls. app.SetSpeakerPhone( on ) See also: GetSpeakerPhone.
app/SetStatusBarColor.htm := SetStatusBarColor Back SetStatusBarColor Hello World Change the android status bar color. app.SetStatusBarColor( color ) Note: This function is a premium feature. Please consider subscribing to Premium to use this feature and support DroidScript in its further development. Example - Set StatusBar Color function OnStart() { app.SetStatusBarColor("green"); } Copy Copy All Run
app/SetTextSize.htm := SetTextSize Back SetTextSize Hello World Set the default text size setting for controls. app.SetTextSize( size, mode )
app/SetTheme.htm := SetTheme Back SetTheme Hello World Change the theme of your app to any created Theme Object. app.SetTheme( theme ) The theme will only apply to objects created after the theme was set. You typically need to recreate all your controls or restart the app to apply the new theme. Note: This function is a premium feature. Please consider subscribing to Premium to use this feature and support DroidScript in its further development. Example - Themes Demo var lay = null; var themeName = "Default"; function OnStart() { CreateLayout(); } function CreateLayout() { if( lay ) app.DestroyLayout( lay ); lay = app.CreateLayout( "linear", "VCenter,FillXY" ); txt = app.CreateText( "Theme" ); txt.SetTextSize( 30 ); lay.AddChild( txt ); spin = app.CreateSpinner( "Default,Dark,Light", 0.4, 0.1 ); spin.SetMargins( 0, 0.05, 0, 0.05 ); spin.SetOnTouch( spin_OnChange ); spin.SetText( themeName ); lay.AddChild( spin ); tgl = app.CreateButton( "Button", .3, .1 ); lay.AddChild( tgl ); app.AddLayout( lay ); } function spin_OnChange( item ) { themeName = item; var theme = app.CreateTheme( themeName ); app.SetTheme( theme ); CreateLayout(); } Copy All Run
app/SetUserAgent.htm := SetUserAgent Back SetUserAgent Hello World Change the user agent for html apps. app.SetUserAgent( agent, options ) For more details ask Wikipedia. Example - Example var defaultUserAgent = navigator.userAgent; var myUserAgent = defaultUserAgent; function OnStart() { app.SetUserAgent( myUserAgent ); } Copy All Run
app/SetUserCreds.htm := SetUserCreds Back SetUserCreds Hello World Set user credentials in an html app for websites that require user login. app.SetUserCreds( name, password )
app/SetVolume.htm := SetVolume Back SetVolume Hello World Set the volume of a given volume type as a number between 0 and 1. app.SetVolume( stream, level, options ) See Also: GetVolume Example - Set Volume function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); skb = app.CreateSeekBar( 1 ); skb.SetRange( 1 ); skb.SetOnChange( SetVolume ); lay.AddChild( skb ); app.AddLayout( lay ); } function SetVolume( value ) { app.SetVolume( "Music", value ); app.PlaySound( "/Sys/Snd/Poing.ogg" ); } Copy Copy All Run
app/SetWifiApEnabled.htm := SetWifiApEnabled Back SetWifiApEnabled Hello World En/Disable the mobile Wifi Access Point of the device. app.SetWifiApEnabled( enable, ssid, key ) You can define a custom WiFi AP name and a password as credentials for other people. It automatically disabled WiFi if it was enabled. This method is available for Android 6 or older only! See Also: IsWifiApEnabled, IsWifiEnabled Example - WiFi Access Point function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); tgl = app.CreateToggle( "WiFi Access Point", -1, 0.1 ); tgl.SetOnTouch( tgl_OnTouch ); lay.AddChild( tgl ); app.AddLayout( lay ); } function tgl_OnTouch( enable ) { if( enable ) app.SetWifiApEnabled( true, "DS Wifi AP", "mypass" ); else app.SetWifiApEnabled( false ); } Copy Copy All Run
app/SetWifiEnabled.htm := SetWifiEnabled Back SetWifiEnabled Hello World En/Disable Wifi on the device. app.SetWifiEnabled( enable ) See Also: SetWifiEnabled, IsWifiApEnabled, WifiScan Example - Toggle WiFi function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); tgl = app.CreateToggle( "WiFi", -1, 0.1 ); tgl.SetOnTouch( tgl_OnTouch ); lay.AddChild( tgl ); app.AddLayout( lay ); } function tgl_OnTouch( enable ) { app.SetWifiEnabled( enable ); } Copy Copy All Run
app/Show.htm := Show Back Show Hello World Shows the main app layout. app.Show() See Also: Hide
app/ShowCheckList.htm := ShowCheckList Back ShowCheckList Hello World The check list provides a similar functionality to the “Multi” ListDiaog, although you can adjust its initial check states with an object structure. ckl = app.ShowCheckList( title, list, callback, width, height, options ) → app object: CheckList Example function OnStart() { app.ShowCheckList( "Select Animals", "Sheep:true,Cows:false,Pigs:false", OnFinish, 0.8, 0.5 ); } function OnFinish( data ) { if( data ) app.ShowPopup( JSON.stringify(data) ); else app.ShowPopup( "Cancelled" ); } Copy Copy All Run function( data )
app/ShowDebug.htm := ShowDebug Back ShowDebug Hello World Show/Hide the debug console as black overlay in your app. app.ShowDebug( show, options ) See Also: Debug, IsDebugVisible Example - Debug Overlay function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); tgl = app.AddToggle( lay, "Toggle Debug", -1, 0.1 ); tgl.SetOnTouch( ShowDebug ); app.AddLayout( lay ); } function ShowDebug( show ) { app.ShowDebug( show ); } Copy Copy All Run Example - Debug Dialog function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); tgl = app.AddButton( lay, "Show Debug Dialog", -1, 0.1 ); tgl.SetOnTouch( ShowDebug ); app.EnableBackKey( false ); app.AddLayout( lay ); } function ShowDebug() { app.ShowDebug( true, "dialog" ); app.ShowPopup( "Press [BACK] to close." ); } function OnBack() { if( app.IsDebugVisible() ) { app.ShowDebug( false ); } } Copy Copy All Run
app/ShowKeyboard.htm := ShowKeyboard Back ShowKeyboard Hello World Shows the keyboard on a focussed control. app.ShowKeyboard( obj ) → Boolean See Also: HideKeyboard Example - Basic function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); edt = app.CreateTextEdit( "Hell World" ); edt.Focus(); lay.AddChild( edt ); app.AddLayout( lay ); app.ShowKeyboard( edt ); } Copy All Run Example - Toggle Keyboard function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); tgl = app.CreateToggle( "Keyboard", 0.3, 0.1 ); tgl.SetOnTouch( tgl_OnTouch ); lay.AddChild( tgl ); edt = app.CreateTextEdit( "Text", .8, .1 ); edt.Focus(); lay.AddChild(edt); app.AddLayout( lay ); } function tgl_OnTouch( show ) { if( show ) app.ShowKeyboard( edt ); else app.HideKeyboard(); } Copy Copy All Run
app/ShowMenu.htm := ShowMenu Back ShowMenu Hello World Show the in-app menu. app.ShowMenu() When a menu entry is touched, the OnMenu event will be called. See Also: SetMenu Example - Basic function OnStart() { app.SetMenu( "Option 1,Option 2,Option 3" ); app.ShowMenu(); } Copy Copy All Run
app/ShowPopup.htm := ShowPopup Back ShowPopup Hello World Shows a simple popup message on the screen. app.ShowPopup( message, options ) It automatically disappears after about 5 secods or after an even shorter time if you pass the “Short” option, or when the user touches the screen. Example - Top function OnStart() { app.ShowPopup( "Hello World!" ); } Copy Copy All Run Example - Bottom function OnStart() { app.ShowPopup( "Hello World!", "Bottom,Short" ); } Copy Copy All Run
app/ShowProgress.htm := ShowProgress Back ShowProgress Hello World Shows a rotating progress circle indicating that something happens and that the user should keep his extremities with him until the process completed. app.ShowProgress( message, options ) Example - Show and Hide Progress function OnStart() { app.ShowProgress( "Loading..." ); setTimeout( "app.HideProgress()", 3000 ); } Copy Copy All Run
app/ShowProgressBar.htm := ShowProgressBar Back ShowProgressBar Hello World Shows a dialog with a bar indicating the current progress of a certain thing. app.ShowProgressBar( title, percent, options ) See Also: UpdateProgressBar, HideProgressBar Example - Progress Bar function OnStart() { app.ShowProgressBar( "Loading..." ); for( prog = 0; prog 100; prog++ ) app.UpdateProgressBar( prog ); app.HideProgressBar(); } Copy Copy All Run
app/ShowTextDialog.htm := ShowTextDialog Back ShowTextDialog Hello World Shows a text input dialog with a title to allow the user to input some text. app.ShowTextDialog( title, default, callback ) Example - Input Name function OnStart() { app.ShowTextDialog( "Type your Name:", "", OnInputName ); } function OnInputName( name ) { app.ShowPopup( "Your name is " + name ); } Copy Copy All Run function( text )
app/ShowTip.htm := ShowTip Back ShowTip Hello World Shows a tooltip message on the screen. app.ShowTip( message, left, top, timeOut, options ) Example - Show Tool-Tip function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); edt = app.CreateTextEdit( "", 0.5 ); lay.AddChild( edt ); app.AddLayout( lay ); var pos = edt.GetPosition( "screen" ); app.ShowTip( "Type some text here", pos.left, pos.top, 3000, "Down" ); } Copy Copy All Run
app/SimulateDrag.htm := SimulateDrag Back SimulateDrag Hello World Simulates a drag event on an app object in a scrollable container. app.SimulateDrag( obj, x1, y1, x2, y2, step, pause )
app/SimulateKey.htm := SimulateKey Back SimulateKey Hello World Simulates a key event on an app object. app.SimulateKey( obj, keyName, modifiers, pause ) You can find the complete list of key names on the Android Developer Page Example - Infinite Monkey function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); edt = app.CreateTextEdit( "", 0.8, 0.3, "nokeyboard" ); lay.AddChild( edt ); app.AddLayout( lay ); app.Animate( SimulateKey, 2 ); } function SimulateKey() { var ran = 65 + Math.floor(Math.random() * 26); var char = String.fromCharCode( ran ); app.SimulateKey( edt, char ); } Copy Copy All Run
app/SimulateScroll.htm := SimulateScroll Back SimulateScroll Hello World Simulates a scroll event on a scrollable app object. app.SimulateScroll( obj, x, y, dx, dy, count, fling )
app/SimulateTouch.htm := SimulateTouch Back SimulateTouch Hello World Simulates a touch event on a rouchable control. app.SimulateTouch( obj, x, y, dir ) Example - Pressing Buttons function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); btn = app.CreateButton( "Press Me", 0.3, 0.1 ); btn.SetOnTouch( btn_OnTouch ); lay.AddChild( btn ); app.AddLayout( lay ); app.Animate( SimulateTouch, 1/2 ); } function SimulateTouch() { app.SimulateTouch( btn, 0.5, 0.5, "down" ); } var i = 1; function btn_OnTouch() { app.ShowPopup( "Hello World " + i++ ); } Copy All Run
app/Start.htm := Start Back Start Hello World Starts your DS app in an html project. app.Start() Call it in the document.onload function in order to initialize DroidScript and execute your OnStart() function. Example - Html App html> head> meta name="viewport" content="width=device-width"> script src='file:///android_asset/app.js'> /script> /head> script> function OnStart() { app.ShowPopup( "HTML Rocks!" ); } /script> body onload="app.Start()" style="background-color: #ffffff;"> /body> /html> Copy All Run
app/StartApp.htm := StartApp Back StartApp Hello World Starts an app in a new window. app.StartApp( file, options, intent ) Note: This function does only work in APKs because in the IDE your app is already running. See Also: StopApp Example - Example function OnStart() { app.StartApp( "/sdcard/DroidScript/Hello World/Hello World.js" ); } Copy Copy All Run
app/StartDebugServer.htm := StartDebugServer Back StartDebugServer Hello World Starts a debug server which can be used to debug your app on headless devices. app.StartDebugServer() See Also: StopDebugServer
app/StartService.htm := StartService Back StartService Hello World Starts a service which runs parallel to your app. app.StartService( packageName, className ) See Also: StopService.
app/StopApp.htm := StopApp Back StopApp Hello World Stops an app started via StartApp. app.StopApp( name )
app/StopDebugServer.htm := StopDebugServer Back StopDebugServer Hello World Stops a running debug server. app.StopDebugServer() See Also: StartDebugServer
app/StopService.htm := StopService Back StopService Hello World Stops a service started via StartService. app.StopService()
app/SysExec.htm := SysExec Back SysExec Hello World Executes a shell command on the android shell. app.SysExec( command, options, maxRead, timeout ) → String NOTE: You have to add a 'exit' command at the end of your script because the shell does not terminate automatically after finishing. See Also: ExtExec Example - ListDir SH function OnStart() { var delim = "\0"; var list = app.SysExec( 'ls -ap /sdcard/;exit', "sh,log" ); list = list.split( "\n" ).join( delim ); lay = app.CreateLayout( "linear", "VCenter,FillXY" ); lst = app.CreateList( list, 1, 1, "", delim ); lay.AddChild( lst ); app.AddLayout( lay ); } Copy Copy All Run
app/TextToSpeech.htm := TextToSpeech Back TextToSpeech Hello World Uses the android TextToSpeech engine to play text acoustically. app.TextToSpeech( text, pitch, rate, callback, stream, locale, engine ) You can use different locales depending on the user language. A list of languages and their locales (LCID string) can be found on www.science.co.il. Example - Example function OnStart() { app.TextToSpeech( "DroidScript is awesome!", 1.0, 1.0 ); } Copy Copy All Run
app/ToBack.htm := ToBack Back ToBack Hello World Hides the app but continue running it in the background. app.ToBack() If called, the global OnPause event will be fired and if reshown, OnResume is fired. See Also: ToFront Example - App to Background function OnStart() { alert( "App will now go to back." ); app.ToBack(); } function OnPause() { app.ShowPopup( "OnPause" ); } function OnResume() { app.ShowPopup( "OnResume" ); } Copy All Run
app/ToFront.htm := ToFront Back ToFront Hello World Brings the app back to the foreground. app.ToFront() See Also: ToBack. Example - Hide and Peek function OnStart() { app.ToBack(); setTimeout("app.ToFront()", 5000); } function OnPause() { app.ShowPopup( "OnPause" ); } function OnResume() { app.ShowPopup( "OnResume" ); } Copy All Run
app/Translate.htm := Translate Back Translate Hello World Translates “Ok” and “Cancel” buttons created after this method to the passed strings. app.Translate( Ok, Cancel ) Example - Translate Buttons function OnStart() { app.Translate("new cancel", "new ok"); app.Alert("my message"); app.ShowTextDialog("Type some text", ""); } Copy Copy All Run
app/Unlock.htm := Unlock Back Unlock Hello World Unlocks the device. app.Unlock() Requires Root See Also: Lock Example - Demo function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY,touchspy" ); btn = app.CreateButton( "Disable", 0.3, 0.1 ); btn.SetOnTouch( btn_OnTouch ); lay.AddChild( btn ); app.AddLayout( lay ); } function btn_OnTouch() { app.Lock(); app.ShowPopup( "Locked. Wait 5 secs" ); setTimeout(app.Unlock, 5000); } Copy Copy All Run
app/UnlockDrawer.htm := UnlockDrawer Back UnlockDrawer Hello World Unlocks a locked drawer. app.UnlockDrawer( side ) See Also LockDrawer, AddDrawer Example - Basic function OnStart() { lay = app.CreateLayout( "Linear", "FillXY,VCenter" ); tgl = app.CreateToggle( "Locked", -1, -1, "fontawesome" ); tgl.SetPadding( .1, .05, .1, .05 ); tgl.SetOnTouch( OnLockChange ); tgl.SetTextSize( 30 ); lay.AddChild( tgl ); app.AddLayout( lay ); layDrawer = app.CreateLayout( "Linear", "FillXY,VCenter" ); layDrawer.SetBackground( "/Sys/Img/BlueBack.jpg" ); app.AddDrawer( layDrawer, "left", 0.8 ); } function OnLockChange( lock ) { if( lock ) app.LockDrawer( "left" ); else app.UnlockDrawer( "left" ); } Copy Copy All Run
app/UnpairBtDevice.htm := UnpairBtDevice Back UnpairBtDevice Hello World Unpairs a paired Bluetooth device by its bt address. app.UnpairBtDevice( address, callback ) The callback argument is called when the device was successfully unpaired. See Also: PairBtDevice, GetPairedBtDevices, DiscoverBtDevices, CreateBluetoothSerial Example - Pairing and Unpairing bluetooth devices function OnStart() { app.ShowProgress( "enabling Bluetooth" ); app.SetBluetoothEnabled( true ); while( !app.IsBluetoothOn() ) app.Wait( 0.2 ); app.HideProgress(); app.DiscoverBtDevices( "", bt_OnFound, bt_OnComplete ); app.ShowProgress( "Discovering bt devices" ); lay = app.CreateLayout( "linear" ); lst = app.CreateList( "", 1, 1, "fontawesome" ); lst.SetOnTouch( pair ); lay.AddChild( lst ); app.AddLayout( lay ); } function bt_OnFound( name, address ) { var image = ""; if( app.IsBtDevicePaired( name )) image = "[fa-bluetooth]"; lst.AddItem( name, address, image ); } function bt_OnComplete() { app.HideProgress(); } function pair( name, address ) { if(!app.IsBtDevicePaired( name )) { app.ShowProgress( "Pairing " + name ); app.PairBtDevice( address, OnPair ); lst.SetItem( name, name, address, ""); } else { app.ShowProgress( "Unpairing " + name ); app.UnpairBtDevice( address, OnUnpair ); lst.SetItem( name, name, address, ""); } } function OnPair( name, address ) { app.Alert( name + " " + address, "Pairing successful!" ); } function OnUnpair() { app.Alert( name + " " + address, "Unpairing successful!" ); } Copy All Run
app/UnzipFile.htm := UnzipFile Back UnzipFile Hello World Extracts the contents of a zip file to a given target folder. app.UnzipFile( source, destination, options ) See Also: ZipFolder, ZipFile Example - Unzip File function OnStart() { app.UnzipFile( "yourfile.zip", "/sdcard/Extracted" ); } Copy Copy All Run
app/UpdateProgressBar.htm := UpdateProgressBar Back UpdateProgressBar Hello World Updates the progress percentage of a ProgressBar. app.UpdateProgressBar( percent, options ) See Also: ShowProgressBar, HideProgressBar. Example - Progress Bar function OnStart() { app.ShowProgressBar( "Loading..." ); for( prog = 0; prog 100; prog++ ) app.UpdateProgressBar( prog ); app.HideProgressBar(); } Copy Copy All Run
app/UpdateUI.htm := UpdateUI Back UpdateUI Hello World Force an UI refresh during a very time consuming calculation. app.UpdateUI( ms )
app/UploadFile.htm := UploadFile Back UploadFile Hello World Uploads a file to a server. app.UploadFile( url, file, name, callback ) Example - Upload File function OnStart() { var name = app.GetAppName() + ".js"; var file = app.GetAppPath() + "/" + name; app.UploadFile( "https://yourwebsite.com/upload", file, name, OnUpload ); } function OnUpload( error, file, result ) { if(error) app.Alert( "Upload Failed!" ) else app.ShowPopup( "Response:\n" + result, "Upload Successful!" ); } Copy All Run
app/Uri2Path.htm := Uri2Path Back Uri2Path Hello World Decodes a URI encoded string. app.Uri2Path( uri, options ) → String Note: This function is deprecated. In recent versions of Android (10), its no longer possible to query the content database for the _data column (for security reasons) which makes it impossible to work out the original file path. See Also: SetOnError
app/Vibrate.htm := Vibrate Back Vibrate Hello World Makes the device vibrate in a specified pattern in millisecond values: “ pause, play, pause, play,...” Example - Example function OnStart() { app.Vibrate( "0,100,30,100,50,300" ); } Copy Copy All Run
app/Wait.htm := Wait Back Wait Hello World Performs a synchronous delay in your program which effectively pauses it. app.Wait( seconds, doEvents ) You can enable processing (input) events by setting doEvents to true. Its main use is for making brief pauses when communicating with external devices so that they get a chance to do work while your app executes. Be careful when using this method without doevents in your code as Android quickly thinks that your app does not respond if used for over about 30 seconds. Example - Synchronous delay function OnStart() { alert( "Press Ok to start the delay." ) app.Wait( 5 ); app.ShowPopup( "Done." ); } Copy Copy All Run
app/WakeUp.htm := WakeUp Back WakeUp Hello World Forces the screen to turn on the screen. app.WakeUp() (This has the same effect as pressing the power button in sleep mode) See Also: GoToSleep Example - Sleep and Wake function OnStart() { app.GoToSleep(); setTimeout("app.WakeUp()", 5000) } Copy Copy All Run
app/WalkFolder.htm := WalkFolder Back WalkFolder Hello World Lists a directory recursively similar to app.ListFolder
app/WifiConnect.htm := WifiConnect Back WifiConnect Hello World Connect to a WiFi network by specifying the ssid and a password. app.WifiConnect( ssid, key ) See Also: WifiScan, SetOnWifiChange, SetWifiApEnabled Example - Conect to DS WiFi AP function OnStart() { app.WifiConnect( "DS WiFi AP", "mypass" ); app.SetOnWifiChange( OnWifiChange ); } function OnWifiChange( state, ssid ) { app.ShowPopup( ssid + " " + state ); } Copy Copy All Run
app/WifiScan.htm := WifiScan Back WifiScan Hello World Scans the surroundings for any available Wifi networks. app.WifiScan( callback, options ) Example - Conect to DS WiFi AP function OnStart() { lay = app.CreateLayout( "linear", "VCenter,FillXY" ); lst = app.CreateList( "", 1, 1 ); lay.AddChild( lst ); app.AddLayout( lay ); app.ShowProgress(); app.WifiScan( OnWifi ); } function OnWifi( ssid ) { lst.SetList( ssid, "\\|" ) app.HideProgress(); } Copy Copy All Run function( ssids )
app/WriteFile.htm := WriteFile Back WriteFile Hello World Writes text to a local file. app.WriteFile( file, text, mode, encoding ) See Also: ReadFile. Example - Append file and get line count function OnStart() { app.WriteFile( "myFile.txt", "Hello World from Write\n", "Append" ); var txt = app.ReadFile("myFile.txt"); var length = txt.split("\n").length; app.ShowPopup("myFile contains " + length + " lines"); } Copy Copy All Run
app/ZipFile.htm := ZipFile Back ZipFile Hello World Compresses a local file to a zip file. app.ZipFile( source, destination, options ) See Also: ZipFolder Example - Zip File function OnStart() { var file = "/sdcard/DroidScript/Hello World/Hello World.js"; app.ZipFile( file, file + ".zip" ); app.ShowPopup( "Compressed to " + file + ".zip" ) } Copy All Run
app/ZipFolder.htm := ZipFolder Back ZipFolder Hello World Recursively compresses a local folder to a zip file. app.ZipFolder( source, destination, options ) See Also: ZipFile, UnzipFile Example - Zip Folder function OnStart() { var folder = "/sdcard/DroidScript/Hello World"; app.ZipFolder( folder, folder + ".zip" ); app.ShowPopup( "Compressed to " + folder + ".zip" ); } Copy All Run
gfx/AddBackground.htm := AddBackground Back AddBackground Hello World Adds a static background to your game. gfx.AddBackground( obj ) Example - Basic cfg.Game; function OnLoad() { sky = gfx.CreateBackground( "/Sys/Img/Sky.jpg", "stretch" ); } function OnReady() { gfx.AddBackground( sky ); gfx.Play(); } Copy Copy All Run
gfx/AddGraphic.htm := AddGraphic Back AddGraphic Hello World Adds a basic shape object to the game. gfx.AddGraphic( obj, x, y, w, h, angle, alpha ) See Also: CreateCircle, CreateEllipse, CreateRectangle, CreatePolygon Example - Basic cfg.Game; function OnLoad() { rect = gfx.CreateRectangle( 0.8, 0.1, 0xff, 3, 0x5555ff, 1, "floor" ); } function OnReady() { gfx.AddGraphic( rect, .1, 0.4 ); gfx.Play(); } Copy Copy All Run
gfx/AddPhysics.htm := AddPhysics Back AddPhysics Hello World Content: - Methods Adds the Box2D physics engine to your game. phs = gfx.AddPhysics( gravity, accuracy, sleep ) Example - Billiard cfg.Game; function OnLoad() { gfx.AddPhysics(0); gfx.Enclose( -1, "left,top,right,bottom", 1, 0.9, 0 ); ball1 = gfx.CreateSprite( "/Sys/Img/Forward.png" ); ball2 = gfx.CreateSprite( "/Sys/Img/Forward.png" ); } function OnReady() { gfx.AddSprite( ball1, 0.2, 0.6, 0.16 ); ball1.SetPhysics( 1, "Dynamic", 0.5, 0.8, 0.01 ); ball1.SetVelocity( 2, -2.3 ); ball1.SetShape( "round" ); gfx.AddSprite( ball2, 0.5, 0.6, 0.24 ); ball2.SetPhysics( 1, "Dynamic", 0.5, 0.8, 0.01 ); ball2.SetVelocity( 2, 2.3 ); ball2.SetShape( "round" ); gfx.Play(); } Copy Copy All Run Example - Collision cfg.Game; function OnLoad() { gfx.AddPhysics( 20 ); gfx.Enclose( -1, "left,top,right,bottom", 1, 0.9, 0.01 ); bunny = gfx.CreateSprite( "/Sys/Img/Bunny.png", "bunnies" ); squeak = gfx.CreateSound( "/Sys/Snd/Squeak.mp3" ); } function OnReady() { gfx.AddSprite( bunny, 0.2, 0.6, 0.05 ); bunny.SetPhysics( 1, "Dynamic", 0.5, 0.9, 0.1 ); bunny.SetVelocity( 2, -2.3 ); gfx.Play(); } function OnCollide( a, b ) { if( a.group == "bunnies" ) squeak.Play( false, 0, 0 ); } Copy Copy All Run The method list below shows the functions which are added to game objects when using physics. Methods The following methods are available on the Physics object: AddShape( type, points ) AddVelocity( x, y, angular, bodyRelative ) ApplyImpulse( x, y, offsetX, offsetY ) Contains( x, y ) → Boolean EnablePhysics( enable ) GetVelocity( component ) → Number RemovePhysics() SetMatrix( mtx ) SetPhysics( groupId, type, density, bounce, friction, linearDamp, angularDamp ) SetShape( shape, width, height ) SetVelocity( x, y, angular, bodyRelative ) UpdatePhysics()
gfx/AddSprite.htm := AddSprite Back AddSprite Hello World Adds a sprite object to the game. gfx.AddSprite( sprite, x, y, w, h, angle, alpha ) Example cfg.Game; function OnLoad() { droid = gfx.CreateSprite( "/Sys/Img/Hello.png" ); } function OnReady() { gfx.AddSprite( droid, 0.2, 0.4, 0.5 ); gfx.Play(); } Copy All Run
gfx/AddText.htm := AddText Back AddText Hello World Adds a text object to the game. gfx.AddText( obj, x, y, angle, alpha ) Example cfg.Game; function OnLoad() { text = gfx.CreateText( "Hello World", 40, "/Sys/Img/Desyrel.xml" ); } function OnReady() { gfx.AddText( text, 0.2, 0.4, 0.2 ); gfx.Play(); } Copy Copy All Run
gfx/AppExec.htm := AppExec Back AppExec Hello World Executes some code in the main app. gfx.AppExec( js ) Example cfg.Game; function OnLoad() { gfx.AppExec( "app.ShowPopup('Hello from Game')"); } function OnReady() {} Copy All Run
gfx/aspect.htm := aspect Back aspect Hello World The aspect ratio of the gfx container (display). gfx.aspect → Number Example - Square cfg.Game; function OnLoad() { square = gfx.CreateRectangle( 0.4, 0.4*gfx.aspect, 0x2255ff ) } function OnReady() { gfx.AddGraphic( square, 0.3, 0.2 ); gfx.Play(); } Copy All Run
gfx/CreateBackground.htm := CreateBackground Back CreateBackground Hello World Content: - Methods Creates a background. bck = gfx.CreateBackground( file, options ) → game object: Background Example - Scroll cfg.Game; function OnLoad() { sky = gfx.CreateBackground( "/Sys/Img/Sky.jpg", "stretch" ); } function OnReady() { gfx.AddBackground( sky ); gfx.Play(); } function OnAnimate(t,dt) { sky.Scroll(-dt/1000, 0); } Copy Copy All Run Methods The following methods are available on the Background object: loaded → Boolean Scroll( x, y )
gfx/CreateCircle.htm := CreateCircle Back CreateCircle Hello World Content: - Methods Creates a circular game object. cir = gfx.CreateCircle( width, color, lineWidth, lineColor, lineAlpha, group ) → game object: Circle Example cfg.Game; function OnLoad() { circle = gfx.CreateCircle( 0.4, 0xff1133, 6, 0x7799ff ); } function OnReady() { gfx.AddGraphic( circle, 0.3, 0.2 ); gfx.Play(); } Copy Copy All Run Methods The following methods are available on the Circle object: alpha → Number: fraction (0..1) angle → Number: fraction (0..1) Contains( x, y ) → Boolean data → Object graphic → Object group → String height → Number: fraction (0..1) pivotX → Number: fraction (0..1) pivotY → Number: fraction (0..1) scaleX → Number: factor scaleY → Number: factor SetMatrix( mtx ) Update() visible → Boolean width → Number
gfx/CreateEllipse.htm := CreateEllipse Back CreateEllipse Hello World Content: - Methods Creates a elliptical game object. elp = gfx.CreateEllipse( width, height, color, lineWidth, lineColor, lineAlpha, group ) → game object: Ellipse Example cfg.Game; function OnLoad() { ellipse = gfx.CreateEllipse( 0.7, 0.4*gfx.aspect, 0xcccc00, 10, 0xbb00ff ); } function OnReady() { gfx.AddGraphic( ellipse, 0.1, 0.2 ); gfx.Play(); } Copy Copy All Run Methods The following methods are available on the Ellipse object: alpha → Number: fraction (0..1) angle → Number: fraction (0..1) Contains( x, y ) → Boolean data → Object graphic → Object group → String height → Number: fraction (0..1) pivotX → Number: fraction (0..1) pivotY → Number: fraction (0..1) scaleX → Number: factor scaleY → Number: factor SetMatrix( mtx ) Update() visible → Boolean width → Number
gfx/CreatePolygon.htm := CreatePolygon Back CreatePolygon Hello World Content: - Methods Creates a polygonal game object. pol = gfx.CreatePolygon( points, pivotX, pivotY, color, lineWidth, lineColor, lineAlpha, group ) → game object: Polygon Example cfg.Game; function OnLoad() { polygon = gfx.CreatePolygon( [0.2,0.6, 0.8,0.6, 0.5,0.2, 0.2,0.6], 0, 0, 0x33ff55, 6, 0xcc1122 ); } function OnReady() { gfx.AddGraphic( polygon, 0.2, 0.7 ); gfx.Play(); } Copy Copy All Run Methods The following methods are available on the Polygon object: alpha → Number: fraction (0..1) angle → Number: fraction (0..1) Contains( x, y ) → Boolean data → Object graphic → Object group → String height → Number: fraction (0..1) pivotX → Number: fraction (0..1) pivotY → Number: fraction (0..1) scaleX → Number: factor scaleY → Number: factor SetMatrix( mtx ) Update() visible → Boolean width → Number
gfx/CreateRectangle.htm := CreateRectangle Back CreateRectangle Hello World Content: - Methods Creates a rectangular game object. rct = gfx.CreateRectangle( width, height, color, lineWidth, lineColor, lineAlpha, group ) → game object: Rectangle Example cfg.Game; function OnLoad() { rect = gfx.CreateRectangle( 0.4, 0.4, 0x00ffff, 6, 0xee3355 ); } function OnReady() { gfx.AddGraphic( rect, 0.3, 0.2 ); gfx.Play(); } Copy Copy All Run Methods The following methods are available on the Rectangle object: alpha → Number: fraction (0..1) angle → Number: fraction (0..1) Contains( x, y ) → Boolean data → Object graphic → Object group → String height → Number: fraction (0..1) pivotX → Number: fraction (0..1) pivotY → Number: fraction (0..1) scaleX → Number: factor scaleY → Number: factor SetMatrix( mtx ) Update() visible → Boolean width → Number
gfx/CreateSound.htm := CreateSound Back CreateSound Hello World Content: - Methods Creates a sound object which can play audio files. snd = gfx.CreateSound( file ) → game object: Sound Methods The following methods are available on the Sound object: file → String Pause() Play( loop, delay, gap )
gfx/CreateSprite.htm := CreateSprite Back CreateSprite Hello World Content: - Methods Creates a sprite object based on an image file containing a sprite or a spritesheet. spr = gfx.CreateSprite( file, group, callback ) → game object: CreateSprite To create a new Sprite just pass the image name as first parameter: gfx.CreateSprite( "/Sys/Img/Bunny.png", "bunnies" ); Spritesheets can be loaded in two ways: The simple one is a specific file pattern “Img/Sheetname_WIDTHxHEIGHTxSPRITE_SXxSPRITE_SY” or “Img/Sheetname_stripTOTAL_WIDTHxHEIGHTxSPRITE_SXxSPRITE_SY” if you have a different amount of sprites than the rectangle of spritesx * spritesy sprites. Example from the downloadable demo Grannies and Zombies: granny = gfx.CreateSprite( "Img/Granny_1600x1000x8x5", "granny" ); zombie = gfx.CreateSprite( "Img/Zombie_strip35_1400x1000x7x5", "zombie" ); The second way is to create a SpriteSheet using the CreateSpriteSheet method which might come handy if a single sprite has multiple animations or if a sprite is reused but using a different sprite sheet. Methods The following methods are available on the Sprite object: added → Boolean alpha → Number: fraction (0..1) angle → Number: fraction (0..1) aspect → Number Contains( x, y ) → Boolean data → Object Flip( horiz, vert ) GetFrame() → Number: integer Goto( frame ) group → String height → Number: fraction (0..1) PauseTween() pivotX → Number: fraction (0..1) pivotY → Number: fraction (0..1) Play( startFrame, speed, loop ) PlayRange( firstFrame, lastFrame, speed, loop ) PlayTo( frame ) PlayTween() scaleX → Number: factor scaleY → Number: factor SetLoop( loop ) SetMatrix( mtx ) SetPlaySpeed( speed ) SetRange( firstFrame, lastFrame, loop, play, speed ) SetSize( w, h ) SetSpriteSheet( sheet ) SetTexture( tx ) SetTween( target, duration, type, repeat, yoyo, callback ) StartTween() StepTween() Stop() StopAt( frame ) Tween( target, duration, type, repeat, yoyo, callback ) Update() visible → Boolean width → Number x → Number y → Number: fraction (0..1)
gfx/CreateSpriteSheet.htm := CreateSpriteSheet Back CreateSpriteSheet Hello World Content: - Methods Creates a SpriteSheet for an animation for instance. sht = gfx.CreateSpriteSheet( file, callback ) → game object: SpriteSheet See Also: CreateSprite Methods The following methods are available on the SpriteSheet object: data → Object loaded → Boolean
gfx/CreateText.htm := CreateText Back CreateText Hello World Content: - Methods Creates a text label which is used to display texts in your game. txt = gfx.CreateText( text, fontSize, fontFile, align, callback ) → game object: Text Methods The following methods are available on the Text object: align → String: “left” or “center” or “right” alpha → Number: fraction (0..1) angle → Number: fraction (0..1) Contains( x, y ) → Boolean file → String: path to file or folder ( “/absolute/...” or “relative/...” ) fontSize → Number: pixel height → Number: fraction (0..1) pivotX → Number: fraction (0..1) pivotY → Number: fraction (0..1) scaleX → Number: factor scaleY → Number: factor SetMatrix( mtx ) Update() visible → Boolean width → Number
gfx/CreateTexture.htm := CreateTexture Back CreateTexture Hello World Creates a base texture for Sprites. gfx.CreateTexture → game object: Texture Using textures is recommended if mand sprites use the same texture and is supposed to be faster because the texture needs to be loaded only once and is then shared across the sprites.
gfx/data.htm := data Back data Hello World GameView custom data. gfx.data → Object
gfx/EnablePhysics.htm := EnablePhysics Back EnablePhysics Hello World En/Disables the added Box2D physics engine in your game. gfx.EnablePhysics( enabled ) The methods added to your GameView objects are described in AddPhysics.
gfx/Enclose.htm := Enclose Back Enclose Hello World Enclose an area with a physics fence. gfx.Enclose( groupId, options, density, bounce, friction, offset )
gfx/GetJoystick.htm := GetJoystick Back GetJoystick Hello World Gets object containing joystick states. gfx.GetJoystick( id ) → Object
gfx/GetOrder.htm := GetOrder Back GetOrder Hello World Returns the order index of a specific GameView object. gfx.GetOrder( object ) → Number: integer
gfx/GetTime.htm := GetTime Back GetTime Hello World Returns the time since the last gfx.Pause or gfx.Play call. gfx.GetTime() → JavaScript object: Date
gfx/height.htm := height Back height Hello World Display height in pixels. gfx.height → Number: pixel
gfx/IsOverlap.htm := IsOverlap Back IsOverlap Hello World Tests if two GameView objects are overlapping. gfx.IsOverlap( obj1, obj2, depth ) → Boolean
gfx/IsPaused.htm := IsPaused Back IsPaused Hello World Returns whether the game is currently paused. gfx.IsPaused() → Boolean
gfx/isReady.htm := isReady Back isReady Hello World Indicates if the game is ready. gfx.isReady → Boolean This is set to true after OnReady was called.
gfx/keyDown.htm := keyDown Back keyDown Hello World Currently pressed key. gfx.keyDown → String
gfx/keyState.htm := keyState Back keyState Hello World Current pressed key state. gfx.keyState → String: “Down” or “Up”
gfx/multiTouch.htm := multiTouch Back multiTouch Hello World Enables multiple touch inputs. gfx.multiTouch → Boolean
gfx/objects.htm := objects Back objects Hello World List of all active GameView objects. gfx.objects → List: of objects
gfx/Pause.htm := Pause Back Pause Hello World Pauses the game. gfx.Pause()
gfx/Play.htm := Play Back Play Hello World Start or resume the game. gfx.Play()
gfx/Reload.htm := Reload Back Reload Hello World Restarts the game from scratch. gfx.Reload()
gfx/RemoveBackground.htm := RemoveBackground Back RemoveBackground Hello World Removes the background from the game. gfx.RemoveBackground( gvo-CreateBackground )
gfx/RemoveGraphic.htm := RemoveGraphic Back RemoveGraphic Hello World Removes a graphic from the game. gfx.RemoveGraphic( obj )
gfx/RemoveSprite.htm := RemoveSprite Back RemoveSprite Hello World Removes a sprite from the game. gfx.RemoveSprite( sprite )
gfx/RemoveText.htm := RemoveText Back RemoveText Hello World Removes the text from the game. gfx.RemoveText( obj )
gfx/Script.htm := Script Back Script Hello World Loads a local JavaScript file asynchronously to your app to make its functionality available in your game. gfx.Script( uri, callback )
gfx/SetBackColor.htm := SetBackColor Back SetBackColor Hello World Sets a solid background color for your game. gfx.SetBackColor( col )
gfx/SetOnCollide.htm := SetOnCollide Back SetOnCollide Hello World Define a callback which is called when two Physics objects collide. gfx.SetOnCollide( callback ) function( a, b )
gfx/SetOnKeyDown.htm := SetOnKeyDown Back SetOnKeyDown Hello World Define a callback function which is called when the user started pressing a key. gfx.SetOnKeyDown( callback ) function( key )
gfx/SetOnKeyUp.htm := SetOnKeyUp Back SetOnKeyUp Hello World Define a callback function which is called when the user released a key. gfx.SetOnKeyUp( callback ) function( key )
gfx/SetOnTouchDown.htm := SetOnTouchDown Back SetOnTouchDown Hello World Define a callback which is called when the user touches the screen. gfx.SetOnTouchDown( callback ) function( x, y )
gfx/SetOnTouchMove.htm := SetOnTouchMove Back SetOnTouchMove Hello World Define a callback which is called when the user drags te finger over the screen. gfx.SetOnTouchMove( callback ) function( x, y )
gfx/SetOnTouchUp.htm := SetOnTouchUp Back SetOnTouchUp Hello World Define a callback which is called when the user releases the finger the screen. gfx.SetOnTouchUp( callback ) function( x, y )
gfx/SetOrder.htm := SetOrder Back SetOrder Hello World Change the drawing order of an object. gfx.SetOrder( object, order )
gfx/SwapOrder.htm := SwapOrder Back SwapOrder Hello World Swap the drawing order of two GameView objects. gfx.SwapOrder( object1, object2 )
gfx/version.htm := version Back version Hello World The gfx version number starting from 1.1 in DS182b2
gfx/Vibrate.htm := Vibrate Back Vibrate Hello World Shortcut to app.Vibrate)
gfx/width.htm := width Back width Hello World Display width. gfx.width → Number: pixel
MUI/AddAlert.htm := AddAlert Back AddAlert Hello World Adds a nice pop-up at the top. alr = MUI.AddAlert( text, icon, color ) → Object See CreateAlert for a full documentation.
MUI/AddAlertSimple.htm := AddAlertSimple Back AddAlertSimple Hello World Adds a simple alert with a single button. als = MUI.AddAlertSimple( text, btnText, color ) → Object See CreateAlertSimple for a full documentation.
MUI/AddAppBar.htm := AddAppBar Back AddAppBar Hello World Adds an appbar on a given layout. apb = MUI.AddAppBar( parent, p1, p2, p3, options ) → Object See CreateAppBar, CreateAppBarElegant and CreateAppBarModern for a full documentation. The parameters p1, p2 and p3 depends on the type of appbar. Refer to each type for more info. Example for CreateAppBar and CreateAppBarElegant 'ps' is 'title', 'p2' is 'logoIcon' and 'p3' is 'controls'. For CreateAppBarModern 'p1' is 'hint','p2' is 'controlIcon' and 'p3' is 'color'. Example - AddAppBar cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") apb1 = MUI.AddAppBar(lay, "My Appbar", "menu", "search,more_vert", "Default") apb2 = MUI.AddAppBar(lay, "My Appbar", "menu", "search,more_vert", "Elegant") apb3 = MUI.AddAppBar(lay, "Search product", "search", null, "Modern,Round") apb3 = MUI.AddAppBar(lay, "Search product", "search", null, "Modern,Rectangle") app.AddLayout(lay) } Copy All Run
MUI/AddAppBarElegant.htm := AddAppBarElegant Back AddAppBarElegant Hello World Adds an elegant appbar on a given layout. abe = MUI.AddAppBarElegant( parent, title, leadingIcon, options ) → Object See CreateAppBarElegant for a full documentation.
MUI/AddAppBarModern.htm := AddAppBarModern Back AddAppBarModern Hello World Adds a modern appbar on a given layout. abm = MUI.AddAppBarModern( parent, hint, controlIcon, options, color ) → Object See CreateAppBarModern for a full documentation.
MUI/AddBanner.htm := AddBanner Back AddBanner Hello World Adds a banner dialog. bnr = MUI.AddBanner( text, okText, cancelText ) → Object See CreateBanner for a full documentation.
MUI/AddButton.htm := AddButton Back AddButton Hello World Adds a MUI button to a given layout. btn = MUI.AddButton( parent, text, width, height, options ) → Object See CreateButtonElegant, CreateButtonFlat, CreateButtonRaised, CreateButtonRaisedO, CreateButtonRound, and CreateButtonRoundO for full documentation Example - AddButton cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn1 = MUI.AddButton(lay, "Button 1", 0.35, null, "raised") btn2 = MUI.AddButton(lay, "Button 2", 0.35, null, "raisedo") btn3 = MUI.AddButton(lay, "Button 3", 0.35, null, "round") btn4 = MUI.AddButton(lay, "Button 4", 0.35, null, "roundo") btn5 = MUI.AddButton(lay, "Button 5", 0.35, null, "elegant") btn6 = MUI.AddButton(lay, "Button 6", 0.35, null, "outlined") btn7 = MUI.AddButton(lay, "Button 7", 0.35, null, "contained") btn8 = MUI.AddButton(lay, "Button 8", 0.35, null, "text") btn9 = MUI.AddButton(lay, "Button 9", 0.35, null, "flat") btn10 = MUI.AddButton(lay, "[fa-android] Android", 0.35, null, "text") btn11 = MUI.AddButton(lay, "[fa-folder] Folder", 0.35, null, "flat") app.AddLayout(lay) } Copy All Run
MUI/AddButtonContained.htm := AddButtonContained Back AddButtonContained Hello World Adds a contained material button on a given layout. btc = MUI.AddButtonContained( parent, text, width, height ) → Object See CreateButtonContained for full documentation.
MUI/AddButtonElegant.htm := AddButtonElegant Back AddButtonElegant Hello World Add an elegant button on a given layout. bte = MUI.AddButtonElegant( parent, text, width, height, color ) → Object See CreateButtonElegant for full documentation.
MUI/AddButtonFlat.htm := AddButtonFlat Back AddButtonFlat Hello World Adds a flat button on given layout. btf = MUI.AddButtonFlat( parent, text, width, height, color, backColor ) → Object See CreateButtonFlat for full documentation.
MUI/AddButtonOutlined.htm := AddButtonOutlined Back AddButtonOutlined Hello World An outlined material button. bto = MUI.AddButtonOutlined( parent, text, width, height ) → Object See CreateButtonOutlined for full documentation
MUI/AddButtonRaised.htm := AddButtonRaised Back AddButtonRaised Hello World Adds a raised material button on a given layout. btr = MUI.AddButtonRaised( parent, text, width, height, color, txtcolor ) → Object See CreateButtonRaised for full documentation.
MUI/AddButtonRaisedO.htm := AddButtonRaisedO Back AddButtonRaisedO Hello World Adds an outlined material raised button on a given layout. bro = MUI.AddButtonRaisedO( parent, text, width, height, color, backColor ) → Object See CreateButtonRaisedO for full documentation.
MUI/AddButtonRound.htm := AddButtonRound Back AddButtonRound Hello World Adds a round material button on a given layout. btr = MUI.AddButtonRound( parent, text, width, height, color, txtcolor ) → Object See CreateButtonRound for full documentation.
MUI/AddButtonRoundO.htm := AddButtonRoundO Back AddButtonRoundO Hello World Adds an outlined material round button on a given layout. bro = MUI.AddButtonRoundO( parent, text, width, height, color, backColor ) → Object See CreateButtonRoundO for full documentation.
MUI/AddButtonText.htm := AddButtonText Back AddButtonText Hello World Adds a text button on a given layout. btt = MUI.AddButtonText( parent, text, width, height ) → Object See CreateButtonFlat for full documentation.
MUI/AddButtonToggle.htm := AddButtonToggle Back AddButtonToggle Hello World Adds a toggleable button on a given layout. btt = MUI.AddButtonToggle( parent, text, width, height, value, callback ) → Object See CreateButtonToggle for a full documentation.
MUI/AddCard.htm := AddCard Back AddCard Hello World Adds a card on a given layout. crd = MUI.AddCard( parent, options ) → Object See CreateCard for a full documentation.
MUI/AddCheckbox.htm := AddCheckbox Back AddCheckbox Hello World Adds an MUI Checkbox on a given layout. chc = MUI.AddCheckbox( parent, list, width, height, color ) → Object See CreateCheckbox for a full documentation.
MUI/AddCheckList.htm := AddCheckList Back AddCheckList Hello World Adds an MUI checklist dialog. chl = MUI.AddCheckList( textEdit, title, list, color, bottom ) → Object See CreateCheckList for a full documentation.
MUI/AddColorPicker.htm := AddColorPicker Back AddColorPicker Hello World Adds a color picker. clp = MUI.AddColorPicker( textEdit, title ) → Object See CreateColorPicker for a full documentation.
MUI/AddDataTable.htm := AddDataTable Back AddDataTable Hello World Adds a table control on a given layout. tbl = MUI.AddDataTable( parent, columns, values, width, height, options ) → Object See CreateDataTable for a full documentation.
MUI/AddDatePicker.htm := AddDatePicker Back AddDatePicker Hello World Adds a date picker dialog. dtp = MUI.AddDatePicker( textEdit, yyyy, mm, dd, color ) → Object See CreateDatePicker for a full documentation.
MUI/AddDialog.htm := AddDialog Back AddDialog Hello World Adds a customizable materialize dialog. dlg = MUI.AddDialog( title, body, okText, cancelText, divider ) → Object See CreateDialog for a full documentation.
MUI/AddDivider.htm := AddDivider Back AddDivider Hello World Adds a divider to a given layout. dvd = MUI.AddDivider( parent, height ) → Object See CreateDivider for a full documentation.
MUI/AddFAB.htm := AddFAB Back AddFAB Hello World Adds a floating action button. fab = MUI.AddFAB( parent, icon, color, options ) → Object See CreateFAB, CreateFABElegant and CreateFABOutline for a full documentation. Example - AddFAB cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") fab1 = MUI.AddFAB(lay, "favorite", null, "default") fab2 = MUI.AddFAB(lay, "favorite", MUI.colors.deepPurple.lighten1, "outline") fab3 = MUI.AddFAB(lay, "favorite", MUI.colors.teal.darken1, "elegant") app.AddLayout(lay) } Copy All Run
MUI/AddFABElegant.htm := AddFABElegant Back AddFABElegant Hello World Adds an elegant floating action button. fab = MUI.AddFABElegant( parent, icon, color ) → Object See CreateFABElegant for a full documentation.
MUI/AddFABOutline.htm := AddFABOutline Back AddFABOutline Hello World Adds an outlined floating action button on a given layout. fab = MUI.AddFABOutline( parent, icon, color, backColor ) → Object See CreateFABOutline for a full documentation.
MUI/AddLayout.htm := AddLayout Back AddLayout Hello World Adds a layout. lay = MUI.AddLayout( parent, type, options ) → Object See CreateLayout for a full documentation.
MUI/AddList.htm := AddList Back AddList Hello World Adds an MUI control on a given layout. lst = MUI.AddList( parent, list, width, height, options ) → Object See CreateList, CreateListModern and CreateListSimple for a full documentation.
MUI/AddListDialog.htm := AddListDialog Back AddListDialog Hello World Adds a more customizable list dialog or checklist dialog. lsd = MUI.AddListDialog( textEdit, title, list, color, options ) → Object See CreateListDialog and CreateCheckList for a full documentation on each type. Example - AddPicker cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tlsd = MUI.AddTextEdit(lay, 0.7, "outline", "Enter time", true) tlsd.SetOnTouch( ShowListDialog ) tckl = MUI.AddTextEdit(lay, 0.7, "outline", "Enter date", true) tckl.SetOnTouch( ShowChecklist ) // using buttons btn1 = MUI.AddButton(lay, "Show ListDialog", null, null, "Outline") btn1.SetOnTouch( ShowListDialog ) btn2 = MUI.AddButton(lay, "Show Checklist", null, null, "Outline") btn2.SetOnTouch( ShowChecklist ) app.AddLayout( lay ) lst = [ {name: "Choice 1"}, {name: "Choice 2"}, {name: "Choice 3"}, {name: "Choice 4"} ] lsd = MUI.AddListDialog(tlsd, "List Title", lst, null, "ListDialog") ckl = MUI.AddListDialog(tckl, "List Title", lst, "#673ab7", "checklist") } function ShowListDialog() { lsd.Show() } function ShowChecklist() { ckl.Show() } Copy All Run
MUI/AddListModern.htm := AddListModern Back AddListModern Hello World Adds a ListModern control on a given layout. lsm = MUI.AddListModern( parent, list, width, height, options ) → Object See CreateListModern for a full documentation.
MUI/AddListSimple.htm := AddListSimple Back AddListSimple Hello World Adds a simple list for navigation purposes. lss = MUI.AddListSimple( parent, list, width, height, options ) → app object See CreateListSimple for a full documentation.
MUI/AddMenu.htm := AddMenu Back AddMenu Hello World Adds a simple MUI menu. mn = MUI.AddMenu( list, width, height, position ) → Object See CreateMenu for a full documentation.
MUI/AddMenuWithIcon.htm := AddMenuWithIcon Back AddMenuWithIcon Hello World MUI menu with material icon font. mwi = MUI.AddMenuWithIcon( list, width, height, position ) → Object See CreateMenuWithIcon for a full documentation.
MUI/AddModal.htm := AddModal Back AddModal Hello World Adds a modal. mdl = MUI.AddModal( title, body, okTxt, cancelTxt, options ) → Object See CreateModal for a full documentation.
MUI/AddPicker.htm := AddPicker Back AddPicker Hello World Adds a picker dialog such as time, date or color. pck = MUI.AddPicker( textEdit, options ) → Object See CreateDatePicker, CreateTimePicker and CreateColorPicker for a full documentation. Example - AddPicker cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") ttime = MUI.AddTextEdit(lay, 0.7, "outline", "Enter time", true) ttime.SetOnTouch( ShowTimePicker ) tdate = MUI.AddTextEdit(lay, 0.7, "outline", "Enter date", true) tdate.SetOnTouch( ShowDatePicker ) tcolor = MUI.AddTextEdit(lay, 0.7, "outline", "Enter color", true) tcolor.SetOnTouch( ShowColorPicker ) app.AddLayout( lay ) tPkr = MUI.AddPicker(ttime, "time") dPkr = MUI.AddPicker(tdate, "date") cPkr = MUI.AddPicker(tcolor, "color") } function ShowTimePicker() { tPkr.Show() } function ShowDatePicker() { dPkr.Show() } function ShowColorPicker() { cPkr.Show() } Copy All Run
MUI/AddRadio.htm := AddRadio Back AddRadio Hello World Adds a radio material input. rd = MUI.AddRadio( parent, list, width, height, options, p1, color, backColor ) → Object See CreateRadio, CreateRadioButtons and CreateRadioMaterial for a full documentation. The param p1 depends on the type of an MUI button. It can be a color for normal radio or orientation 'vertical or horizontal' for material and button type. Example - AddPicker cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") scr = app.AddScroller(lay, 1, 1, "") lay2 = MUI.CreateLayout("Linear") lst = "Orange,Banana,Mango,Apple" rad1 = MUI.AddRadio(lay, lst, 0.75, null, "Default") rad2 = MUI.AddRadio(lay, lst, 0.75, null, "Material") rad3 = MUI.AddRadio(lay, lst, 0.75, null, "Material", true) rad4 = MUI.AddRadio(lay, lst, 0.75, null, "Button") rad5 = MUI.AddRadio(lay, lst, 0.75, null, "Button", true) scr.AddChild( lay2 ) app.AddLayout( lay ) } Copy All Run
MUI/AddRadioButtons.htm := AddRadioButtons Back AddRadioButtons Hello World Adds an MUI radio button control. rdb = MUI.AddRadioButtons( parent, list, width, height, orientation, color, backColor ) → Object See CreateRadioButtons for a full documentation.
MUI/AddRadioMaterial.htm := AddRadioMaterial Back AddRadioMaterial Hello World Adds an MUI RadioMaterial input. rdm = MUI.AddRadioMaterial( parent, list, width, height, orientation, color, backColor ) → Object See CreateRadioMaterial for a full documentation.
MUI/AddSeekBar.htm := AddSeekBar Back AddSeekBar Hello World Adds an MUI seekbar on a given layout. skb = MUI.AddSeekBar( parent, value, range, width, color ) → Object See CreateSeekBar for a full documentation.
MUI/AddSwitch.htm := AddSwitch Back AddSwitch Hello World Adds an MUI Switch to a given control. swt = MUI.AddSwitch( parent, value, color ) → Object See CreateSwitch for a full documentation.
MUI/AddSwitchSettings.htm := AddSwitchSettings Back AddSwitchSettings Hello World Adds an MUI SwitchSettings to a given layout. sws = MUI.AddSwitchSettings( parent, text, width, height, value, color, backColor ) → Object See CreateSwitchSettings for a full documentation.
MUI/AddTabs.htm := AddTabs Back AddTabs Hello World Adds an MUI tab on a given layout. tbf = MUI.AddTabs( parent, title, width, height, options, color, animation ) → Object See CreateTabFixed for a full documentation. Example - AddPicker cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "FillXY") tab = MUI.AddTabs(lay, "Movies,Games,Books", 1, 1, "fix") app.AddLayout( lay ) } Copy All Run
MUI/AddTEFilledIconLeft.htm := AddTEFilledIconLeft Back AddTEFilledIconLeft Hello World Adds a filled text input with icon on the left on the given layout. tef = MUI.AddTEFilledIconLeft( parent, width, options, icon, hint, label, color ) → Object See CreateTEFilledIconLeft for full documentation.
MUI/AddTEFilledIconRight.htm := AddTEFilledIconRight Back AddTEFilledIconRight Hello World Adds a filled text input with icon on the right on a given layout. tef = MUI.AddTEFilledIconRight( parent, width, options, icon, hint, label, color ) → Object See CreateTEFilledIconRight for full documentaion.
MUI/AddTEOutlineIconLeft.htm := AddTEOutlineIconLeft Back AddTEOutlineIconLeft Hello World Adds a material outlined text input with icon on the left on a given layout. teo = MUI.AddTEOutlineIconLeft( parent, width, options, icon, hint, label, color, backColor ) → Object See CreateTEOutlineIconLeft for full documentation.
MUI/AddTEOutlineIconRight.htm := AddTEOutlineIconRight Back AddTEOutlineIconRight Hello World Adds a material outlined text input with icon on the right on a given layout. teo = MUI.AddTEOutlineIconRight( parent, width, options, icon, hint, label, color, backColor ) → Object See CreateTEOutlineIconRight for full documenation.
MUI/AddTESearchElegant.htm := AddTESearchElegant Back AddTESearchElegant Hello World Adds an elegant search textedit on a given layout. tes = MUI.AddTESearchElegant( parent, width, hint, icon, iconPos, color, option ) → Object See CreateTESearchElegant for full documentation.
MUI/AddTESearchUnique.htm := AddTESearchUnique Back AddTESearchUnique Hello World Adds a unique text input on a given layout. tes = MUI.AddTESearchUnique( parent, width, hint, icon, iconColor ) → Object See CreateTESearchUnique for full documentation.
MUI/AddText.htm := AddText Back AddText Hello World Adds a mui text control to the layout. txt = MUI.AddText( parent, text, width, height, options, color ) → Object See CreateTextH1, CreateTextH2, CreateTextH3, CreateTextH4, CreateTextH5, CreateTextH6, CreateTextJumbo, CreateTextParagraph and CreateTextSecondary for full documentation on each type of mui typhography. Example - All Typography cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") text = "Lorem ipsum dolor set amit" h1 = MUI.AddText(lay, "text", 0.8, null, "h1,Medium") h2 = MUI.AddText(lay, "text", 0.8, null, "h2,Bold") h3 = MUI.AddText(lay, "text", 0.8, null, "h3,Light") h4 = MUI.AddText(lay, "text", 0.8, null, "h4,Regular") h5 = MUI.AddText(lay, "text", 0.8, null, "h5,Medium") h6 = MUI.AddText(lay, "text", 0.8, null, "h6") p = MUI.AddText(lay, "text", 0.8, null, "paragraph,thin") j = MUI.AddText(lay, "text", 0.8, null, "h1,Medium") s = MUI.AddText(lay, "text", 0.8, null, "secondary,light") app.AddLayout(lay) } Copy All Run
MUI/AddTextArea.htm := AddTextArea Back AddTextArea Hello World Adds a material textarea on a given layout. txa = MUI.AddTextArea( parent, width, height, options, hint, label, color, backColor ) → Object See CreateTextAreaFilled, CreateTextAreaFilledA, CreateTextAreaOutline and CreateTextAreaOutlineA for a full documentation on each corresponding type. Example - AddTextArea cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") ted1 = MUI.AddTextArea(lay, 0.8, "filled", "Enter message", true) ted1 = MUI.AddTextArea(lay, 0.8, "filled,active", "Enter message", true) ted1 = MUI.AddTextArea(lay, 0.8, "outlined", "Enter message", true) ted1 = MUI.AddTextArea(lay, 0.8, "outlined,active", "Enter message", true) app.AddLayout(lay) } Copy All Run
MUI/AddTextAreaFilled.htm := AddTextAreaFilled Back AddTextAreaFilled Hello World Add a material filled textarea on a given layout. taf = MUI.AddTextAreaFilled( parent, width, height, hint, label, color ) → Object See CreateTextAreaFilled for a full documentation.
MUI/AddTextAreaFilledA.htm := AddTextAreaFilledA Back AddTextAreaFilledA Hello World Adds an active filled textarea on a given layout. taf = MUI.AddTextAreaFilledA( parent, width, height, hint, label, color ) → Object See CreateTextAreaFilledA for a full documentation.
MUI/AddTextAreaOutline.htm := AddTextAreaOutline Back AddTextAreaOutline Hello World Add an outlined material textarea on a given layout. tao = MUI.AddTextAreaOutline( parent, width, height, hint, label, color, backColor ) → Object See CreateTextAreaOutline for a full documentation.
MUI/AddTextAreaOutlineA.htm := AddTextAreaOutlineA Back AddTextAreaOutlineA Hello World Add an active outlined material textarea on a given layout. tao = MUI.AddTextAreaOutlineA( parent, width, height, hint, label, color, backColor ) → Object See CreateTextAreaOutlineA for a full documentation.
MUI/AddTextEdit.htm := AddTextEdit Back AddTextEdit Hello World Adds a TextEdit control to a given layout. ted = MUI.AddTextEdit( parent, width, options, p1, p2, p3, p4, p5 ) → Object See CreateTextEditFilled, CreateTextEditFilledA, CreateTextEditOutline, CreateTextEditOutlineA, CreateTEFilledIconLeft, CreateTEFilledIconRight, CreateTEOutlineIconLeft, CreateTEOutlineIconRight, CreateTESearchElegant, CreateTESearchUnique, CreateTextEditSearch and CreateTextEditUnique for full documentation on each type of MUI TextEdit. For p1, p2, p3, p4 and p5 parameters, these are the params after the options. You can refer to the corresponding Create* method to see what this parameters are. Example for CreateTextEditFilled 'p1' is 'hint', 'p2' is 'label' and 'p3' is 'color'. For CreateTextEditOutline 'p1' is 'hint', 'p2' is 'label', 'p3' is 'color' and 'p4' is 'backColor'. Example - AddTextEdit cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") ted1 = MUI.AddTextEdit(lay, 0.8, "filled", "Enter Name", true) ted1 = MUI.AddTextEdit(lay, 0.8, "filled,active,password", "Enter password", true) ted1 = MUI.AddTextEdit(lay, 0.8, "outline,number", "Enter Number", true) ted1 = MUI.AddTextEdit(lay, 0.8, "outline,active", "Enter PIN", true) ted1 = MUI.AddTextEdit(lay, 0.8, "elegant", "Enter name") ted1 = MUI.AddTextEdit(lay, 0.8, "outline,icon,left", "person", "Enter name", true) ted1 = MUI.AddTextEdit(lay, 0.8, "outline,icon,right", "password", "Enter password", true) app.AddLayout(lay) } Copy All Run
MUI/AddTextEditFilled.htm := AddTextEditFilled Back AddTextEditFilled Hello World Adds the most common type of material text input on a given layout. tef = MUI.AddTextEditFilled( parent, width, options, hint, label, color ) → Object See CreateTextEditFilled for a full documentation.
MUI/AddTextEditFilledA.htm := AddTextEditFilledA Back AddTextEditFilledA Hello World Add an active filled material text input on a given layout. tef = MUI.AddTextEditFilledA( parent, width, options, hint, label, color ) → Object See CreateTextEditFilledA for a full documentation.
MUI/AddTextEditOutline.htm := AddTextEditOutline Back AddTextEditOutline Hello World Adds an outlined material text input on a given layout. teo = MUI.AddTextEditOutline( parent, width, options, hint, label ) → Object See CreateTextEditOutline for full documentation.
MUI/AddTextEditOutlineA.htm := AddTextEditOutlineA Back AddTextEditOutlineA Hello World Adds an active outlined material text input on a given layout. teo = MUI.AddTextEditOutlineA( parent, width, options, hint, label, color, backColor ) → Object See CreateTextEditOutlineA for a full documentation.
MUI/AddTextEditSearch.htm := AddTextEditSearch Back AddTextEditSearch Hello World Adds a customize search style text input on given layout. tes = MUI.AddTextEditSearch( parent, width, options, hint, color, backColor ) → Object See CreateTextEditSearch for a full documentation.
MUI/AddTextEditUnique.htm := AddTextEditUnique Back AddTextEditUnique Hello World Adds a unique textedit customization on a given layout. teu = MUI.AddTextEditUnique( parent, width, hint, icon, iconCOlor ) → Object See CreateTextEditUnique for a full documentation.
MUI/AddTextH1.htm := AddTextH1 Back AddTextH1 Hello World Adds an H1 text to a layout. txh = MUI.AddTextH1( parent, text, width, height, options, color, fontWeight ) → Object See CreateTextH1 for full documentation.
MUI/AddTextH2.htm := AddTextH2 Back AddTextH2 Hello World Adds an H2 text to a layout. txh = MUI.AddTextH2( parent, text, width, height, options, color, fontWeight ) → Object See CreateTextH2 for full documentation.
MUI/AddTextH3.htm := AddTextH3 Back AddTextH3 Hello World Adds an H3 text to a layout. txh = MUI.AddTextH3( parent, text, width, height, options, color, fontWeight ) → Object See CreateTextH3 for full documentation.
MUI/AddTextH4.htm := AddTextH4 Back AddTextH4 Hello World Adds an H4 text to a layout. txh = MUI.AddTextH4( parent, text, width, height, options, color, fontWeight ) → Object See CreateTextH4 for full documentation.
MUI/AddTextH5.htm := AddTextH5 Back AddTextH5 Hello World Adds an H5 text to a layout. txh = MUI.AddTextH5( parent, text, width, height, options, color, fontWeight ) → Object See CreateTextH5 for full documentation.
MUI/AddTextH6.htm := AddTextH6 Back AddTextH6 Hello World Adds an H6 text to a layout. txh = MUI.AddTextH6( parent, text, width, height, options, color, fontWeight ) → Object See CreateTextH6 for full documentation.
MUI/AddTextJumbo.htm := AddTextJumbo Back AddTextJumbo Hello World Adds an extra large text to a layout. txj = MUI.AddTextJumbo( parent, text, width, height, options, color ) → Object See CreateTextJumbo for full documentation.
MUI/AddTextParagraph.htm := AddTextParagraph Back AddTextParagraph Hello World Adds a paragraph text to a layout. txp = MUI.AddTextParagraph( parent, text, width, height, options, color, fontWeight ) → Object See CreateTextParagraph for full documentation.
MUI/AddTextSecondary.htm := AddTextSecondary Back AddTextSecondary Hello World Adds a secondary text to a layout. txp = MUI.AddTextSecondary( parent, text, width, height, options, color, fontWeight ) → Object See CreateTextSecondary for full documentation.
MUI/AddTimePicker.htm := AddTimePicker Back AddTimePicker Hello World Adds a timepicker dialog. tmp = MUI.AddTimePicker( textEdit, hour, minute, color ) → Object See CreateTimePicker for a full documentation.
MUI/colors.htm := colors Back colors Hello World Content: - Base color objects MUI colors are accessible through the colors property of the MUI object. MUI.colors → Object Tip. To avoid longer lines assign the color set to a variable var gray = MUI.colors.blueGray To select a color and shading choose the right property of the base color objects: lighten4, lighten3, lighten2, lighten1, darken1, darken2, darken3, darken4. Example - All Colors From Green cfg.Light cfg.MUI function OnStart() { color = MUI.colors.green lay = MUI.CreateLayout("Linear", "VCenter, FillXY") btn1 = MUI.CreateButtonRaised("LIGHTEN4", 0.35, null, color.lighten4) lay.AddChild(btn1) btn2 = MUI.CreateButtonRaised("LIGHTEN3", 0.35, null, color.lighten3) lay.AddChild(btn2) btn3 = MUI.CreateButtonRaised("LIGHTEN2", 0.35, null, color.lighten2) lay.AddChild(btn3) btn4 = MUI.CreateButtonRaised("LIGHTEN1", 0.35, null, color.lighten1) lay.AddChild(btn4) btn5 = MUI.CreateButtonRaised("GREEN", 0.35, null, color.green) lay.AddChild(btn5) btn6 = MUI.CreateButtonRaised("DARKEN1", 0.35, null, color.darken1) lay.AddChild(btn6) btn7 = MUI.CreateButtonRaised("DARKEN2", 0.35, null, color.darken2) lay.AddChild(btn7) btn8 = MUI.CreateButtonRaised("DARKEN3", 0.35, null, color.darken3) lay.AddChild(btn8) btn9 = MUI.CreateButtonRaised("DARKEN4", 0.35, null, color.darken4) lay.AddChild(btn9) app.AddLayout(lay) } Copy All Run Example - Change Layout Background cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal lay = MUI.CreateLayout("linear", "FillXY,VCenter") btn = MUI.CreateButtonRaised("Choose Color", 0.4) btn.SetOnTouch(ShowDialog) lay.AddChild(btn) app.AddLayout(lay) var choices = [ {name: "lighten4"}, {name: "lighten3"}, {name: "lighten2"}, {name: "lighten1"}, {name: "teal"}, {name: "darken1"}, {name: "darken2"}, {name: "darken3"}, {name: "darken4"} ] lsd = MUI.CreateListDialog("Select Color", choices) lsd.SetOnSelect(OnSelect) } function ShowDialog() { lsd.Show() } function OnSelect(name) { lay.SetBackColor(color[name]) } Copy All Run Base color objects MUI.colors.red MUI.colors.pink MUI.colors.purple MUI.colors.deepPurple MUI.colors.indigo MUI.colors.blue MUI.colors.lightBlue MUI.colors.cyan MUI.colors.green MUI.colors.lightGreen MUI.colors.lime MUI.colors.yellow MUI.colors.amber MUI.colors.orange MUI.colors.deepOrange MUI.colors.brown MUI.colors.gray MUI.colors.blueGray
MUI/CreateAlert.htm := CreateAlert Back CreateAlert Hello World Content: - Methods A nice pop-up at the top of your current layout. alr = MUI.CreateAlert( text, icon, color ) → Object Example - No icon cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) var text = "This is a sample text for the popup." alr = MUI.CreateAlert(text) alr.Show() } Copy All Run Example - With icon cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) var text = "This is a sample text for the popup." alr = MUI.CreateAlert(text, "message") alr.Show() setTimeout(CloseAlert, 4000) } function CloseAlert() { alr.Hide() } Copy All Run Example - On close function cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) var text = "This is a sample text for the popup." alr = MUI.CreateAlert(text, "message", MUI.colors.blue.darken2) alr.SetOnClose(AlertOnClose) alr.Show() } function AlertOnClose(val) { if(val) app.ShowPopup("You close me!") } Copy All Run Methods The following methods are available on the Alert object: ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetOnClose( callback ) SetText( text ) Show() function( isBtnClick )
MUI/CreateAlertSimple.htm := CreateAlertSimple Back CreateAlertSimple Hello World Content: - Methods Create a simple alert with a single button. als = MUI.CreateAlertSimple( text, btnText, color ) → Object Example - Simple cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) var text = "This is a sample alert text." als = MUI.CreateAlertSimple(text) als.Show() } Copy All Run Example - Custom cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) var text = "This is a sample alert text." als = MUI.CreateAlertSimple(text, "GOT IT", color.darken2) als.Show() setTimeout(CloseAlert, 4000) } function CloseAlert() { als.Hide() } Copy All Run Example - Dark cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btnShow = MUI.CreateButtonRound("SHOW ALERT") btnShow.SetOnTouch(ShowAlert) lay.AddChild(btnShow) app.AddLayout(lay) var text = "This is a sample alert text." als = MUI.CreateAlertSimple(text, "GOT IT", MUI.colors.green.darken2) als.SetOnTouch(AlertOnTouch) } function ShowAlert() { als.Show() } function AlertOnTouch(val) { app.ShowPopup(val) } Copy All Run Methods The following methods are available on the AlertSimple object: ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetEnabled( enable ) SetHtml( str ) SetOnTouch( callback ) SetText( text ) SetTextColor( color ) SetVisibility( mode ) Show() function( isBtnClick )
MUI/CreateAppBar.htm := CreateAppBar Back CreateAppBar Hello World Content: - Methods The most common type of material design app bar. apb = MUI.CreateAppBar( title, leadingIcon, controls ) → Object Example - Just a title cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Absolute", "FillXY") apb = MUI.CreateAppBar("My Title") var apbHeight = apb.GetHeight() scr = app.CreateScroller(1, 1, "NoScrollBar") pageLay = MUI.CreateLayout("Linear") pageLay.SetSize(1, 1.5) pageLay.SetPadding(0, 0, apbHeight, 0) var txt = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod ..." pageLay.AddChild( MUI.CreateTextParagraph(txt) ) scr.AddChild(pageLay) lay.AddChild(scr) lay.AddChild(apb) app.AddLayout(lay) /* * We add the app bar after the scroller to make sure * that the app bar will stay on top of * the page layout * * Btw, apb.GetHeight() is a function that returns the exact height of the appbar */ } Copy All Run Example - Sample page cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) layHome = MUI.CreateLayout("Linear", "VCenter,FillXY") btn = MUI.CreateButtonRaised("SHOW PAGE", 0.5) btn.SetOnTouch(ShowPage) layHome.AddChild(btn) app.AddLayout(layHome) lay = MUI.CreateLayout("Absolute", "FillXY") lay.Hide() apb = MUI.CreateAppBar("My Title", "arrow_back", "search") apb.SetOnMenuTouch(OnMenuTouch) var apbHeight = apb.GetHeight() scr = app.CreateScroller(1, 1, "NoScrollBar") pageLay = MUI.CreateLayout("Linear") pageLay.SetSize(1, 1.5) pageLay.SetPadding(0, 0, apbHeight, 0) var txt = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod ..." pageLay.AddChild( MUI.CreateTextParagraph(txt) ) scr.AddChild(pageLay) lay.AddChild(scr) lay.AddChild(apb) app.AddLayout(lay) } function ShowPage() { lay.Animate("SlideFromBottom") } function OnMenuTouch() { lay.Animate("SlideToBottom") } Copy All Run Example - Complete controls cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Absolute", "FillXY") apb = MUI.CreateAppBar("My Title", "menu", "search,more_vert") var apbHeight = apb.GetHeight() scr = app.CreateScroller(1, 1, "NoScrollBar") pageLay = MUI.CreateLayout("Linear", "VCenter") pageLay.SetSize(1, 1.2) pageLay.SetPadding(0, 0, apbHeight, 0) var txt = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod ..." pageLay.AddChild( MUI.CreateTextParagraph(txt) ) scr.AddChild(pageLay) lay.AddChild(scr) lay.AddChild(apb) app.AddLayout(lay) } Copy All Run Example - Dark mode cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Absolute", "FillXY") apb = MUI.CreateAppBar("My Title", "menu", "search,more_vert") apb.SetOnMenuTouch(OnMenuTouch) apb.SetOnControlTouch(OnControlTouch) var apbHeight = apb.GetHeight() scr = app.CreateScroller(1, 1, "NoScrollBar") pageLay = MUI.CreateLayout("Linear") pageLay.SetSize(1, 1.5) pageLay.SetPadding(0, 0, apbHeight, 0) var txt = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod ..." pageLay.AddChild( MUI.CreateTextParagraph(txt) ) scr.AddChild(pageLay) lay.AddChild(scr) lay.AddChild(apb) app.AddLayout(lay) } function OnMenuTouch() { app.ShowPopup("You click the menu. Might as well display a drawer.") } function OnControlTouch(text, index) { app.ShowPopup("You click " + text + ": Control index = "+index) } Copy All Run Methods The following methods are available on the AppBar object: ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetEnabled( enable ) SetMenuIcon( newIcon ) SetMenuIconColor( newColor ) SetOnControlTouch( callback ) SetOnMenuTouch( callback ) SetPosition( left, top, width, height, options ) SetTitleText( newTitle ) SetTitleTextColor( newColor ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( btnTxt, index )
MUI/CreateAppBarElegant.htm := CreateAppBarElegant Back CreateAppBarElegant Hello World Content: - Methods A more elegant appbar implementation. abe = MUI.CreateAppBarElegant( title, leadingIcon, options ) → Object Example - Just a title cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Absolute", "FillXY") apb = MUI.CreateAppBarElegant("My Title") var apbHeight = apb.GetHeight() scr = app.CreateScroller(1, 1, "NoScrollBar") pageLay = MUI.CreateLayout("Linear", "VCenter") pageLay.SetSize(1, 1.2) pageLay.SetPadding(0, 0, apbHeight, 0) var txt = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod ..." pageLay.AddChild( MUI.CreateTextParagraph(txt) ) scr.AddChild(pageLay) lay.AddChild(scr) lay.AddChild(apb) app.AddLayout(lay) /* * We add the app bar after the scroller to make sure * that the app bar will stay on top of * the page layout * * Btw, apb.GetHeight() is a function that returns the exact height of the appbar */ } Copy All Run Example - Sample page cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Absolute", "FillXY") apb = MUI.CreateAppBar("My Title", "arrow_back", "search") apb.SetOnMenuTouch(OnMenuTouch) var apbHeight = apb.GetHeight() scr = app.CreateScroller(1, 1, "NoScrollBar") pageLay = MUI.CreateLayout("Linear", "VCenter") pageLay.SetSize(1, 1.2) pageLay.SetPadding(0, 0, apbHeight, 0) var txt = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod ..." pageLay.AddChild( MUI.CreateTextParagraph(txt) ) scr.AddChild(pageLay) lay.AddChild(scr) lay.AddChild(apb) app.AddLayout(lay) } function OnMenuTouch() { lay.Animate("SlideToBottom") } Copy All Run Example - Complete controls cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Absolute", "FillXY") apb = MUI.CreateAppBar("My Title", "menu", "search,more_vert") var apbHeight = apb.GetHeight() scr = app.CreateScroller(1, 1, "NoScrollBar") pageLay = MUI.CreateLayout("Linear", "VCenter") pageLay.SetSize(1, 1.2) pageLay.SetPadding(0, 0, apbHeight, 0) var txt = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod ..." pageLay.AddChild( MUI.CreateTextParagraph(txt) ) scr.AddChild(pageLay) lay.AddChild(scr) lay.AddChild(apb) app.AddLayout(lay) } Copy All Run Example - Dark mode cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Absolute", "FillXY") apb = MUI.CreateAppBar("My Title", "menu", "search,more_vert") apb.SetOnMenuTouch(OnMenuTouch) apb.SetOnControlTouch(OnControlTouch) var apbHeight = apb.GetHeight() scr = app.CreateScroller(1, 1, "NoScrollBar") pageLay = MUI.CreateLayout("Linear", "VCenter") pageLay.SetSize(1, 1.2) pageLay.SetPadding(0, 0, apbHeight, 0) var txt = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod ..." pageLay.AddChild( MUI.CreateTextParagraph(txt) ) scr.AddChild(pageLay) lay.AddChild(scr) lay.AddChild(apb) app.AddLayout(lay) } function OnMenuTouch() { app.ShowPopup("You click the menu. Might as well display a drawer.") } function OnControlTouch(text, index) { app.ShowPopup("You click " + text + ": Control index = "+index) } Copy All Run Methods The following methods are available on the AppBarElegant object: ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetEnabled( enable ) SetMenuIcon( newIcon ) SetMenuIconColor( newColor ) SetOnControlTouch( callback ) SetOnMenuTouch( callback ) SetPosition( left, top, width, height, options ) SetTitleText( newTitle ) SetTitleTextColor( newColor ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( btnTxt, index )
MUI/CreateAppBarModern.htm := CreateAppBarModern Back CreateAppBarModern Hello World Content: - Methods A modern appbar with a search input, leading icon and trailing icon. abm = MUI.CreateAppBarModern( hint, controlIcon, options, color ) → Object Example - Basic cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Absolute", "FillXY") apb = MUI.CreateAppBarModern("Search for games", "more_vert") var apbHeight = apb.GetHeight() scr = app.CreateScroller(1, 1, "NoScrollBar") pageLay = MUI.CreateLayout("Linear", "VCenter") pageLay.SetSize(1, 1.2) pageLay.SetPadding(0, 0, apbHeight, 0) var txt = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod ..." pageLay.AddChild( MUI.CreateTextParagraph(txt) ) scr.AddChild(pageLay) lay.AddChild(scr) lay.AddChild(apb) app.AddLayout(lay) } Copy All Run Example - Sample page cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Absolute", "FillXY") apb = MUI.CreateAppBarModern("Search for games", "more_vert", "Round") apb.SetOnMenuTouch(OnMenuTouch) apb.SetOnControlTouch(OnCtrlTouch) var apbHeight = apb.GetHeight() scr = app.CreateScroller(1, 1, "NoScrollBar") pageLay = MUI.CreateLayout("Linear", "VCenter") pageLay.SetSize(1, 1.2) pageLay.SetPadding(0, 0, apbHeight, 0) var txt = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod ..." pageLay.AddChild( MUI.CreateTextParagraph(txt) ) scr.AddChild(pageLay) lay.AddChild(scr) lay.AddChild(apb) app.AddLayout(lay) } function OnMenuTouch() { lay.Animate("SlideToBottom") } function OnCtrlTouch() { app.ShowPopup("You click for more options.") } Copy All Run Example - Dark mode cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Absolute", "FillXY") apb = MUI.CreateAppBarModern("My Title", "menu", "search,more_vert") var apbHeight = apb.GetHeight() scr = app.CreateScroller(1, 1, "NoScrollBar") pageLay = MUI.CreateLayout("Linear", "VCenter") pageLay.SetSize(1, 1.2) pageLay.SetPadding(0, 0, apbHeight, 0) var txt = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod ..." pageLay.AddChild( MUI.CreateTextParagraph(txt) ) scr.AddChild(pageLay) lay.AddChild(scr) lay.AddChild(apb) app.AddLayout(lay) } Copy All Run Methods The following methods are available on the AppBarModern object: ClearFocus() ClearHistory() Focus() GetCursorLine() GetCursorPos() GetHeight( options ) → Number GetSelectedText() GetSelectionEnd() GetSelectionStart() GetText() → String InsertText( text, start ) Redo() ReplaceText( text, start, end ) SetCursorPos( position ) SetOnChange( callback ) SetOnControlTouch( callback ) SetOnEnter( callback ) SetOnFocus( callback ) SetOnMenuTouch( callback ) SetPosition( left, top, width, height, options ) SetText( text ) Undo()
MUI/CreateBanner.htm := CreateBanner Back CreateBanner Hello World Content: - Methods A banner dialog is a nice popup that slides from the top of your current page. bnr = MUI.CreateBanner( text, okText, cancelText ) → Object Example - Light cfg.Light cfg.MUI function OnStart() { color = MUI.colors.blue app.InitializeUIKit(color.lighten1) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") app.AddLayout(lay) ban = MUI.CreateBanner("There is no internet connection at the moment.", "LEARN MORE", "CLOSE") ban.Show() } Copy All Run Example - Dark cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.blue app.InitializeUIKit(color.lighten1) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") app.AddLayout(lay) ban = MUI.CreateBanner("There is no internet connection at the moment.", "LEARN MORE", "CLOSE") ban.SetOnTouch(OnTouch) ban.Show() } function OnTouch(v) { if(v) app.ShowPopup("Learn more") else app.ShowPopup("Banner close") } Copy All Run Methods The following methods are available on the Banner object: ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetEnabled( enable ) SetHtml( str ) SetOnClose( callback ) SetOnTouch( callback ) SetText( text ) SetTextColor( color ) SetTextSize( size, mode ) SetVisibility( mode ) Show() function( isOkBtnClick, btnText )
MUI/CreateButtonContained.htm := CreateButtonContained Back CreateButtonContained Hello World Content: - Methods An contained material button. btc = MUI.CreateButtonContained( text, width, height ) → Object Methods The following methods are available on the ButtonContained object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) ClearFocus() data → Object Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “Button” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetEllipsize( mode ) SetEnabled( enable ) SetFontFile( file ) SetHtml( str ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetStyle( clr1, clr2, radius, strokeClr, strokeWidth, shadow ) SetText( text ) SetTextColor( color ) SetTextShadow( radius, dx, dy, color ) SetTextSize( size, mode ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src )
MUI/CreateButtonElegant.htm := CreateButtonElegant Back CreateButtonElegant Hello World Content: - Methods An elegant button. bte = MUI.CreateButtonElegant( text, width, height, color ) → Object Example - Light cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.lighten1) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn = MUI.CreateButtonElegant("BUTTON", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonElegant("[fa-android] ANDROID", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonElegant("CUSTOM COLOR", 0.5, 0.1, MUI.colors.blue.blue) lay.AddChild(btn) app.AddLayout(lay) } Copy All Run Example - Dark cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.lighten1) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn = MUI.CreateButtonElegant("BUTTON", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonElegant("[fa-android] ANDROID", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonElegant("CUSTOM COLOR", 0.5, 0.1, MUI.colors.blue.blue) lay.AddChild(btn) app.AddLayout(lay) } Copy All Run Example - Add Method cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn1 = MUI.AddButtonElegant(lay, "BUTTON 1", 0.35) btn2 = MUI.AddButtonElegant(lay, "[fa-heart] BUTTON 2", 0.35) btn3 = MUI.AddButtonElegant(lay, "BUTTON 3", 0.35, 0.1, MUI.colors.green.darken2) app.AddLayout(lay) } Copy All Run Methods The following methods are available on the ButtonElegant object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) ClearFocus() data → Object Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “Button” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColor( color, backColor ) SetColorFilter( color, mode ) SetEllipsize( mode ) SetEnabled( enable ) SetFontFile( file ) SetHtml( str ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetStyle( clr1, clr2, radius, strokeClr, strokeWidth, shadow ) SetText( text ) SetTextColor( color ) SetTextShadow( radius, dx, dy, color ) SetTextSize( size, mode ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src )
MUI/CreateButtonFlat.htm := CreateButtonFlat Back CreateButtonFlat Hello World Content: - Methods Just a flat button. btf = MUI.CreateButtonFlat( text, width, height, color, backColor ) → Object Example - Light cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.lighten1) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn = MUI.CreateButtonFlat("BUTTON", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonFlat("[fa-android] ANDROID", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonFlat("CUSTOM COLOR", 0.5, 0.1, MUI.colors.blue.blue) lay.AddChild(btn) app.AddLayout(lay) } Copy All Run Example - Dark cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.lighten1) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn = MUI.CreateButtonFlat("BUTTON", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonFlat("[fa-android] ANDROID", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonFlat("CUSTOM COLOR", 0.5, 0.1, MUI.colors.blue.blue) lay.AddChild(btn) app.AddLayout(lay) } Copy All Run Example - Add Method cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn1 = MUI.AddButtonFlat(lay, "BUTTON 1", 0.35) btn2 = MUI.AddButtonFlat(lay, "[fa-heart] BUTTON 2", 0.35) btn3 = MUI.AddButtonFlat(lay, "BUTTON 3", 0.35, 0.1, MUI.colors.green.darken2) app.AddLayout(lay) } Copy All Run Methods The following methods are available on the ButtonFlat object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) ClearFocus() data → Object Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “Button” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetEllipsize( mode ) SetEnabled( enable ) SetFontFile( file ) SetHtml( str ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetStyle( clr1, clr2, radius, strokeClr, strokeWidth, shadow ) SetText( text ) SetTextColor( color ) SetTextShadow( radius, dx, dy, color ) SetTextSize( size, mode ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src )
MUI/CreateButtonOutlined.htm := CreateButtonOutlined Back CreateButtonOutlined Hello World Content: - Methods An outlined material button. bto = MUI.CreateButtonOutlined( text, width, height ) → Object Methods The following methods are available on the ButtonOutlined object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) ClearFocus() data → Object Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “Button” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetEllipsize( mode ) SetEnabled( enable ) SetFontFile( file ) SetHtml( str ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetStyle( clr1, clr2, radius, strokeClr, strokeWidth, shadow ) SetText( text ) SetTextColor( color ) SetTextShadow( radius, dx, dy, color ) SetTextSize( size, mode ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src )
MUI/CreateButtonRaised.htm := CreateButtonRaised Back CreateButtonRaised Hello World Content: - Methods The basic type of material button. btr = MUI.CreateButtonRaised( text, width, height, color, txtcolor ) → Object Example - Light cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.lighten1) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn = MUI.CreateButtonRaised("BUTTON", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonRaised("[fa-android] ANDROID", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonRaised("CUSTOM COLOR", 0.5, 0.1, MUI.colors.blue.blue) lay.AddChild(btn) app.AddLayout(lay) } Copy All Run Example - Dark cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.lighten1) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn = MUI.CreateButtonRaised("BUTTON", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonRaised("[fa-android] ANDROID", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonRaised("CUSTOM COLOR", 0.5, 0.1, MUI.colors.blue.blue) lay.AddChild(btn) app.AddLayout(lay) } Copy All Run Example - Add Method cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn1 = MUI.AddButtonRaised(lay, "BUTTON 1", 0.35) btn2 = MUI.AddButtonRaised(lay, "[fa-heart] BUTTON 2", 0.35) btn3 = MUI.AddButtonRaised(lay, "BUTTON 3", 0.35, 0.1, MUI.colors.green.darken2) app.AddLayout(lay) } Copy All Run Methods The following methods are available on the ButtonRaised object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) ClearFocus() data → Object Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “Button” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColor( color, backColor ) SetColorFilter( color, mode ) SetEllipsize( mode ) SetEnabled( enable ) SetFontFile( file ) SetHtml( str ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetStyle( clr1, clr2, radius, strokeClr, strokeWidth, shadow ) SetText( text ) SetTextColor( color ) SetTextShadow( radius, dx, dy, color ) SetTextSize( size, mode ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src )
MUI/CreateButtonRaisedO.htm := CreateButtonRaisedO Back CreateButtonRaisedO Hello World Content: - Methods An outlined material raised button. bro = MUI.CreateButtonRaisedO( text, width, height, color, backColor ) → Object Example - Light cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.lighten1) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn = MUI.CreateButtonRaisedO("BUTTON", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonRaisedO("[fa-android] ANDROID", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonRaisedO("CUSTOM COLOR", 0.5, 0.1, MUI.colors.blue.blue) lay.AddChild(btn) app.AddLayout(lay) } Copy All Run Example - Dark cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.lighten1) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn = MUI.CreateButtonRaisedO("BUTTON", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonRaisedO("[fa-android] ANDROID", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonRaisedO("CUSTOM COLOR", 0.5, 0.1, MUI.colors.blue.blue) lay.AddChild(btn) app.AddLayout(lay) } Copy All Run Example - Add Method cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn1 = MUI.AddButtonRaisedO(lay, "BUTTON 1", 0.35) btn2 = MUI.AddButtonRaisedO(lay, "[fa-heart] BUTTON 2", 0.35) btn3 = MUI.AddButtonRaisedO(lay, "BUTTON 3", 0.35, 0.1, MUI.colors.green.darken2) app.AddLayout(lay) } Copy All Run Methods The following methods are available on the ButtonRaisedO object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) ClearFocus() data → Object Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “Button” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColor( color, backColor ) SetColorFilter( color, mode ) SetEllipsize( mode ) SetEnabled( enable ) SetFontFile( file ) SetHtml( str ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetStyle( clr1, clr2, radius, strokeClr, strokeWidth, shadow ) SetText( text ) SetTextColor( color ) SetTextShadow( radius, dx, dy, color ) SetTextSize( size, mode ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src )
MUI/CreateButtonRound.htm := CreateButtonRound Back CreateButtonRound Hello World Content: - Methods A round material button. btr = MUI.CreateButtonRound( text, width, height, color, txtcolor ) → Object Example - Light cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.lighten1) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn = MUI.CreateButtonRound("BUTTON", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonRound("[fa-android] ANDROID", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonRound("CUSTOM COLOR", 0.5, 0.1, MUI.colors.blue.blue) lay.AddChild(btn) app.AddLayout(lay) } Copy All Run Example - Dark cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.lighten1) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn = MUI.CreateButtonRound("BUTTON", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonRound("[fa-android] ANDROID", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonRound("CUSTOM COLOR", 0.5, 0.1, MUI.colors.blue.blue) lay.AddChild(btn) app.AddLayout(lay) } Copy All Run Example - Add Method cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn1 = MUI.AddButtonRound(lay, "BUTTON 1", 0.35) btn2 = MUI.AddButtonRound(lay, "[fa-heart] BUTTON 2", 0.35) btn3 = MUI.AddButtonRound(lay, "BUTTON 3", 0.35, 0.1, MUI.colors.green.darken2) app.AddLayout(lay) } Copy All Run Methods The following methods are available on the ButtonRound object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) ClearFocus() data → Object Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “Button” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColor( color, backColor ) SetColorFilter( color, mode ) SetEllipsize( mode ) SetEnabled( enable ) SetFontFile( file ) SetHtml( str ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetStyle( clr1, clr2, radius, strokeClr, strokeWidth, shadow ) SetText( text ) SetTextColor( color ) SetTextShadow( radius, dx, dy, color ) SetTextSize( size, mode ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src )
MUI/CreateButtonRoundO.htm := CreateButtonRoundO Back CreateButtonRoundO Hello World Content: - Methods An outlined material round button. bro = MUI.CreateButtonRoundO( text, width, height, color, backColor ) → Object Example - Light cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.lighten1) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn = MUI.CreateButtonRoundO("BUTTON", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonRoundO("[fa-android] ANDROID", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonRoundO("CUSTOM COLOR", 0.5, 0.1, MUI.colors.blue.blue) lay.AddChild(btn) app.AddLayout(lay) } Copy All Run Example - Dark cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.lighten1) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn = MUI.CreateButtonRoundO("BUTTON", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonRoundO("[fa-android] ANDROID", 0.35) lay.AddChild(btn) btn = MUI.CreateButtonRoundO("CUSTOM COLOR", 0.5, 0.1, MUI.colors.blue.blue) lay.AddChild(btn) app.AddLayout(lay) } Copy All Run Example - Add Method cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn1 = MUI.AddButtonRoundO(lay, "BUTTON 1", 0.35) btn2 = MUI.AddButtonRoundO(lay, "[fa-heart] BUTTON 2", 0.35) btn3 = MUI.AddButtonRoundO(lay, "BUTTON 3", 0.35, 0.1, MUI.colors.green.darken2) app.AddLayout(lay) } Copy All Run Methods The following methods are available on the ButtonRoundO object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) ClearFocus() data → Object Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “Button” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColor( color, backColor ) SetColorFilter( color, mode ) SetEllipsize( mode ) SetEnabled( enable ) SetFontFile( file ) SetHtml( str ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetStyle( clr1, clr2, radius, strokeClr, strokeWidth, shadow ) SetText( text ) SetTextColor( color ) SetTextShadow( radius, dx, dy, color ) SetTextSize( size, mode ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src )
MUI/CreateButtonText.htm := CreateButtonText Back CreateButtonText Hello World Adds a text button. btt = MUI.CreateButtonText( text, width, height ) → Object See CreateButtonFlat for full documentation.
MUI/CreateButtonToggle.htm := CreateButtonToggle Back CreateButtonToggle Hello World Content: - Methods Create button toggle. btt = MUI.CreateButtonToggle( text, width, height, value, callback, color, backColor ) → Object Example - Light cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.darken1) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn = MUI.CreateButtonToggle("BUTTON", 0.35, null, false, OnToggle) lay.AddChild(btn) app.AddLayout(lay) } function OnToggle(v) { app.ShowPopup(v) } Copy All Run Methods The following methods are available on the ButtonToggle object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) ClearFocus() data → Object Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “Button” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColor( color, backColor ) SetColorFilter( color, mode ) SetEllipsize( mode ) SetEnabled( enable ) SetFontFile( file ) SetHtml( str ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetStyle( clr1, clr2, radius, strokeClr, strokeWidth, shadow ) SetText( text ) SetTextColor( color ) SetTextShadow( radius, dx, dy, color ) SetTextSize( size, mode ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src )
MUI/CreateCard.htm := CreateCard Back CreateCard Hello World Content: - Methods A material implementation of a card. crd = MUI.CreateCard( options ) → Object It is fully customizable to suit your likings. options propertiesdefinitions titleString Title textbodyString Body textimageString Path to the imagebuttonTextString Comma separated string for button textcolorString Color stringwidthNumber Fraction of the screen widthdivider1Boolean Divider below the avatardivider2Boolean Divider below the bodyavatarString Path to the avatar imageavatarOnTopBoolean Is the avatar on top of the imagebuttonTypeString Can be 'raised', 'raisedoutline', 'round', 'roundoutline' or 'flat'nameString Name of the card Example - No-image, No-Avatar cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal, "Light") lay = MUI.CreateLayout("Linear", "VCenter,FillXY") var options = { title: "Card Title", body: "Lorem ipsum dolor set amit consectetur elit", buttonText: "SEE MORE", width: 0.94 } var card = UI.CreateCard(options) lay.AddChild(card) app.AddLayout(lay) } Copy All Run Example - With-image, No-Avatar cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") var options = { title: "Card Title", body: "Lorem ipsum dolor set amit consectetur elit", buttonText: "LINKS,SEE MORE", image: "/Sys/Img/Sky.jpg", width: 0.94 } var card = UI.CreateCard(options) lay.AddChild(card) app.AddLayout(lay) } Copy All Run Example - With Image, With Avatar cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") var options = { title: "Card Title", body: "Lorem ipsum dolor set amit consectetur elit", buttonText: "LINKS,SEE MORE", image: "/Sys/Img/Sky.jpg", width: 0.94, avatar: "/Sys/Img/Droid1.png" } var card = UI.CreateCard(options) lay.AddChild(card) app.AddLayout(lay) } Copy All Run Example - Complete cfg.Dark cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") scrl = app.CreateScroller(1, 1, "NoScrollBar") lay2 = MUI.CreateLayout("Linear", "VCenter") lay2.SetPadding(0, 0.02, 0, 0.02) lay2.SetSize(1) var options = { title: "Card Title", body: "Lorem ipsum dolor set amit consectetur elit", buttonText: "LINKS,SEE MORE", image: "/Sys/Img/Sky.jpg", width: 0.94, avatar: "/Sys/Img/Droid1.png", avatarOnTop: true, divider1: true, divider2: true } options.name = "my-card1" card1 = UI.CreateCard(options) lay2.AddChild(card1) card1.SetOnButtonTouch(OnBtnTouch) options.name = "my-card2" options.buttonType = "raised" card2 = UI.CreateCard(options) card2.SetMargins(0, 0.02, 0, 0) lay2.AddChild(card2) card2.SetOnButtonTouch(OnBtnTouch) scrl.AddChild(lay2) lay.AddChild(scrl) app.AddLayout(lay) } function OnBtnTouch(btnText, cardName) { app.ShowPopup(btnText + " : " + cardName) } Copy All Run Methods The following methods are available on the Card object: ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetEnabled( enable ) SetMargins( left, top, right, bottom, mode ) SetOnAvatarTouch( callback ) SetOnButtonTouch( callback ) SetOnImageTouch( callback ) SetOnTitleTouch( callback ) SetPosition( left, top, width, height, options ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( cardName ) function( btnText, cardName ) function( title, cardName )
MUI/CreateCheckbox.htm := CreateCheckbox Back CreateCheckbox Hello World Content: - Methods Checkbox is a powerful control when you want the user to select multiple items in a group. chc = MUI.CreateCheckbox( list, width, height, color ) → Object Example - Light cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") lst = "Apple,Mango,Orange,Banana" chk = MUI.CreateCheckbox(lst, 0.7) lay.AddChild(chk) app.AddLayout(lay) } Copy All Run Example - Dark cfg.Dark cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") lst = "Apple,Mango,Orange,Banana" chk = MUI.CreateCheckbox(lst, 0.7) chk.SetOnTouch(OnCheckBox) lay.AddChild(chk) app.AddLayout(lay) } function OnCheckBox(index, value) { app.ShowPopup(lst[index] + " is "+value) } Copy All Run Methods The following methods are available on the Checkbox object: CheckItemByIndex( index ) ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetCheckItem() → List: List of indexes for slected items GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetType() → String GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetEnabled( enable ) SetHeight( height ) SetMargins( left, top, right, bottom, mode ) SetOnTouch( callback ) SetPosition( left, top, width, height, options ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) UncheckItemByIndex( index ) function( index, checked )
MUI/CreateCheckList.htm := CreateCheckList Back CreateCheckList Hello World Content: - Methods Check list is a dialog type checkbox list. chl = MUI.CreateCheckList( title, list, color, bottom ) → Object Let the user select items in a nice popup Example - Light cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn = MUI.CreateButtonRaised("SHOW CHECKLIST", 0.6) btn.SetOnTouch(ShowCheckList) lay.AddChild(btn) app.AddLayout(lay) lst = [ {name: "Apple", check: false}, {name: "Mango", check: true}, {name: "Orange", check: true}, {name: "Banana"} ] chk = MUI.CreateCheckList("Choose a fruit", lst) chk.SetOnSubmit(OnSubmit) } function ShowCheckList() { chk.Show() } function OnSubmit(lst) { app.ShowPopup(JSON.stringify(lst)) } Copy All Run Example - Dark, Bottom cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn = MUI.CreateButtonRaised("SHOW CHECKLIST", 0.6) btn.SetOnTouch(ShowCheckList) lay.AddChild(btn) app.AddLayout(lay) lst = [ {name: "Apple", check: false}, {name: "Mango", check: true}, {name: "Orange", check: true}, {name: "Banana"} ] chk = MUI.CreateCheckList("Choose a fruit", lst, null, true) chk.SetOnSubmit(OnSubmit) } function ShowCheckList() { chk.Show() } function OnSubmit(lst) { app.ShowPopup(JSON.stringify(lst)) } Copy All Run Methods The following methods are available on the CheckList object: ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetEnabled( enable ) SetHeight( height ) SetOnSubmit( callback ) SetTextEdit( textEdit ) SetVisibility( mode ) Show() function( list )
MUI/CreateColorPicker.htm := CreateColorPicker Back CreateColorPicker Hello World Content: - Methods Creates a color picker dialog where you can select a range of MUI predefined colors. clp = MUI.CreateColorPicker( title ) → Object Example - Light cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") btn = MUI.CreateButtonRaised("PICKER", 0.35) btn.SetOnTouch(ShowPicker) lay.AddChild(btn) app.AddLayout(lay) clr = MUI.CreateColorPicker("Choose Color") clr.SetOnSelect(OnSelect) } function ShowPicker() { clr.Show() } function OnSelect(color) { app.ShowPopup(color) } Copy All Run Example - Dark cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") btn = MUI.CreateButtonRaised("PICKER", 0.35) btn.SetOnTouch(ShowPicker) lay.AddChild(btn) app.AddLayout(lay) clr = MUI.CreateColorPicker("Choose Color") clr.SetOnSelect(OnSelect) } function ShowPicker() { clr.Show() } function OnSelect(color) { app.ShowPopup(color) } Copy All Run Methods The following methods are available on the ColorPicker object: GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetOnSelect( callback ) SetTextEdit( textEdit ) Show() function( color )
MUI/CreateDataTable.htm := CreateDataTable Back CreateDataTable Hello World Content: - Methods Data tables display sets of data across rows and columns. tbl = MUI.CreateDataTable( columns, values, width, height, options ) → Object You can pass options and and configure your header and rows to add specific functionality. Example - Basic cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var headers = ["ID", "Name", "Age", "Color"] var values = [ "1:Robb Stark:14:Blue", "2:Sansa Stark:11:Teal", "3:Arya Stark:9:Green", "4:Bran Stark:7:Orange", "5:Rickon Stark:Grey" ] var table = MUI.CreateDataTable(headers, values, 0.96, 0.6) lay.AddChild(table) app.AddLayout(lay) } Copy All Run Add Sortable to the header type if you want the column to be sortable when click. You can also add the Numeric type to right align text for number values. Example - Sortable and Numeric Column cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var headers = ["ID", "Name:Sortable", "Age:Sortable", "Color"] var values = [ "1:Robb Stark:14:Blue", "2:Sansa Stark:11:Teal", "3:Arya Stark:9:Green", "4:Bran Stark:7:Orange", "5:Rickon Stark:2:Grey", "6:Theon Greyjoy:18:Brown", "7:Jon Snow:11:Red" ] var table = MUI.CreateDataTable(headers, values, 0.96, 0.6) lay.AddChild(table) app.AddLayout(lay) } Copy All Run Add Selectable option to make the rows in the table selectable. Example - Selectable and Dark cfg.Dark cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var headers = ["ID", "Name:Sortable", "Age", "Color"] var values = [ "1:Robb Stark:14:Blue", "2:Sansa Stark:11:Teal", "3:Arya Stark:9:Green", "4:Bran Stark:7:Orange", "5:Rickon Stark:2:Grey", "6:Theon Greyjoy:18:Brown", "7:Jon Snow:11:Red" ] var table = MUI.CreateDataTable(headers, values, 0.96, 0.6, "Selectable") lay.AddChild(table) app.AddLayout(lay) } Copy All Run You can also add a footer into your table if you want controls associated with table interactions. Example - With Footer cfg.Dark cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var headers = ["ID", "Name:Sortable", "Age"] var values = [ "1:Robb Stark:14", "2:Sansa Stark:11", "3:Arya Stark:9", "4:Bran Stark:7", "5:Rickon Stark:2" ] var table = MUI.CreateDataTable(headers, values, 0.96, 0.6, "Selectable") lay.AddChild(table) var ftr = table.AddFooter("Linear", "Horizontal, Right, VCenter", 0.09) var fBtn = MUI.CreateButtonFlat('REMOVE SELECTED') fBtn.SetEnabled(false) ftr.AddChild(fBtn) fBtn.SetOnTouch(function(){ table.GetSelectedRows(function(x){ table.RemoveRows(x) }) }) table.SetOnSelectionStatus(function(c) { if(c) fBtn.SetEnabled(true) else fBtn.SetEnabled(false) }) app.AddLayout(lay) } Copy All Run Methods The following methods are available on the DataTable object: AddFooter( type, options, height ) AppendRow( row ) ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetSelectedRows( callback ) GetTop( options ) → Number GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean PrependRow( row ) RemoveRows( index ) SetEnabled( enable ) SetMargins( left, top, right, bottom, mode ) SetOnProgress( callback ) SetOnReady( callback ) SetOnSelectionStatus( callback ) SetOnTouch( callback ) SetPosition( left, top, width, height, options ) SetRows( values ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( indexes ) function( value ) function( isTrue ) function( row, index )
MUI/CreateDatePicker.htm := CreateDatePicker Back CreateDatePicker Hello World Content: - Methods Creates a materialize date picker dialog. dtp = MUI.CreateDatePicker( yyyy, mm, dd, color ) → Object Example - Default cfg.Light cfg.MUI function OnStart() { colors = MUI.colors.teal app.InitializeUIKit(colors.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") btn = MUI.CreateButtonRaised("SHOW PICKER", 0.5) btn.SetOnTouch(ShowDatePicker) lay.AddChild(btn) app.AddLayout(lay) pck = MUI.CreateDatePicker() pck.SetOnSelect(OnSelect) } function ShowDatePicker() { pck.Show() } function OnSelect(date, yyyy, mm, dd) { app.ShowPopup(date) } Copy All Run Example - With Custom Date cfg.Dark cfg.MUI function OnStart() { colors = MUI.colors.teal app.InitializeUIKit(colors.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") btn = MUI.CreateButtonRaised("SHOW PICKER", 0.5) btn.SetOnTouch(ShowDatePicker) lay.AddChild(btn) app.AddLayout(lay) //September 1, 2020 pck = MUI.CreateDatePicker(2020, 8, 1) pck.SetOnSelect(OnSelect) } function ShowDatePicker() { pck.Show() } function OnSelect(date, yyyy, mm, dd) { app.ShowPopup(date) } Copy All Run Methods The following methods are available on the DatePicker object: GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetOnSelect( callback ) SetTextEdit( textEdit ) Show() function( yyyy-mm-dd, yyyy, mm, dd )
MUI/CreateDialog.htm := CreateDialog Back CreateDialog Hello World Content: - Methods Creates a customizable materialize dialog. dlg = MUI.CreateDialog( title, body, okText, cancelText, divider ) → Object Example - Basic & Light cfg.Light cfg.MUI function OnStart() { colors = MUI.colors.teal app.InitializeUIKit(colors.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn = MUI.CreateButtonRaised("SHOW DIALOG", 0.5) btn.SetOnTouch(ShowDialog) lay.AddChild(btn) app.AddLayout(lay) var text = "You can undone this process." dlg = MUI.CreateDialog("Remove message", text, "REMOVE") } function ShowDialog() { dlg.Show() } Copy All Run Example - Customize & Dark cfg.Dark cfg.MUI function OnStart() { colors = MUI.colors.teal app.InitializeUIKit(colors.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn = MUI.CreateButtonRaised("SHOW DIALOG", 0.5) btn.SetOnTouch(ShowDialog) lay.AddChild(btn) app.AddLayout(lay) var text = "You can undone this process." dlg = MUI.CreateDialog("Remove message", text, "REMOVE", "CLOSE", true) dlg.SetOnTouch(OnTouch) } function ShowDialog() { dlg.Show() } function OnTouch(val, btnTxt) { if(val btnTxt == "REMOVE") app.ShowPopup("Confirmed. Proceed an action") else app.ShowPopup("You decline the confirmation.") } Copy All Run Methods The following methods are available on the Dialog object: ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetEnabled( enable ) SetHtml( str ) SetOnClose( callback ) SetOnTouch( callback ) SetText( text ) SetTextColor( color ) SetTextSize( size, mode ) SetTitle( newTitle ) SetTitleColor( color ) SetVisibility( mode ) Show() function( isOkBtnClick, btnText )
MUI/CreateDivider.htm := CreateDivider Back CreateDivider Hello World Content: - Methods Creates a divider which you can add to your layout. dvd = MUI.CreateDivider( height ) → Object Example - Basic & Light cfg.Light cfg.MUI function OnStart() { colors = MUI.colors.teal app.InitializeUIKit(colors.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") div = MUI.CreateDivider() lay.AddChild(div) app.AddLayout(lay) var text = "You can undone this process." dlg = MUI.CreateDialog("Remove message", text, "REMOVE") } Copy All Run Methods The following methods are available on the Divider object: GetVisibility() → String: “Show” or “Hide” or “Gone” Hide() IsEnabled() → Boolean IsVisible() → Boolean SetEnabled( enable ) SetVisibility( mode ) Show()
MUI/CreateFAB.htm := CreateFAB Back CreateFAB Hello World Content: - Methods Creates a floating action button. fab = MUI.CreateFAB( icon, color ) → Object Example cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Absolute", "FillXY,VCenter") fab = MUI.CreateFAB("add") fab.SetOnTouch(OnClick) lay.AddChild(fab) app.AddLayout(lay) } function OnClick() { app.ShowPopup("You click FAB") } Copy All Run Methods The following methods are available on the FAB object: Animate( type, callback, time ) ClearFocus() data → Object Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetIcon() → Object: { checkIcon, uncheckedIcon } GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetType() → String: “Button” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetColor( color, backColor ) SetEnabled( enable ) SetIcon( icon ) SetIconColor( color ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetPosition( left, top, width, height, options ) SetText( text ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src )
MUI/CreateFABElegant.htm := CreateFABElegant Back CreateFABElegant Hello World Content: - Methods An elegant floating action button. fab = MUI.CreateFABElegant( icon, color ) → Object Example cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Absolute", "FillXY,VCenter") fab = MUI.CreateFABElegant("add") fab.SetOnTouch(OnClick) lay.AddChild(fab) app.AddLayout(lay) } function OnClick() { app.ShowPopup("You click FAB") } Copy All Run Methods The following methods are available on the FABElegant object: Animate( type, callback, time ) ClearFocus() data → Object Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetIcon() → Object: { checkIcon, uncheckedIcon } GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetType() → String: “Button” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetColor( color, backColor ) SetEnabled( enable ) SetIcon( icon ) SetIconColor( color ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetPosition( left, top, width, height, options ) SetText( text ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src )
MUI/CreateFABOutline.htm := CreateFABOutline Back CreateFABOutline Hello World Content: - Methods Creates an outlined floating action button. fab = MUI.CreateFABOutline( icon, color, backColor ) → Object Example cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Absolute", "FillXY,VCenter") fab = MUI.CreateFABOutline("add") fab.SetOnTouch(OnClick) lay.AddChild(fab) app.AddLayout(lay) } function OnClick() { app.ShowPopup("You click FAB") } Copy All Run Methods The following methods are available on the FABOutline object: Animate( type, callback, time ) ClearFocus() data → Object Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetIcon() → Object: { checkIcon, uncheckedIcon } GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetType() → String: “Button” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetColor( color, backColor ) SetEnabled( enable ) SetIcon( icon ) SetIconColor( color ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetPosition( left, top, width, height, options ) SetText( text ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src )
MUI/CreateLayout.htm := CreateLayout Back CreateLayout Hello World Content: - Card Layouts It is just the CreateLayout method of DroidScript with predefined values on background color just to be consistent on MUI theming. lay = MUI.CreateLayout( type, options ) → Object It is highly recommended to use this method instead of directly calling CreateLayout from the app object. Example - Just Layout cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") txt = MUI.CreateTextParagraph("DroidScript is awesome!") lay.AddChild(txt) app.AddLayout(lay) } Copy All Run Card Layouts Card layout is ligter than other types of layouts to make it appear as a primary focus on a page. Example - Dark Layout with Card cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") cardLay = MUI.CreateLayout("Card") cardLay.SetSize(0.85, 0.25) lay.AddChild(cardLay) app.AddLayout(lay) } Copy All Run Since it returns a DroidScript layout object, you can use all the layout methods you know.
MUI/CreateList.htm := CreateList Back CreateList Hello World Content: - Methods A manipulation of the DroidScript list object. lst = MUI.CreateList( list, width, height, options ) → Object Example - Basic cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var list = ["Downloads", "Images", "Videos"] lst = MUI.CreateList(list, 0.95, 0.4) lst.SetOnTouch(OnTouch) lay.AddChild(lst) app.AddLayout(lay) } function OnTouch(title) { app.ShowPopup(title) } Copy All Run Example - With-Icon cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY") var list = ["Downloads:[fa-cloud-download]", "Images:[fa-image]", "Videos:[fa-youtube-play]"] lst = MUI.CreateList(list, 0.95, 0.4) lst.SetOnTouch(OnTouch) lay.AddChild(lst) app.AddLayout(lay) } function OnTouch(title) { app.ShowPopup(title) } Copy All Run Example - Dark With Body & Icon cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var list = [ "Downloads:Some body text:[fa-cloud-download]", "Images:Some body text:[fa-image]", "Videos:Some body text:[fa-youtube-play]" ] lst = MUI.CreateList(list, 0.95, 0.4) lst.SetOnTouch(OnTouch) lay.AddChild(lst) app.AddLayout(lay) } function OnTouch(title, body) { app.ShowPopup(title+" : "+body) } Copy All Run Methods The following methods are available on the List object: AddItem( title, body, image ) AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetItem( title ) → Object GetItemByIndex( index ) → Object GetLeft( options ) → Number GetLength() → Number: integer GetList( delim ) → Object GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “List” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() InsertItem( index, title, body, image ) IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types RemoveAll() RemoveItem( title ) RemoveItemByIndex( index ) ScrollToItem( title, body ) ScrollToItemByIndex( index ) SelectItem( title, body, scroll ) SelectItemByIndex( index, scroll ) SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetColumnWidths( icon, title, body, mode ) SetDivider( height, color ) SetEllipsize( mode ) SetEllipsize1( mode ) SetEllipsize2( mode ) SetEnabled( enable ) SetFontFile( file ) SetHiTextColor1( clr ) SetHiTextColor2( clr ) SetIconMargins( left, top, right, bottom, mode ) SetIconSize( size, mode ) SetItem( title, newTitle, newBody, newImage ) SetItemByIndex( index, newTitle, newBody, newImage ) SetList( list, delim ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetTextColor( color ) SetTextColor1( clr ) SetTextColor2( clr ) SetTextMargins( left, top, right, bottom, mode, options ) SetTextShadow( radius, dx, dy, color ) SetTextShadow1( radius, dx, dy, color ) SetTextShadow2( radius, dx, dy, color ) SetTextSize( size, mode ) SetTextSize1( size, mode ) SetTextSize2( size, mode ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src )
MUI/CreateListDialog.htm := CreateListDialog Back CreateListDialog Hello World Content: - Methods Creates a more customizable list dialog. lsd = MUI.CreateListDialog( title, list, color, bottom ) → Object Example - Basic cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") btn = MUI.CreateButtonRaised("SHOW LISTDIALOG", 0.6) btn.SetOnTouch(ShowListDialog) lay.AddChild(btn) app.AddLayout(lay) var list = [ {name: "Choice 1"}, {name: "Choice 2"}, {name: "Choice 3"}, {name: "Choice 4"} ] lsd = MUI.CreateListDialog("Choices Title", list) lsd.SetOnSelect(OnTouch) } function ShowListDialog() { lsd.Show() } function OnTouch(name) { app.ShowPopup(name) } Copy All Run Example - With Icon cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") btn = MUI.CreateButtonRaised("SHOW LISTDIALOG", 0.6) btn.SetOnTouch(ShowListDialog) lay.AddChild(btn) app.AddLayout(lay) var list = [ {name: "Choice 1", icon: "person"}, {name: "Choice 2", icon: "room"}, {name: "Choice 3", icon: "account_circle"}, {name: "Choice 4", icon: "email"} ] lsd = MUI.CreateListDialog("Choices Title", list) lsd.SetOnSelect(OnTouch) } function ShowListDialog() { lsd.Show() } function OnTouch(name) { app.ShowPopup(name) } Copy All Run Example - With Icon & Colors cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") btn = MUI.CreateButtonRaised("SHOW LISTDIALOG", 0.6) btn.SetOnTouch(ShowListDialog) lay.AddChild(btn) app.AddLayout(lay) var list = [ {name: "Choice 1", icon: "person", color: "#f44336"}, {name: "Choice 2", icon: "room", color: "#9c27b0"}, {name: "Choice 3", icon: "account_circle", color: "#4285f4"}, {name: "Choice 4", icon: "email", color: "#009688"} ] lsd = MUI.CreateListDialog("Choices Title", list) lsd.SetOnSelect(OnTouch) } function ShowListDialog() { lsd.Show() } function OnTouch(name) { app.ShowPopup(name) } Copy All Run Example - Dark Bottom cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") btn = MUI.CreateButtonRaised("SHOW LISTDIALOG", 0.6) btn.SetOnTouch(ShowListDialog) lay.AddChild(btn) app.AddLayout(lay) var list = [ {name: "Choice 1", icon: "person", color: "#f44336"}, {name: "Choice 2", icon: "room", color: "#9c27b0"}, {name: "Choice 3", icon: "account_circle", color: "#4285f4"}, {name: "Choice 4", icon: "email", color: "#009688"} ] lsd = MUI.CreateListDialog("Choices Title", list, null, true) lsd.SetOnSelect(OnTouch) } function ShowListDialog() { lsd.Show() } function OnTouch(name) { app.ShowPopup(name) } Copy All Run Methods The following methods are available on the ListDialog object: ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetEnabled( enable ) SetHeight( height ) SetOnSelect( callback ) SetTextEdit( textEdit ) SetVisibility( mode ) Show() function( name, index )
MUI/CreateListModern.htm := CreateListModern Back CreateListModern Hello World Content: - Methods A modern implementation of list using the available controls of DroidScript. lsm = MUI.CreateListModern( list, width, height, options ) → Object Example - No-options cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var list = [ {title: "Sample Title", body:"The quick brown fox jumps..."}, {title: "Sample Title", body:"The quick brown fox jumps...", image: "/Sys/Img/Droid1.png"}, {title: "Sample Title", body:"The quick brown fox jumps...", image: "/Sys/Img/Droid1.png", rightIcon: "more_vert"} ] lsm = MUI.CreateListModern(list) lsm.SetOnTouch(OnTouch) lay.AddChild(lsm) app.AddLayout(lay) } function OnTouch(title, body, index) { app.ShowPopup(title+" : "+body+" : "+index) } Copy All Run To make the list selectable, add the Selectable option. Example - Selectable cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var list = [ {title: "Sample Title", body:"The quick brown fox jumps..."}, {title: "Sample Title", body:"The quick brown fox jumps...", image: "/Sys/Img/Droid1.png"}, {title: "Sample Title", body:"The quick brown fox jumps...", image: "/Sys/Img/Droid1.png", rightIcon: "more_vert"} ] lsm = MUI.CreateListModern(list, 0.96, null, "Selectable") lsm.SetOnTouch(ListOnTouch) lay.AddChild(lsm) btn = MUI.CreateButtonRound("GET SELECTED ITEMS", 0.6) btn.SetMargins(0, 0.075, 0, 0) lay.AddChild(btn) btn.SetOnTouch(GetSelectedItems) app.AddLayout(lay) app.ShowPopup("Click the icon/avatar to select") } function ListOnTouch(title, body, index) { app.ShowPopup("You choose "+title) } function GetSelectedItems() { var items = lsm.GetSelectedItems() for(var i = 0; i items.length; i++) { var item = lsm.GetItem(items[i]) app.Alert(JSON.stringify(item)) } } Copy All Run Please note that CreateListInitialIcon, CreateListMaterialIcon and CreateListWithAvatar are now deprecated. But still you can achieve these designs by passing appropriate comma-separated options to the options param of CreateListModern method Example - CreateListInitialIcon cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var list = [ {title: "Title 1", body:"The quick brown fox jumps...", rightNote: "Aug 5"}, {title: "Title 2", body:"The quick brown fox jumps...", rightNote: "Aug 6"}, {title: "Title 3", body:"The quick brown fox jumps...", rightNote: "Aug 7"} ] lsm = MUI.CreateListModern(list, 1, null, "Initial,RightNote") lay.AddChild(lsm) app.AddLayout(lay) } Copy All Run Example - CreateListMaterialIcon cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var list = [ {title: "Folder", body:"The quick brown fox jumps...", icon: "folder", rightIcon: "more_vert"}, {title: "Favorites", body:"The quick brown fox jumps...", icon: "favorite", rightIcon: "more_vert"}, {title: "Music", body:"The quick brown fox jumps...", icon: "music_note", rightIcon: "more_vert"} ] lsm = MUI.CreateListModern(list, 1, null, "Material,RightNote,Selectable") lay.AddChild(lsm) btn = MUI.CreateButtonRound("GET SELECTED ITEMS", 0.6) btn.SetMargins(0, 0.075, 0, 0) lay.AddChild(btn) btn.SetOnTouch(GetSelectedItems) app.AddLayout(lay) app.ShowPopup("Click the icon/avatar to select") } function GetSelectedItems() { var items = lsm.GetSelectedItems() for(var i = 0; i items.length; i++) { var item = lsm.GetItem(items[i]) app.Alert(JSON.stringify(item)) } } Copy All Run Example - CreateListWithAvatar cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var list = [ {title: "Someone", body:"The quick brown fox jumps...", image: "/Sys/Img/Droid1.png", rightIcon: "more_vert"}, {title: "Anybody", body:"The quick brown fox jumps...", image: "/Sys/Img/Droid1.png", rightIcon: "more_vert"}, {title: "Everyone", body:"The quick brown fox jumps...", image: "/Sys/Img/Droid1.png", rightIcon: "more_vert"} ] lsm = MUI.CreateListModern(list, 1, null, "Avatar,RightNote,Selectable") lay.AddChild(lsm) btn = MUI.CreateButtonRound("GET SELECTED ITEMS", 0.6) btn.SetMargins(0, 0.075, 0, 0) lay.AddChild(btn) btn.SetOnTouch(GetSelectedItems) app.AddLayout(lay) app.ShowPopup("Click the icon/avatar to select") } function GetSelectedItems() { var items = lsm.GetSelectedItems() for(var i = 0; i items.length; i++) { var item = lsm.GetItem(items[i]) app.Alert(JSON.stringify(item)) } } Copy All Run ListModern has lots of very useful function you can use to manipulate your list. Here's a basic implementation on Removing items from Selectable list. Example - RemoveItems cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var list = [ {title: "Folder", body:"The quick brown fox jumps...", icon: "folder", rightIcon: "more_vert"}, {title: "Downloads", body:"The quick brown fox jumps...", icon: "play_for_work", rightIcon: "more_vert"}, {title: "Music", body:"The quick brown fox jumps...", icon: "music_note", rightIcon: "more_vert"}, {title: "Account", body:"The quick brown fox jumps...", icon: "person", rightIcon: "more_vert"}, {title: "Password", body:"The quick brown fox jumps...", icon: "lock", rightIcon: "more_vert"} ] lsm = MUI.CreateListModern(list, 1, null, "Material,RightNote,Selectable") lsm.SetOnSelect(OnSelect) lay.AddChild(lsm) btn = MUI.CreateButtonRaised("REMOVE SELECTED", 0.75) btn.SetMargins(0, 0.075, 0, 0) btn.SetOnTouch(RemoveSelected) btn.Hide() lay.AddChild(btn) app.AddLayout(lay) app.ShowPopup("Click the icon/avatar to select") } function OnSelect() { var items = lsm.GetSelectedItems() btn.SetText(items.length+" REMOVE SELECTED") if(items.length) btn.Show() else btn.Hide() } function RemoveSelected() { var items = lsm.GetSelectedItems() lsm.RemoveItems(items) } Copy All Run Example - With-Color No Options cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var list = [ {title: "Sample Title", body:"The quick brown fox jumps...", rightIcon: "more_vert", color: "#673ab7"}, {title: "Sample Title", body:"The quick brown fox jumps...", rightIcon: "more_vert", color: "#673ab7"}, {title: "Sample Title", body:"The quick brown fox jumps...", rightIcon: "more_vert", color: "#673ab7"} ] lsm = MUI.CreateListModern(list, 0.96) lsm.SetOnTouch(OnTouch) lay.AddChild(lsm) app.AddLayout(lay) } function OnTouch(title, body, index) { app.ShowPopup(title+" : "+body+" : "+index) } Copy All Run Methods The following methods are available on the ListModern object: AppendItem( data ) ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetItem( index ) → Object GetLeft( options ) → Number GetList() → Object GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetSelectedItems() → List: List of indexes for slected items GetTop( options ) → Number GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() Highlight( index ) IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean PopItem() RemoveHighlight( index ) RemoveItem( index ) RemoveItems( indexes ) SetAvatarOnTouch( callback ) SetBodyText( newBody, index ) SetControlOnTouch( callback ) SetEnabled( enable ) SetImage( newImagePath, index ) SetItem( data, index ) SetList( list ) SetMargins( left, top, right, bottom, mode ) SetNoteText( newNote, index ) SetOnSelect( callback ) SetOnTouch( callback ) SetPosition( left, top, width, height, options ) SetRightIcon( newIcon, index ) SetSelectable( selectable ) SetTitleText( newTitle, index ) SetVisibility( mode ) ShiftItem() Show() Tween( target, duration, type, repeat, yoyo, callback ) function( index ) function( index, isSelected ) function( title, body, index )
MUI/CreateListSimple.htm := CreateListSimple Back CreateListSimple Hello World Content: - Methods Creates a simple list that has an optional badge and icon with no body text. lss = MUI.CreateListSimple( list, width, height, options ) → app object Example - Basic cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var list = [ {title: "Downloads"}, {title: "Folders"}, {title: "Images"}, {title: "Videos"} ] lst = MUI.CreateListSimple(list, 1) lst.SetOnTouch() lay.AddChild(lst) app.AddLayout(lay) } function OnTouch(title, index, icon, badge) { app.ShowPopup(title+" : "+index) } Copy All Run Example - With Icon & Color cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var list = [ {title: "Downloads", icon: "play_for_work", color:"#673ab7"}, {title: "Folders", icon: "folder", color:"#009688"}, {title: "Images", icon: "photo", color:"#1e88e5"}, {title: "Videos", icon: "subscriptions", color:"#e53935"} ] lst = MUI.CreateListSimple(list, 1) lay.AddChild(lst) app.AddLayout(lay) } Copy All Run Example - With Icon, Color & Badge cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var list = [ {title: "Downloads", icon: "play_for_work", badge: 9, color:"#673ab7"}, {title: "Folders", icon: "folder", badge: 11, color:"#009688"}, {title: "Images", icon: "photo", badge: 2, color:"#1e88e5"}, {title: "Videos", icon: "subscriptions", badge: 24, color:"#e53935"} ] lst = MUI.CreateListSimple(list, 1) lay.AddChild(lst) app.AddLayout(lay) } Copy All Run Example - Badge Color cfg.Light cfg.MUI function OnStart() { MUI.theme.badgeColor = "#ec407a" app.InitializeUIKit() lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var list = [ {title: "Downloads", icon: "play_for_work", badge: 9, color:"#673ab7"}, {title: "Folders", icon: "folder", badge: 11, color:"#009688"}, {title: "Images", icon: "photo", badge: 2, color:"#1e88e5"}, {title: "Videos", icon: "subscriptions", badge: 24, color:"#e53935"} ] lst = MUI.CreateListSimple(list, 1) lay.AddChild(lst) app.AddLayout(lay) } Copy All Run Example - Dark With Divider cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var list = [ {title: "Downloads", icon: "play_for_work", badge: 9, color:"#673ab7"}, {title: "Folders", icon: "folder", badge: 11, color:"#009688"}, {title: "Images", icon: "photo", badge: 2, color:"#1e88e5"}, {title: "Videos", icon: "subscriptions", badge: 24, color:"#e53935"} ] lst = MUI.CreateListSimple(list, 1, null, "Divider") lay.AddChild(lst) app.AddLayout(lay) } Copy All Run Methods The following methods are available on the ListSimple object: AppendItem( data ) ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetList() → Object GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean RemoveItem( index ) SetBadge( newBadge, index ) SetEnabled( enable ) SetList( list ) SetMargins( left, top, right, bottom, mode ) SetOnTouch( callback ) SetPosition( left, top, width, height, options ) SetTitleText( newTitle, index ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( title, index, icon, badge )
MUI/CreateMenu.htm := CreateMenu Back CreateMenu Hello World Content: - Methods A simple MUI implementation of material design menu. mn = MUI.CreateMenu( list, width, height, position ) → Object Example - Basic cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") btn = MUI.CreateButtonRaised("SHOW MENU", 0.35) btn.SetOnTouch(ShowMenu) lay.AddChild(btn) app.AddLayout(lay) var list = "Find, Edit, Share, Settings, About" lst = MUI.CreateMenu(list, null, null, "Top, Right") lst.SetOnSelect(OnSelect) } function ShowMenu() { lst.Show() } function OnSelect(choice) { app.ShowPopup(choice) } Copy All Run Example - Dark & Bottom,Right cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") btn = MUI.CreateButtonRaised("SHOW MENU", 0.35) btn.SetOnTouch(ShowMenu) lay.AddChild(btn) app.AddLayout(lay) var list = "Find, Edit, Share, Settings, About" lst = MUI.CreateMenu(list, null, null, "Bottom, Right") lst.SetOnSelect(OnSelect) } function ShowMenu() { lst.Show() } function OnSelect(choice) { app.ShowPopup(choice) } Copy All Run Methods The following methods are available on the Menu object: ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetEnabled( enable ) SetList( list ) SetOnSelect( callback ) SetVisibility( mode ) Show() function( title, index )
MUI/CreateMenuWithIcon.htm := CreateMenuWithIcon Back CreateMenuWithIcon Hello World Content: - Methods Advance MUI implementation of material design menu with additional icon using material icon font. mwi = MUI.CreateMenuWithIcon( list, width, height, position ) → Object Example - Basic cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") btn = MUI.CreateButtonRaised("SHOW MENU", 0.35) btn.SetOnTouch(ShowMenu) lay.AddChild(btn) app.AddLayout(lay) var list = ["Settings:settings", "Location:location_on", "Camera:camera", "Account:person"] lst = MUI.CreateMenuWithIcon(list, null, null, "Top, Right") lst.SetOnSelect(OnSelect) } function ShowMenu() { lst.Show() } function OnSelect(choice) { app.ShowPopup(choice) } Copy All Run Example - Dark & Bottom,Right cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") btn = MUI.CreateButtonRaised("SHOW MENU", 0.35) btn.SetOnTouch(ShowMenu) lay.AddChild(btn) app.AddLayout(lay) var list = ["Settings:settings", "Location:location_on", "Camera:camera", "Account:person"] lst = MUI.CreateMenuWithIcon(list, null, null, "Bottom, Right") lst.SetOnSelect(OnSelect) } function ShowMenu() { lst.Show() } function OnSelect(choice, index) { app.ShowPopup(choice+" : "+index) } Copy All Run Methods The following methods are available on the MenuWithIcon object: ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetEnabled( enable ) SetOnSelect( callback ) SetVisibility( mode ) Show() function( text, index )
MUI/CreateModal.htm := CreateModal Back CreateModal Hello World Content: - Methods A modal is a popup with more controls that can be added. mdl = MUI.CreateModal( title, body, okTxt, cancelTxt, show, options ) → Object You can display a modal with text directly by providing a body text. You can use the "Full" as options if you want your modal to occupy the whole screen. Example - Basic cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") btn = MUI.CreateButtonRaised("SHOW MODAL", 0.35) btn.SetOnTouch(ShowModal) lay.AddChild(btn) app.AddLayout(lay) var text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua , sed do eiusmod tempor incididunt ut labore et dolore magna aliqua." modal = UI.CreateModal("Modal title", text) } function ShowModal() { modal.Show() } Copy All Run If you want to add your custom controls on the modal such as images and buttons, you can do so by passing an empty string or null to the body text param Example - Custom Controls cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") btn = MUI.CreateButtonRaised("SHOW MODAL", 0.4) btn.SetOnTouch(ShowModal) lay.AddChild(btn) modal = UI.CreateModal("Modal title", "", "PROCEED", "CANCEL", false) //Add custom controls to your modal modalLay = modal.GetLayout() img = app.CreateImage("/Sys/Img/Droid1.png", 0.5) modalLay.AddChild(img) button = MUI.CreateButtonRound("SOME BUTTON", 0.4) modalLay.AddChild(button) app.AddLayout(lay) } function ShowModal() { modal.Show() } Copy All Run Use SetOnTouch method to call a function when the user touches the control buttons. Example - With Callback cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") btn = MUI.CreateButtonRaised("SHOW MODAL", 0.35) btn.SetOnTouch(ShowModal) lay.AddChild(btn) app.AddLayout(lay) var text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua , sed do eiusmod tempor incididunt ut labore et dolore magna aliqua." modal = UI.CreateModal("Modal title", text) modal.SetOnTouch(OnControlTouch) } function ShowModal() { modal.Show() } function OnControlTouch(isOk, btnText) { app.ShowPopup(isOk+" : "+btnText) } Copy All Run Example - Full Modal cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "FillXY,VCenter") btn = MUI.AddButtonRaised(lay, "SHOW MODAL", 0.35) btn.SetOnTouch(ShowModal) app.AddLayout(lay) var text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua , sed do eiusmod tempor incididunt ut labore et dolore magna aliqua." modal = UI.CreateModal("Modal title", text, "Save", "Close", false, "Full") modal.SetOnTouch(OnControlTouch) } function ShowModal() { modal.Show() } function OnControlTouch(isOk, btnText) { app.ShowPopup(isOk+" : "+btnText) } Copy All Run Methods The following methods are available on the Modal object: ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLayout() → app object: Layout GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetEnabled( enable ) SetHeaderColor( color ) SetOnClose( callback ) SetOnTouch( callback ) SetText( text ) SetTextColor( color ) SetTitle( title ) SetVisibility( mode ) Show() function( isOkBtnClick, btnText )
MUI/CreateRadio.htm := CreateRadio Back CreateRadio Hello World Content: - Methods Creates a radio control by manipulation of the DroidScript's list control. rd = MUI.CreateRadio( list, width, height, color ) → Object A radio control allows the user to select only one item in a list. For selecting multiple items in a list, use checkbox. Example - Basic cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var list = "Apple, Mango, Banana" rad = MUI.CreateRadio(list) lay.AddChild(rad) app.AddLayout(lay) } Copy All Run Example - With callback cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var list = "Apple, Mango, Banana" rad = MUI.CreateRadio(list) rad.SetOnTouch(OnTouch) lay.AddChild(rad) app.AddLayout(lay) } function OnTouch(name, index) { app.ShowPopup(name+" : "+index) } Copy All Run Methods The following methods are available on the Radio object: Animate( type, callback, time ) CheckItemByIndex( index ) ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetCheckItem() → String: “title”, “index” GetHeight( options ) → Number GetItem( title ) → Object GetItemByIndex( index ) → Object GetLeft( options ) → Number GetLength() → Number: integer GetList( delim ) → Object GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “List” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() InsertItem( index, title, body, image ) IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Method( name, types, p1, p2, p3, p4 ) → all types RemoveAll() RemoveItem( title ) RemoveItemByIndex( index ) ScrollToItem( title, body ) ScrollToItemByIndex( index ) SelectItem( title, body, scroll ) SelectItemByIndex( index, scroll ) SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetColumnWidths( icon, title, body, mode ) SetDivider( height, color ) SetEllipsize( mode ) SetEllipsize1( mode ) SetEllipsize2( mode ) SetEnabled( enable ) SetFontFile( file ) SetHiTextColor1( clr ) SetHiTextColor2( clr ) SetList( list, delim ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnSelect( callback ) SetOnTouch( callback ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetTextColor( color ) SetTextColor1( clr ) SetTextColor2( clr ) SetTextMargins( left, top, right, bottom, mode, options ) SetTextShadow( radius, dx, dy, color ) SetTextShadow1( radius, dx, dy, color ) SetTextShadow2( radius, dx, dy, color ) SetTextSize( size, mode ) SetTextSize1( size, mode ) SetTextSize2( size, mode ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src ) function( name, index )
MUI/CreateRadioButtons.htm := CreateRadioButtons Back CreateRadioButtons Hello World Content: - Methods Creates a radio button control. rdb = MUI.CreateRadioButtons( list, width, height, orientation, color, backColor ) → Object A radio control allows the user to select only one item in a list. For selecting multiple items in a list, use checkbox. Example - Basic cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var list = "Apps, Games, Movies, Books" rad = MUI.CreateRadioButtons(list) lay.AddChild(rad) app.AddLayout(lay) } Copy All Run Example - With callback cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var list = "Apps, Games, Movies, Books" rad = MUI.CreateRadioButtons(list, 1, null, "Vertical") rad.SetOnTouch(OnTouch) lay.AddChild(rad) app.AddLayout(lay) } function OnTouch(name, index) { app.ShowPopup(name+" : "+index) } Copy All Run Methods The following methods are available on the RadioButtons object: Animate( type, callback, time ) CheckItemByIndex( index ) ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetCheckItem() → String: “title”, “index” GetHeight( options ) → Number GetItem( index ) → String: “title” GetLeft( options ) → Number GetList() → List: Array of titles GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetType() → String: “Radio” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetEnabled( enable ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnSelect( callback ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetVisibility( mode ) Show() Toggle() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src ) function( name, index )
MUI/CreateRadioMaterial.htm := CreateRadioMaterial Back CreateRadioMaterial Hello World Content: - Methods Creates a material radio control. rdm = MUI.CreateRadioMaterial( list, width, height, orientation, color, backColor ) → Object A radio control allows the user to select only one item in a list. For selecting multiple items in a list, use checkbox. Example - Basic cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var list = "Apps, Games, Movies, Books" rad = MUI.CreateRadioMaterial(list) lay.AddChild(rad) app.AddLayout(lay) } Copy All Run Example - With callback cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var list = "Apps, Games, Movies, Books" rad = MUI.CreateRadioMaterial(list, 1, null, "Vertical") rad.SetOnTouch(OnTouch) lay.AddChild(rad) app.AddLayout(lay) } function OnTouch(name, index) { app.ShowPopup(name+" : "+index) } Copy All Run Example - Horizontal cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var list = "Apps, Games, Movies, Books" rad = MUI.CreateRadioMaterial(list, 1, null, "Horizontal") rad.SetOnTouch(OnTouch) lay.AddChild(rad) app.AddLayout(lay) } function OnTouch(name, index) { app.ShowPopup(name+" : "+index) } Copy All Run Methods The following methods are available on the RadioMaterial object: Animate( type, callback, time ) CheckItemByIndex( index ) ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetCheckItem() → String: “title”, “index” GetHeight( options ) → Number GetItem( index ) → String: “title” GetLeft( options ) → Number GetList() → List: Array of titles GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetType() → String: “Radio” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetEnabled( enable ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnSelect( callback ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetVisibility( mode ) Show() Toggle() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src ) function( name, index )
MUI/CreateSeekBar.htm := CreateSeekBar Back CreateSeekBar Hello World Content: - Methods An MUI implementation of a basic seekbar. skb = MUI.CreateSeekBar( value, range, width, color ) → Object Example - Basic cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") skb = MUI.CreateSeekBar(25, 100, 0.9) skb.SetOnTouch(OnTouch) lay.AddChild(skb) app.AddLayout(lay) } function OnTouch(value) { app.ShowPopup(value) } Copy All Run Methods The following methods are available on the SeekBar object: Animate( type, callback, time ) ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetType() → String: “Seekbar” GetValue() → Number GetWidth( options ) → Number Gone() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetDecimals( decimals ) SetEnabled( enable ) SetOnTouch( callback ) SetPosition( left, top, width, height, options ) SetSize( width, height, options ) SetValue( value ) SetVisibility( mode ) Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( value )
MUI/CreateSpinner.htm := CreateSpinner Back CreateSpinner Hello World Content: - Methods Creates a material designed dropdown. spn = MUI.CreateSpinner( list, width, height ) → app object Let the user select from a predefined options. Example - Basic cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") spn = MUI.CreateSpinner("Item 1, Item 2, Item 3", 0.6, 0.1) spn.SetOnChange(OnChange) lay.AddChild(spn) app.AddLayout(lay) } function OnChange(value, index) { app.ShowPopup(value) } Copy All Run Methods The following methods are available on the Spinner object: GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetText() → String GetTop( options ) → Number GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SelectItem( value ) SelectItemByIndex( index ) SetEnabled( enable ) SetHint( hint ) SetList( list ) SetMargins( left, top, right, bottom, mode ) SetOnChange( callback ) SetPosition( left, top, width, height, options ) SetTextColor( color ) SetTextSize( size, mode ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( value, index )
MUI/CreateSwitch.htm := CreateSwitch Back CreateSwitch Hello World Content: - Methods Creates a switch that can be toggled on and off. swt = MUI.CreateSwitch( value, color ) → Object Example - Basic cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") skb = MUI.CreateSwitch() skb.SetOnTouch(OnTouch) lay.AddChild(skb) app.AddLayout(lay) } function OnTouch(value) { app.ShowPopup(value) } Copy All Run Example - With Value & Color cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal, "Light") lay = MUI.CreateLayout("Linear", "FillXY,VCenter") skb = MUI.CreateSwitch(true, MUI.colors.blue.blue) skb.SetOnTouch(OnTouch) lay.AddChild(skb) app.AddLayout(lay) } function OnTouch(value) { app.ShowPopup(value) } Copy All Run Methods The following methods are available on the Switch object: Animate( type, callback, time ) ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetType() → String: “Seekbar” GetValue() → Boolean GetWidth( options ) → Number Gone() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetEnabled( enable ) SetOnTouch( callback ) SetPosition( left, top, width, height, options ) SetValue( value ) SetVisibility( mode ) Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( value )
MUI/CreateSwitchSettings.htm := CreateSwitchSettings Back CreateSwitchSettings Hello World Content: - Methods Creates a switchable settings that can be toggled on and off. sws = MUI.CreateSwitchSettings( text, width, height, value, color, backColor ) → Object Example - Basic cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") skb = MUI.CreateSwitchSettings("Enable Sound", 1) skb.SetOnTouch(OnTouch) lay.AddChild(skb) app.AddLayout(lay) } function OnTouch(text, value) { app.ShowPopup(text+" : "+value) } Copy All Run Example - More Settings cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") var settings = [ "Enable sound", "Enable dark mode", "Disable full screen" ] for(var i=0; i settings.length; i++) { skb = MUI.CreateSwitchSettings(settings[i], 1) skb.SetOnTouch(OnTouch) lay.AddChild(skb) lay.AddChild(MUI.CreateDivider()) } app.AddLayout(lay) } function OnTouch(text, value) { app.ShowPopup(text+" : "+value) } Copy All Run Methods The following methods are available on the SwitchSettings object: Animate( type, callback, time ) ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetType() → String: “Seekbar” GetValue() → Boolean GetWidth( options ) → Number Gone() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetEnabled( enable ) SetOnTouch( callback ) SetPosition( left, top, width, height, options ) SetValue( value ) SetVisibility( mode ) Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( text, value )
MUI/CreateTabFixed.htm := CreateTabFixed Back CreateTabFixed Hello World Content: - Methods Creates a simple fixed tab. tbf = MUI.CreateTabFixed( title, width, height, options, color, animation ) → Object A basic tab implementation. Example - Basic cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal, "Light") lay = MUI.CreateLayout("Linear", "FillXY") tab = MUI.CreateTabFixed("Songs,Albums,Artists", 1, 1, "VCenter,FillXY") songsLay = tab.GetLayout("Songs") btn = MUI.CreateButtonRaisedO("BUTTON") songsLay.AddChild(btn) albumsLay = tab.GetLayout("Albums") ted = MUI.CreateTextEditFilled(0.75, "", "Text hint", true) albumsLay.AddChild(ted) artistLay = tab.GetLayout("Artists") img = app.CreateImage("/Sys/Img/Droid1.png", 0.3) artistLay.AddChild(img) lay.AddChild(tab) app.AddLayout(lay) } Copy All Run To add a sliding animation into the fixed tab, pass a boolean to the animation argument Example - With Slide Animation cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY") tab = MUI.CreateTabFixed("Songs,Albums,Artists", 1, 1, "VCenter,FillXY", "#673ab7", true) songsLay = tab.GetLayout("Songs") btn = MUI.CreateButtonRaisedO("BUTTON") songsLay.AddChild(btn) albumsLay = tab.GetLayout("Albums") ted = MUI.CreateTextEditFilled(0.75, null, "Text hint", true) albumsLay.AddChild(ted) artistLay = tab.GetLayout("Artists") img = app.CreateImage("/Sys/Img/Droid1.png", 0.3) artistLay.AddChild(img) lay.AddChild(tab) app.AddLayout(lay) } Copy All Run To add a callback when the user selects a tab use the SetOnSelect method. Example - With Callback cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal, "Light") lay = MUI.CreateLayout("Linear", "FillXY") tab = MUI.CreateTabFixed("Songs,Albums,Artists", 1, 1, "VCenter,FillXY", "#673ab7", true) tab.SetOnSelect(OnSelect) songsLay = tab.GetLayout("Songs") btn = MUI.CreateButtonRaisedO("BUTTON") songsLay.AddChild(btn) albumsLay = tab.GetLayout("Albums") ted = MUI.CreateTextEditFilled(0.75, null, "Text hint", true) albumsLay.AddChild(ted) artistLay = tab.GetLayout("Artists") img = app.CreateImage("/Sys/Img/Droid1.png", 0.3) artistLay.AddChild(img) lay.AddChild(tab) app.AddLayout(lay) } function OnSelect(name, index) { app.ShowPopup(name+" : "+index) } Copy All Run Methods The following methods are available on the TabFixed object: Animate( type, callback, time ) ClearFocus() Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLayout( name ) → app object: Layout GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetType() → String: “Tab” GetWidth( options ) → Number Gone() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetActiveTabByIndex( index ) SetEnabled( enable ) SetOnSelect( callback ) SetPosition( left, top, width, height, options ) SetVisibility( mode ) Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( name, index )
MUI/CreateTEFilledIconLeft.htm := CreateTEFilledIconLeft Back CreateTEFilledIconLeft Hello World Content: - Methods Creates a filled text input with icon on the left. tef = MUI.CreateTEFilledIconLeft( width, options, icon, hint, label, color ) → Object Example - No Label cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTEFilledIconLeft(0.8, "Left", "person", "Type your name") lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - Dark With Label cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTEFilledIconLeft(0.8, "Left,Password", "lock", "Type your password", true) lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - SetOnEnter Callback cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTEFilledIconLeft(0.8, "Left,Number", "call", "Type your number", true) tef.SetOnEnter(OnEnter) lay.AddChild(tef) app.AddLayout(lay) } function OnEnter() { app.ShowPopup(this.GetText()) } Copy All Run Methods The following methods are available on the TEFilledIconLeft object: ClearFocus() ClearHistory() Focus() GetCursorLine() → Number GetCursorPos() GetSelectedText() GetSelectionEnd() GetSelectionStart() GetText() → String GetType() → String GetVisibility() → String: “Show” or “Hide” or “Gone” Gone() InsertText( text, start ) IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Redo() ReplaceText( text, start, end ) SetCursorPos( position ) SetMargins( left, top, right, bottom, mode ) SetOnChange( callback ) SetOnEnter( callback ) SetOnIconTouch( callback ) SetOnTouch( callback ) SetPosition( left, top, width, height, options ) SetText( text ) Undo()
MUI/CreateTEFilledIconRight.htm := CreateTEFilledIconRight Back CreateTEFilledIconRight Hello World Content: - Methods Creates a filled text input with icon on the right. tef = MUI.CreateTEFilledIconRight( width, options, icon, hint, label, color ) → Object Example - No Label cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTEFilledIconRight(0.8, "Left", "person", "Type your name") lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - Dark With Label cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTEFilledIconRight(0.8, "Left,Password", "lock", "Type your password", true) lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - SetOnEnter Callback cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTEFilledIconRight(0.8, "Left,Number", "call", "Type your number", true) tef.SetOnEnter(OnEnter) lay.AddChild(tef) app.AddLayout(lay) } function OnEnter() { app.ShowPopup(this.GetText()) } Copy All Run Methods The following methods are available on the TEFilledIconRight object: ClearFocus() ClearHistory() Focus() GetCursorLine() → Number GetCursorPos() GetSelectedText() GetSelectionEnd() GetSelectionStart() GetText() → String GetType() → String GetVisibility() → String: “Show” or “Hide” or “Gone” Gone() InsertText( text, start ) IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Redo() ReplaceText( text, start, end ) SetCursorPos( position ) SetMargins( left, top, right, bottom, mode ) SetOnChange( callback ) SetOnEnter( callback ) SetOnIconTouch( callback ) SetOnTouch( callback ) SetPosition( left, top, width, height, options ) SetText( text ) Undo()
MUI/CreateTEOutlineIconLeft.htm := CreateTEOutlineIconLeft Back CreateTEOutlineIconLeft Hello World Content: - Methods Creates a material outlined text input with icon on the left. teo = MUI.CreateTEOutlineIconLeft( width, options, icon, hint, label, color, backColor ) → Object Example - No Label cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTEOutlineIconLeft(0.8, "Left", "person", "Type your name") lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - Dark With Label cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTEOutlineIconLeft(0.8, "Left,Password", "lock", "Type your password", true) lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - Round cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTEOutlineIconLeft(0.8, "Left,Number,Round", "call", "Type your number", true) lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - SetOnEnter Callback cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTEOutlineIconLeft(0.8, "Left,Number", "call", "Type your number", true) tef.SetOnEnter(OnEnter) lay.AddChild(tef) app.AddLayout(lay) } function OnEnter() { app.ShowPopup(this.GetText()) } Copy All Run Methods The following methods are available on the TEOutlineIconLeft object: ClearFocus() ClearHistory() Focus() GetCursorLine() → Number GetCursorPos() GetSelectedText() GetSelectionEnd() GetSelectionStart() GetText() → String GetType() → String GetVisibility() → String: “Show” or “Hide” or “Gone” Gone() InsertText( text, start ) IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Redo() ReplaceText( text, start, end ) SetCursorPos( position ) SetMargins( left, top, right, bottom, mode ) SetOnChange( callback ) SetOnEnter( callback ) SetOnIconTouch( callback ) SetOnTouch( callback ) SetPosition( left, top, width, height, options ) SetText( text ) Undo()
MUI/CreateTEOutlineIconRight.htm := CreateTEOutlineIconRight Back CreateTEOutlineIconRight Hello World Content: - Methods Creates a material outlined text input with icon on the right. teo = MUI.CreateTEOutlineIconRight( width, options, icon, hint, label, color, backColor ) → Object Example - No Label cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTEOutlineIconRight(0.8, "Left", "person", "Type your name") lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - Dark With Label cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTEOutlineIconRight(0.8, "Left,Password", "lock", "Type your password", true) lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - SetOnEnter Callback cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTEOutlineIconRight(0.8, "Left,Number", "call", "Type your number", true) tef.SetOnEnter(OnEnter) lay.AddChild(tef) app.AddLayout(lay) } function OnEnter() { app.ShowPopup(this.GetText()) } Copy All Run Methods The following methods are available on the TEOutlineIconRight object: ClearFocus() ClearHistory() Focus() GetCursorLine() → Number GetCursorPos() GetSelectedText() GetSelectionEnd() GetSelectionStart() GetText() → String GetType() → String GetVisibility() → String: “Show” or “Hide” or “Gone” Gone() InsertText( text, start ) IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Redo() ReplaceText( text, start, end ) SetCursorPos( position ) SetMargins( left, top, right, bottom, mode ) SetOnChange( callback ) SetOnEnter( callback ) SetOnIconTouch( callback ) SetOnTouch( callback ) SetPosition( left, top, width, height, options ) SetText( text ) Undo()
MUI/CreateTESearchElegant.htm := CreateTESearchElegant Back CreateTESearchElegant Hello World Content: - Methods Creates a customizable elegant text input. tes = MUI.CreateTESearchElegant( width, hint, icon, iconPos, color, option ) → Object Basic implementation. Example - Basic cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTESearchElegant(0.8, "Search for music", "music_note") lay.AddChild(tef) app.AddLayout(lay) } Copy All Run By default icon is displayed on the left, you can place the icon to the right by passing Right to the iconPos argument. Example - RightIcon cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTESearchElegant(0.8, "Search for music", "music_note", "Right") lay.AddChild(tef) app.AddLayout(lay) } Copy All Run To make a smaller input, just pass small to the option argument. Example - Small cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTESearchElegant(0.8, "Search for music", "music_note", "Right", "#673ab7", "Small") lay.AddChild(tef) app.AddLayout(lay) } Copy All Run To make a bordered input, you can pass border to the option argument. Example - Border cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTESearchElegant(0.8, "Search for music", "music_note", "Right", null, "Small,Border") lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Methods The following methods are available on the TESearchElegant object: ClearFocus() ClearHistory() Focus() GetCursorLine() → Number GetCursorPos() GetSelectedText() GetSelectionEnd() GetSelectionStart() GetText() → String GetType() → String GetVisibility() → String: “Show” or “Hide” or “Gone” Gone() InsertText( text, start ) IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Redo() ReplaceText( text, start, end ) SetCursorPos( position ) SetIconOnTouch( callback ) SetMargins( left, top, right, bottom, mode ) SetOnChange( callback ) SetOnEnter( callback ) SetOnIconTouch( callback ) SetOnTouch( callback ) SetPosition( left, top, width, height, options ) SetText( text ) Undo()
MUI/CreateTESearchUnique.htm := CreateTESearchUnique Back CreateTESearchUnique Hello World Content: - Methods Creates a unique text input. tes = MUI.CreateTESearchUnique( width, hint, icon, iconColor ) → Object Example - Search cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTESearchUnique(0.8, "Search for music", "search") lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - Dark cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTESearchUnique(0.8, "Search for music", "search") lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Methods The following methods are available on the TESearchUnique object: ClearFocus() ClearHistory() Focus() GetCursorLine() → Number GetCursorPos() GetSelectedText() GetSelectionEnd() GetSelectionStart() GetText() → String GetType() → String GetVisibility() → String: “Show” or “Hide” or “Gone” Gone() InsertText( text, start ) IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Redo() ReplaceText( text, start, end ) SetCursorPos( position ) SetMargins( left, top, right, bottom, mode ) SetOnChange( callback ) SetOnEnter( callback ) SetOnIconTouch( callback ) SetPosition( left, top, width, height, options ) SetText( text ) Undo()
MUI/CreateTextAreaFilled.htm := CreateTextAreaFilled Back CreateTextAreaFilled Hello World Content: - Methods Creates a material filled textarea. taf = MUI.CreateTextAreaFilled( width, height, hint, label, color ) → Object Example - No Label cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTEFilledIconLeft(0.8, "Left", "person", "Type your name") lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - With Label cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTEFilledIconLeft(0.8, "Left,Password", "lock", "Type your password", true) lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - SetOnEnter Callback cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTEFilledIconLeft(0.8, "Left,Number", "call", "Type your number", true) tef.SetOnEnter(OnEnter) lay.AddChild(tef) app.AddLayout(lay) } function OnEnter() { app.ShowPopup(this.GetText()) } Copy All Run Methods The following methods are available on the TextAreaFilled object: ClearFocus() ClearHistory() Focus() GetCursorLine() → Number GetCursorPos() GetSelectedText() GetSelectionEnd() GetSelectionStart() GetText() → String GetType() → String GetVisibility() → String: “Show” or “Hide” or “Gone” Gone() InsertText( text, start ) IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Redo() ReplaceText( text, start, end ) SetCursorPos( position ) SetMargins( left, top, right, bottom, mode ) SetOnChange( callback ) SetOnEnter( callback ) SetPosition( left, top, width, height, options ) SetText( text ) Undo()
MUI/CreateTextAreaFilledA.htm := CreateTextAreaFilledA Back CreateTextAreaFilledA Hello World Content: - Methods Creates an active filled textarea. taf = MUI.CreateTextAreaFilledA( width, height, hint, label, color ) → Object Example - No Label cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTextAreaFilledA(0.8, 0.2, "Type your name") lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - With Label cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTextAreaFilledA(0.8, 0.2, "Type your name", true) lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - SetOnEnter Callback cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") MUI.CreateTextAreaFilledA(0.8, 0.2, "Type your name", true) tef.SetOnEnter(OnEnter) lay.AddChild(tef) app.AddLayout(lay) } function OnEnter() { app.ShowPopup(this.GetText()) } Copy All Run Methods The following methods are available on the TextAreaFilledA object: ClearFocus() ClearHistory() Focus() GetCursorLine() → Number GetCursorPos() GetSelectedText() GetSelectionEnd() GetSelectionStart() GetText() → String GetType() → String GetVisibility() → String: “Show” or “Hide” or “Gone” Gone() InsertText( text, start ) IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Redo() ReplaceText( text, start, end ) SetCursorPos( position ) SetMargins( left, top, right, bottom, mode ) SetOnChange( callback ) SetOnEnter( callback ) SetPosition( left, top, width, height, options ) SetText( text ) Undo()
MUI/CreateTextAreaOutline.htm := CreateTextAreaOutline Back CreateTextAreaOutline Hello World Content: - Methods Creates an outlined material textarea. tao = MUI.CreateTextAreaOutline( width, height, hint, label, color, backColor ) → Object Example - No Label cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTextAreaOutline(0.8, 0.2, "Type your name") lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - With Label cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTextAreaOutline(0.8, 0.2, "Type your name", true) lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - SetOnEnter Callback cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") MUI.CreateTextAreaOutline(0.8, 0.2, "Type your name", true) tef.SetOnEnter(OnEnter) lay.AddChild(tef) app.AddLayout(lay) } function OnEnter() { app.ShowPopup(this.GetText()) } Copy All Run Methods The following methods are available on the TextAreaOutline object: ClearFocus() ClearHistory() Focus() GetCursorLine() → Number GetCursorPos() GetSelectedText() GetSelectionEnd() GetSelectionStart() GetText() → String GetType() → String GetVisibility() → String: “Show” or “Hide” or “Gone” Gone() InsertText( text, start ) IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Redo() ReplaceText( text, start, end ) SetCursorPos( position ) SetMargins( left, top, right, bottom, mode ) SetOnChange( callback ) SetOnEnter( callback ) SetPosition( left, top, width, height, options ) SetText( text ) Undo()
MUI/CreateTextAreaOutlineA.htm := CreateTextAreaOutlineA Back CreateTextAreaOutlineA Hello World Content: - Methods Creates an active outlined material textarea. tao = MUI.CreateTextAreaOutlineA( width, height, hint, label, color, backColor ) → Object Example - No Label cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTextAreaOutlineA(0.8, 0.2, "Type your name") lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - With Label cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTextAreaOutlineA(0.8, 0.2, "Type your name", true) lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - SetOnEnter Callback cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") MUI.CreateTextAreaOutlineA(0.8, 0.2, "Type your name", true) tef.SetOnEnter(OnEnter) lay.AddChild(tef) app.AddLayout(lay) } function OnEnter() { app.ShowPopup(this.GetText()) } Copy All Run Methods The following methods are available on the TextAreaOutlineA object: ClearFocus() ClearHistory() Focus() GetCursorLine() → Number GetCursorPos() GetSelectedText() GetSelectionEnd() GetSelectionStart() GetText() → String GetType() → String GetVisibility() → String: “Show” or “Hide” or “Gone” Gone() InsertText( text, start ) IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Redo() ReplaceText( text, start, end ) SetCursorPos( position ) SetMargins( left, top, right, bottom, mode ) SetOnChange( callback ) SetOnEnter( callback ) SetPosition( left, top, width, height, options ) SetText( text ) Undo()
MUI/CreateTextEditFilled.htm := CreateTextEditFilled Back CreateTextEditFilled Hello World Content: - Methods Creates the most common type of material text input. tef = MUI.CreateTextEditFilled( width, options, hint, label, color ) → Object Example - No Label cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTextEditFilled(0.8, "Left", "Type your name") lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - With Label cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTextEditFilled(0.8, "Left", "Username", true) lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - SetOnEnter Callback cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTextEditFilled(0.8, "Left", "Type your name", true) tef.SetOnEnter(OnEnter) lay.AddChild(tef) app.AddLayout(lay) } function OnEnter() { app.ShowPopup(this.GetText()) } Copy All Run Methods The following methods are available on the TextEditFilled object: ClearFocus() ClearHistory() Focus() GetCursorLine() → Number GetCursorPos() GetSelectedText() GetSelectionEnd() GetSelectionStart() GetText() → String GetType() → String GetVisibility() → String: “Show” or “Hide” or “Gone” Gone() InsertText( text, start ) IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Redo() ReplaceText( text, start, end ) SetCursorPos( position ) SetMargins( left, top, right, bottom, mode ) SetOnChange( callback ) SetOnEnter( callback ) SetOnTouch( callback ) SetPosition( left, top, width, height, options ) SetText( text ) Undo()
MUI/CreateTextEditFilledA.htm := CreateTextEditFilledA Back CreateTextEditFilledA Hello World Content: - Methods Creates an active filled material text input. tef = MUI.CreateTextEditFilledA( width, options, hint, label, color ) → Object Example - No Label cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTextEditFilledA(0.8, "Left", "Type your name") lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - With Label cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTextEditFilledA(0.8, "Left", "Username", true) lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - SetOnEnter Callback cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTextEditFilledA(0.8, "Left", "Type your name", true) tef.SetOnEnter(OnEnter) lay.AddChild(tef) app.AddLayout(lay) } function OnEnter() { app.ShowPopup(this.GetText()) } Copy All Run Methods The following methods are available on the TextEditFilledA object: ClearFocus() ClearHistory() Focus() GetCursorLine() → Number GetCursorPos() GetSelectedText() GetSelectionEnd() GetSelectionStart() GetText() → String GetType() → String GetVisibility() → String: “Show” or “Hide” or “Gone” Gone() InsertText( text, start ) IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Redo() ReplaceText( text, start, end ) SetCursorPos( position ) SetMargins( left, top, right, bottom, mode ) SetOnChange( callback ) SetOnEnter( callback ) SetOnTouch( callback ) SetPosition( left, top, width, height, options ) SetText( text ) Undo()
MUI/CreateTextEditOutline.htm := CreateTextEditOutline Back CreateTextEditOutline Hello World Content: - Methods Creates an outlined material text input. teo = MUI.CreateTextEditOutline( width, options, hint, label, color, backColor ) → Object Example - No Label cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTextEditOutline(0.8, "Left", "Type your name") lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - With Label cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTextEditOutline(0.8, "Left", "Username", true) lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - SetOnEnter Callback cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTextEditOutline(0.8, "Left", "Type your name", true) tef.SetOnEnter(OnEnter) lay.AddChild(tef) app.AddLayout(lay) } function OnEnter() { app.ShowPopup(this.GetText()) } Copy All Run Methods The following methods are available on the TextEditOutline object: ClearFocus() ClearHistory() Focus() GetCursorLine() → Number GetCursorPos() GetSelectedText() GetSelectionEnd() GetSelectionStart() GetText() → String GetType() → String GetVisibility() → String: “Show” or “Hide” or “Gone” Gone() InsertText( text, start ) IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Redo() ReplaceText( text, start, end ) SetCursorPos( position ) SetMargins( left, top, right, bottom, mode ) SetOnChange( callback ) SetOnEnter( callback ) SetOnTouch( callback ) SetPosition( left, top, width, height, options ) SetText( text ) Undo()
MUI/CreateTextEditOutlineA.htm := CreateTextEditOutlineA Back CreateTextEditOutlineA Hello World Content: - Methods Creates an active outlined material text input. teo = MUI.CreateTextEditOutlineA( width, options, hint, label, color, backColor ) → Object Example - No Label cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTextEditOutlineA(0.8, "Left", "Type your name") lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - With Label cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTextEditOutlineA(0.8, "Left", "Username", true) lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - SetOnEnter Callback cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTextEditOutlineA(0.8, "Left", "Type your name", true) tef.SetOnEnter(OnEnter) lay.AddChild(tef) app.AddLayout(lay) } function OnEnter() { app.ShowPopup(this.GetText()) } Copy All Run Methods The following methods are available on the TextEditOutlineA object: ClearFocus() ClearHistory() Focus() GetCursorLine() → Number GetCursorPos() GetSelectedText() GetSelectionEnd() GetSelectionStart() GetText() → String GetType() → String GetVisibility() → String: “Show” or “Hide” or “Gone” Gone() InsertText( text, start ) IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Redo() ReplaceText( text, start, end ) SetCursorPos( position ) SetMargins( left, top, right, bottom, mode ) SetOnChange( callback ) SetOnEnter( callback ) SetOnTouch( callback ) SetPosition( left, top, width, height, options ) SetText( text ) Undo()
MUI/CreateTextEditSearch.htm := CreateTextEditSearch Back CreateTextEditSearch Hello World Content: - Methods Creates a customize search style text input. tes = MUI.CreateTextEditSearch( width, options, hint, color, backColor ) → Object Example - Search cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTextEditSearch(0.8, "Left", "Search for something") lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Example - SetOnEnter Callback cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTextEditSearch(0.8, "Left", "Search for something") tef.SetOnEnter(OnEnter) lay.AddChild(tef) app.AddLayout(lay) } function OnEnter() { app.ShowPopup(this.GetText()) } Copy All Run Methods The following methods are available on the TextEditSearch object: ClearFocus() ClearHistory() Focus() GetCursorLine() → Number GetCursorPos() GetSelectedText() GetSelectionEnd() GetSelectionStart() GetText() → String GetType() → String GetVisibility() → String: “Show” or “Hide” or “Gone” Gone() InsertText( text, start ) IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Redo() ReplaceText( text, start, end ) SetCursorPos( position ) SetMargins( left, top, right, bottom, mode ) SetOnChange( callback ) SetOnEnter( callback ) SetOnIconTouch( callback ) SetPosition( left, top, width, height, options ) SetText( text ) Undo()
MUI/CreateTextEditUnique.htm := CreateTextEditUnique Back CreateTextEditUnique Hello World Content: - Methods Creates a unique textedit customization. teu = MUI.CreateTextEditUnique( width, hint, icon, iconCOlor ) → Object Example - Unique Text Input cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "VCenter,FillXY") tef = MUI.CreateTextEditUnique(0.8, "Left", "Search for something") lay.AddChild(tef) app.AddLayout(lay) } Copy All Run Methods The following methods are available on the TextEditUnique object: ClearFocus() ClearHistory() Focus() GetCursorLine() → Number GetCursorPos() GetSelectedText() GetSelectionEnd() GetSelectionStart() GetText() → String GetType() → String GetVisibility() → String: “Show” or “Hide” or “Gone” Gone() InsertText( text, start ) IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Redo() ReplaceText( text, start, end ) SetCursorPos( position ) SetMargins( left, top, right, bottom, mode ) SetOnChange( callback ) SetOnEnter( callback ) SetOnTouch( callback ) SetPosition( left, top, width, height, options ) SetText( text ) Undo()
MUI/CreateTextH1.htm := CreateTextH1 Back CreateTextH1 Hello World Content: - Methods Creates a heading text 1. txh = MUI.CreateTextH1( text, width, height, options, color, fontWeight ) → Object Example - Sample cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") h1 = MUI.AddText(lay, "Some Heading", 0.8, 0.2, "h1,Medium,Multiline") h1 = MUI.AddTextH1(lay, "Some Heading", 0.8, 0.2, "Multiline", null, "Medium") h1 = MUI.CreateTextH1("Some Heading", 0.8, 0.2, "Multiline", null, "Medium") lay.AddChild(h1) app.AddLayout(lay) } Copy All Run Methods The following methods are available on the TextH1 object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) ClearFocus() data → Object Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetHtml() → Object GetLeft( options ) → Number GetLineCount() → Number: integer GetLineStart( line ) → Number: integer GetLineTop( line ) → Number GetMaxLines() → Number: integer GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “Text” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Log( msg, options ) Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetEllipsize( mode ) SetEnabled( enable ) SetFontFile( file ) SetHtml( str ) SetLog( maxLines ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetOnTouchDown( callback ) SetOnTouchMove( callback ) SetOnTouchUp( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetText( text ) SetTextColor( color ) SetTextShadow( radius, dx, dy, color ) SetTextSize( size, mode ) SetTouchable( touchable ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src ) function( event ) function( event ) function( event )
MUI/CreateTextH2.htm := CreateTextH2 Back CreateTextH2 Hello World Content: - Methods Creates a heading text. txh = MUI.CreateTextH2( text, width, height, options, color, fontWeight ) → Object Example - Sample cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") h2 = MUI.AddText(lay, "Some Heading", 0.8, 0.2, "h2,Medium,Multiline") h2 = MUI.AddTextH2(lay, "Some Heading", 0.8, 0.2, "Multiline", null, "Medium") h2 = MUI.CreateTextH2("Some Heading", 0.8, 0.2, "Multiline", null, "Medium") lay.AddChild(h2) app.AddLayout(lay) } Copy All Run Methods The following methods are available on the TextH2 object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) ClearFocus() data → Object Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetHtml() → Object GetLeft( options ) → Number GetLineCount() → Number: integer GetLineStart( line ) → Number: integer GetLineTop( line ) → Number GetMaxLines() → Number: integer GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “Text” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Log( msg, options ) Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetEllipsize( mode ) SetEnabled( enable ) SetFontFile( file ) SetHtml( str ) SetLog( maxLines ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetOnTouchDown( callback ) SetOnTouchMove( callback ) SetOnTouchUp( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetText( text ) SetTextColor( color ) SetTextShadow( radius, dx, dy, color ) SetTextSize( size, mode ) SetTouchable( touchable ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src ) function( event ) function( event ) function( event )
MUI/CreateTextH3.htm := CreateTextH3 Back CreateTextH3 Hello World Content: - Methods Creates a heading text 3. txh = MUI.CreateTextH3( text, width, height, options, color, fontWeight ) → Object Example - Sample cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") h3 = MUI.AddText(lay, "Some Heading", 0.8, 0.2, "h3,Medium,Multiline") h3 = MUI.AddTextH3(lay, "Some Heading", 0.8, 0.2, "Multiline", null, "Medium") h3 = MUI.CreateTextH3("Some Heading", 0.8, 0.2, "Multiline", null, "Medium") lay.AddChild(h3) app.AddLayout(lay) } Copy All Run Methods The following methods are available on the TextH3 object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) ClearFocus() data → Object Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetHtml() → Object GetLeft( options ) → Number GetLineCount() → Number: integer GetLineStart( line ) → Number: integer GetLineTop( line ) → Number GetMaxLines() → Number: integer GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “Text” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Log( msg, options ) Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetEllipsize( mode ) SetEnabled( enable ) SetFontFile( file ) SetHtml( str ) SetLog( maxLines ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetOnTouchDown( callback ) SetOnTouchMove( callback ) SetOnTouchUp( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetText( text ) SetTextColor( color ) SetTextShadow( radius, dx, dy, color ) SetTextSize( size, mode ) SetTouchable( touchable ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src ) function( event ) function( event ) function( event )
MUI/CreateTextH4.htm := CreateTextH4 Back CreateTextH4 Hello World Content: - Methods Creates a heading text 4. txh = MUI.CreateTextH4( text, width, height, options, color, fontWeight ) → Object Example - Sample cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") h4 = MUI.AddText(lay, "Some Heading", 0.8, 0.2, "h4,Medium,Multiline") h4 = MUI.AddTextH4(lay, "Some Heading", 0.8, 0.2, "Multiline", null, "Medium") h4 = MUI.CreateTextH4("Some Heading", 0.8, 0.2, "Multiline", null, "Medium") lay.AddChild(h4) app.AddLayout(lay) } Copy All Run Methods The following methods are available on the TextH4 object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) ClearFocus() data → Object Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetHtml() → Object GetLeft( options ) → Number GetLineCount() → Number: integer GetLineStart( line ) → Number: integer GetLineTop( line ) → Number GetMaxLines() → Number: integer GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “Text” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Log( msg, options ) Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetEllipsize( mode ) SetEnabled( enable ) SetFontFile( file ) SetHtml( str ) SetLog( maxLines ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetOnTouchDown( callback ) SetOnTouchMove( callback ) SetOnTouchUp( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetText( text ) SetTextColor( color ) SetTextShadow( radius, dx, dy, color ) SetTextSize( size, mode ) SetTouchable( touchable ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src ) function( event ) function( event ) function( event )
MUI/CreateTextH5.htm := CreateTextH5 Back CreateTextH5 Hello World Content: - Methods Creates a heading text 5. txh = MUI.CreateTextH5( text, width, height, options, color, fontWeight ) → Object Example - Sample cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") h5 = MUI.AddText(lay, "Some Heading", 0.8, 0.2, "h5,Medium,Multiline") h5 = MUI.AddTextH5(lay, "Some Heading", 0.8, 0.2, "Multiline", null, "Medium") h5 = MUI.CreateTextH5("Some Heading", 0.8, 0.2, "Multiline", null, "Medium") lay.AddChild(h5) app.AddLayout(lay) } Copy All Run Methods The following methods are available on the TextH5 object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) ClearFocus() data → Object Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetHtml() → Object GetLeft( options ) → Number GetLineCount() → Number: integer GetLineStart( line ) → Number: integer GetLineTop( line ) → Number GetMaxLines() → Number: integer GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “Text” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Log( msg, options ) Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetEllipsize( mode ) SetEnabled( enable ) SetFontFile( file ) SetHtml( str ) SetLog( maxLines ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetOnTouchDown( callback ) SetOnTouchMove( callback ) SetOnTouchUp( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetText( text ) SetTextColor( color ) SetTextShadow( radius, dx, dy, color ) SetTextSize( size, mode ) SetTouchable( touchable ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src ) function( event ) function( event ) function( event )
MUI/CreateTextH6.htm := CreateTextH6 Back CreateTextH6 Hello World Content: - Methods Creates a heading text 6. txh = MUI.CreateTextH6( text, width, height, options, color, fontWeight ) → Object Example - Sample cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") h6 = MUI.AddText(lay, "Some Heading", 0.8, 0.2, "h6,Medium,Multiline") h6 = MUI.AddTextH6(lay, "Some Heading", 0.8, 0.2, "Multiline", null, "Medium") h6 = MUI.CreateTextH6("Some Heading", 0.8, 0.2, "Multiline", null, "Medium") lay.AddChild(h6) app.AddLayout(lay) } Copy All Run Methods The following methods are available on the TextH6 object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) ClearFocus() data → Object Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetHtml() → Object GetLeft( options ) → Number GetLineCount() → Number: integer GetLineStart( line ) → Number: integer GetLineTop( line ) → Number GetMaxLines() → Number: integer GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “Text” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Log( msg, options ) Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetEllipsize( mode ) SetEnabled( enable ) SetFontFile( file ) SetHtml( str ) SetLog( maxLines ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetOnTouchDown( callback ) SetOnTouchMove( callback ) SetOnTouchUp( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetText( text ) SetTextColor( color ) SetTextShadow( radius, dx, dy, color ) SetTextSize( size, mode ) SetTouchable( touchable ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src ) function( event ) function( event ) function( event )
MUI/CreateTextJumbo.htm := CreateTextJumbo Back CreateTextJumbo Hello World Content: - Methods Creates an extra large text. txj = MUI.CreateTextJumbo( text, width, height, options, color ) → Object Example - Sample cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") jum = MUI.AddText(lay, "Some jumbo text", 0.8, 0.3, "Jumbo,Multiline") jum = MUI.AddTextJumbo(lay, "Some jumbo text", 0.8, 0.3, "Multiline", null, "Medium") jum = MUI.CreateTextJumbo("Some jumbo text", 0.8, 0.3, "Multiline", null, "Medium") lay.AddChild(jum) app.AddLayout(lay) } Copy All Run Methods The following methods are available on the TextJumbo object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) ClearFocus() data → Object Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetHtml() → Object GetLeft( options ) → Number GetLineCount() → Number: integer GetLineStart( line ) → Number: integer GetLineTop( line ) → Number GetMaxLines() → Number: integer GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “Text” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Log( msg, options ) Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetEllipsize( mode ) SetEnabled( enable ) SetFontFile( file ) SetHtml( str ) SetLog( maxLines ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetOnTouchDown( callback ) SetOnTouchMove( callback ) SetOnTouchUp( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetText( text ) SetTextColor( color ) SetTextShadow( radius, dx, dy, color ) SetTextSize( size, mode ) SetTouchable( touchable ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src ) function( event ) function( event ) function( event )
MUI/CreateTextParagraph.htm := CreateTextParagraph Back CreateTextParagraph Hello World Content: - Methods Creates a paragraph text. txp = MUI.CreateTextParagraph( text, width, height, options, color, fontWeight ) → Object Example - Paragraph-Sample cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal, "Light") lay = MUI.CreateLayout("Linear", "VCenter,FillXY") var text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis nunc nec orci finibus blandit. Nam nec consectetur odio. Sed a erat ultrices lectus volutpat malesuada. Aliquam id dictum metus." p1 = MUI.AddText(lay, text, 0.9, null, "Multiline,Paragraph,Light") p2 = MUI.AddTextParagraph(lay, text, 0.9, null, "Multiline", null, "Light") p3 = MUI.CreateTextParagraph(text, 0.9, null, "Multiline", null, "Light") lay.AddChild(p3) app.AddLayout(lay) } Copy All Run Methods The following methods are available on the TextParagraph object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) ClearFocus() data → Object Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetHtml() → Object GetLeft( options ) → Number GetLineCount() → Number: integer GetLineStart( line ) → Number: integer GetLineTop( line ) → Number GetMaxLines() → Number: integer GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “Text” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Log( msg, options ) Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetEllipsize( mode ) SetEnabled( enable ) SetFontFile( file ) SetHtml( str ) SetLog( maxLines ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetOnTouchDown( callback ) SetOnTouchMove( callback ) SetOnTouchUp( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetText( text ) SetTextColor( color ) SetTextShadow( radius, dx, dy, color ) SetTextSize( size, mode ) SetTouchable( touchable ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src ) function( event ) function( event ) function( event )
MUI/CreateTextSecondary.htm := CreateTextSecondary Back CreateTextSecondary Hello World Content: - Methods Creates a secondary text. txs = MUI.CreateTextSecondary( text, width, height, options, color, fontWeight ) → Object Example - All Headings cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal, "Light") lay = MUI.CreateLayout("Linear", "VCenter,FillXY") var text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit." sec1 = MUI.AddText(lay, text, 0.9, null, "Secondary,Multiline,Light") sec2 = MUI.AddTextSecondary(lay, text, 0.9, null, "Multiline", null, "Light") sec3 = MUI.CreateTextSecondary(text, 0.9, null, "Multiline", null, "Light") lay.AddChild(sec3) app.AddLayout(lay) } Copy All Run Methods The following methods are available on the TextSecondary object: AdjustColor( hue, saturation, brightness, contrast ) Animate( type, callback, time ) ClearFocus() data → Object Focus() GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetHtml() → Object GetLeft( options ) → Number GetLineCount() → Number: integer GetLineStart( line ) → Number: integer GetLineTop( line ) → Number GetMaxLines() → Number: integer GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetText() → String GetTextSize( mode ) → Number GetTop( options ) → Number GetType() → String: “Text” GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Gone() Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean Log( msg, options ) Method( name, types, p1, p2, p3, p4 ) → all types SetBackAlpha( alpha ) SetBackColor( color ) SetBackGradient( color1, color2, color3, options ) SetBackGradientRadial( x, y, radius, color1, color2, color3, options ) SetBackground( file, options ) SetColorFilter( color, mode ) SetEllipsize( mode ) SetEnabled( enable ) SetFontFile( file ) SetHtml( str ) SetLog( maxLines ) SetMargins( left, top, right, bottom, mode ) SetOnLongTouch( callback ) SetOnTouch( callback ) SetOnTouchDown( callback ) SetOnTouchMove( callback ) SetOnTouchUp( callback ) SetPadding( left, top, right, bottom, mode ) SetPosition( left, top, width, height, options ) SetScale( x, y ) SetSize( width, height, options ) SetText( text ) SetTextColor( color ) SetTextShadow( radius, dx, dy, color ) SetTextSize( size, mode ) SetTouchable( touchable ) SetVisibility( mode ) Show() Tween( target, duration, type, repeat, yoyo, callback ) function( type ) function( src ) function( event ) function( event ) function( event )
MUI/CreateTimePicker.htm := CreateTimePicker Back CreateTimePicker Hello World Content: - Methods Creates a material design time picker. tmp = MUI.CreateTimePicker( hour, minute, color ) → Object Example - Default Time cfg.Light cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") btn = MUI.CreateButtonRaised("SHOW PICKER") btn.SetOnTouch(ShowPicker) lay.AddChild(btn) app.AddLayout(lay) tmp = MUI.CreateTimePicker() tmp.SetOnSelect(OnSelect) } function ShowPicker() { tmp.Show() } function OnSelect(time, hh, mm, pos) { app.ShowPopup(hh+":"+mm+":"+pos) } Copy All Run Example - Custom Time cfg.Dark cfg.MUI function OnStart() { color = MUI.colors.teal app.InitializeUIKit(color.teal) lay = MUI.CreateLayout("Linear", "FillXY,VCenter") btn = MUI.CreateButtonRaised("SHOW PICKER") btn.SetOnTouch(ShowPicker) lay.AddChild(btn) app.AddLayout(lay) tmp = MUI.CreateTimePicker(13, 24, MUI.colors.deepOrange.deepOrange) tmp.SetOnSelect(OnSelect) } function ShowPicker() { tmp.Show() } function OnSelect(time, hh, mm, pos) { app.ShowPopup(hh+":"+mm+":"+pos) } Copy All Run Methods The following methods are available on the TimePicker object: GetAbsHeight() → Number: integer GetAbsWidth() → Number: integer GetHeight( options ) → Number GetLeft( options ) → Number GetParent() → app object GetPosition( options ) → Object: { left, top, right, bottom } GetTop( options ) → Number GetVisibility() → String: “Show” or “Hide” or “Gone” GetWidth( options ) → Number Hide() IsEnabled() → Boolean IsOverlap( obj, depth ) → Boolean IsVisible() → Boolean SetOnSelect( callback ) SetTextEdit( textEdit ) Show() function( hh:mm AM|PM, hour, minute, pos )
MUI/fonts.htm := fonts Back fonts Hello World MUI uses the free Roboto font family downloaded from Google Fonts as its main font for all of the controls. MUI.fonts → Object To use your own font family just put your .ttf font file into the Fonts/ directory of your app with the corresponding variation names. For the icons, MUI uses the Google's Material Icon Font.
MUI/ShowMenu.htm := ShowMenu Back ShowMenu Hello World Content: - Methods Show a menu on a given control. smu = MUI.ShowMenu( control, list, width ) → Object Example - Basic usage cfg.Light cfg.MUI function OnStart() { lay = MUI.CreateLayout("Linear", "VCenter,FillXY") btn = MUI.CreateFabOutline("more_vert") btn.SetOnTouch(btn_OnTouch) lay.AddChild(btn) app.AddLayout(lay) } function btn_OnTouch() { menu = MUI.ShowMenu(this, "Item 1, Item 2, Item 3") menu.SetOnSelect(function(item) { app.ShowPopup(item) }) } Copy All Run Methods The following methods are available on the ShowMenu object: SetOnSelect( callback ) function( title )
ui/addAccordion.htm := addAccordion Back addAccordion Hello World Content: - Properties - Methods Adds an accordion or expansion panel into your app. acc = ui.addAccordion( parent, titles, options, width, height ) → Object: Accordion Component This is very useful to display controls that are grouped together. Properties These are the setter and getter properties for the addAccordion Component. absHeight absLeft absTop absWidth backColor backImage border borderColor borderStyle cornerRadius disabled expandIcon fontFile height isVisible itemPadding left margins opacity options padding parent position rotation rounded secondaryText textColor textColor1 textColor2 textSize textSize1 textSize2 titleWidth titles toggle top type visibility width Example - Complete accordion implementation class Main extends App { onStart() { // Creates a fullscreen main layout. this.main = ui.addLayout( "main", "Linear", "VCenter", 1, 1 ) this.accords = [ "Accordion 1", "Accordion 2", "Accordion 3" ] // Adds an accordion to the main layout this.acc = ui.addAccordion( this.main, this.accords, "", 0.9 ) // Secondary text to display var secTxt = [ "This is the secondary text 1", "This is the secondary text 2", "This is the secondary text 3" ] // sets the secondary text this.acc.setSecondaryText( secTxt ) // Add ontouch event handler to the accordion this.acc.setOnTouch( this.onTouch ) // Add controls to the first accordion layout this.lay1 = this.acc.getLayout( 0 ) this.txt = ui.addText(this.lay1, "This is a text in the first layout.") // Add controls to the second layout this.lay2 = this.acc.getLayout( 1 ) this.btn = ui.addButton(this.lay2, "Button", "Primary") // Add controls to the third layout this.lay3 = this.acc.getLayout( 2 ) this.tfd = ui.addTextField(this.lay3, "", "Outlined", 0.3) this.tfd.label = "Enter some text" } onTouch(index, expand) { var msg = `${this.accords[index]} is ${expand ? "open" : "close"}` ui.showPopup( msg ) } } Copy All Run Example - Items manipulation class Main extends App { onStart() { this.count = 1; // Creates a fullscreen main layout. this.main = ui.addLayout( "main", "Linear", "VCenter", 1, 1 ) this.main.setChildMargins(0, 0.01, 0, 0.01) var accords = [ "Accordion 1", "Accordion 2", "Accordion 3" ] // Adds an accordion to the main layout this.acc = ui.addAccordion( this.main, accords, "", 0.9 ) this.lay = ui.addLayout(this.main, "Linear", "Horizontal", 0.9) this.lay.childSpacing = "evenly" // add a button controls to add or remove accordion item this.btn1 = ui.addButton( this.lay, "Append Item" ) this.btn1.setOnTouch( this.btn1_onTouch ) this.btn2 = ui.addButton( this.lay, "Add Item in index 1" ) this.btn2.setOnTouch( this.btn2_onTouch ) this.btn3 = ui.addButton( this.lay, "Remove Item" ) this.btn3.setOnTouch( this.btn3_onTouch ) } btn1_onTouch() { // add an item at the bottom of the accordion this.acc.addItem( "New Bottom Title", "New secondary text" ) } btn2_onTouch() { var title = "New Title " + this.count++ // insert item in the second index this.acc.addItem( title, "New secondary text", 1 ) } btn3_onTouch() { this.acc.removeItemByIndex( 2 ) ui.showPopup( "Second item is removed" ) } } Copy All Run Example - Custom styles class Main extends App { onStart() { // Creates a fullscreen main layout. this.main = ui.addLayout("main", "Linear", "VCenter") var items = ["Accordion 1", "Accordion 2", "Accordion 3"] var texts = ["Description for item 1", "Description for item 2", "Description for item 3"]; // Adds an accordion to the main layout this.acc = ui.addAccordion(this.main, items, "", 0.9) this.acc.setSecondaryText( texts ) // Sets the background color this.acc.backColor = "#b2dfdb" // Sets the text-sizes this.acc.textSize1 = 18 this.acc.textSize2 = 14 // Sets the text colors this.acc.textColor1 = "#00695c" this.acc.textColor2 = "#009688" // Sets the corner radius this.acc.cornerRadius = 14 // Sets the expand icon this.acc.expandIcon = "favorite" } } Copy All Run Methods The following methods are available on the Accordion object: addItem( title, secondaryText, index ) animate( anim, duration ) bringForward( zIndex ) destroy() getEnabled( index ) → Boolean getEnabledByName( name ) → Boolean getLayout( index ) → Object: Layout Component getLayoutIndex( layout ) → Number getPosition( options ) → Object gone() hide() popItem() removeItemByIndex( index ) removeItemByName( title ) sendBackward( zIndex ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setEnabled( index, value ) setEnabledByName( name, value ) setExpandIcon( icon ) setMargins( left, top, right, bottom, mode ) setOnContextMenu( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSecondaryText( text, index ) setSize( width, height ) setTextColor( color1, color2 ) setTitleText( index, title ) shiftItem() show() function( title , index , event ) function( index , expand )
ui/addAppBar.htm := addAppBar Back addAppBar Hello World Content: - Properties - Methods Adds an AppBar on your app. apb = ui.addAppBar( parent, title, options, width, height ) → Object: AppBar Component Properties These are the setter and getter properties for the addAppBar Component. absHeight absLeft absTop absWidth backColor backImage border borderColor borderStyle color cornerRadius disabled fontFile height icon isVisible layout left margins menu opacity options padding parent position rotation text textColor textSize textVariant top type visibility width Example - Basic AppBar class Main extends App { onStart() { // Creates a fullscreen linear layout with objects align Top and Center this.main = ui.addLayout("main", "Linear", "Top,Center", 1, 1) // Adds an appbar to the layout this.apb = ui.addAppBar(this.main, "My App", "", 1) // Adds a button control with margins 1/10 of the parent width. this.btn = ui.addButton(this.main, "Button") this.btn.margins = 0.1 } } Copy All Run Example - Fixed appbar with drawer class Main extends App { onStart() { // Creates a fullscreen linear layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter", 1, 1) // Add an appbar to the layout this.apb = ui.addAppBar(this.main, "My app", "Menu,Fixed", 1) // Add a callback handler to show the drawer onMenu event this.apb.setOnMenu( this.showDrawer ) // Add a drawer layout this.drawLay = ui.addLayout(null, "Linear", "Top") // Add a drawer to the app and pass the drawer layout this.drawer = ui.addDrawer(this.drawLay, "left") // Add a list to the drawer layout. See `List` component for customization. let lst = [ ["folder", "Folders"], ["music_note", "Audios"], ["photo", "Photos"] ] this.lstMenu = ui.addList(this.drawLay, lst, "Icon", 1 ) this.lstMenu.label = "Main navigation" // Add a callback handler to the list onTouch event this.lstMenu.setOnTouch( this.onTouch ) } showDrawer() { this.drawer.show() } onTouch( title ) { // Set the appbar text with the selected list item this.apb.text = title // Close the drawer this.drawer.hide() } } Copy All Run Example - Appbar with actions class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "Top,Center", 1, 1) this.apb = ui.addAppBar(this.main, "My App", "Menu,Primary") this.apb.setOnMenu( this.showDrawer ) // Add an icon buttons to the appbar with onTouch callbacks this.btn1 = ui.addButton(this.apb.layout, "mail", "icon") this.btn1.setOnTouch(() => { ui.showPopup("Messages", "Bottom") }) this.btn2 = ui.addButton(this.apb.layout, "person", "icon") this.btn2.setOnTouch(() => { ui.showPopup("Account", "Bottom") }) this.btn3 = ui.addButton(this.apb.layout, "more_vert", "icon") this.btn3.setOnTouch(() => { ui.showPopup("More options", "Bottom") }) // Adds a drawer layout this.drawLay = ui.addLayout(null, "Linear", "Top") // Adds a drawer to the app and pass the drawer layout this.drawer = ui.addDrawer(this.drawLay, "left") // Adds a list to the drawer layout. See `List` component for customization. let lst = [ ["folder", "Folders"], ["music_note", "Audios"], ["photo", "Photos"] ] this.lstMenu = ui.addList(this.drawLay, lst, "Icon", 1 ) this.lstMenu.label = "Main navigation" // Add a callback handler to the list onTouch event this.lstMenu.setOnTouch( this.onTouch ) } showDrawer() { this.drawer.show() } onTouch( title ) { // Set the appbar text with the selected list item this.apb.text = title // Close the drawer this.drawer.hide() } } Copy All Run Example - Appbar with search field class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout( "main", "Linear", "Top", 1, 1 ) // Add an appbar to the main layout this.apb = ui.addAppBar( this.main, "My app", "Default" ) // Adds a textfield to the appbar this.tfd = ui.addTextField(this.apb.layout, "", "Search,Outlined,Small") this.tfd.placeholder = "Search" this.tfd.hide() // Add a search icon button to the appbar this.searchBtn = ui.addButton(this.apb.layout, "search", "icon") // Add a callback handler when the button is click this.searchBtn.setOnTouch( this.showSearchField ) } showSearchField() { if(this.searchBtn.text == "search") { this.tfd.show() this.searchBtn.text = "close" } else { this.tfd.hide() this.searchBtn.text = "search" } } } Copy All Run Methods The following methods are available on the AppBar object: addLayout( lay ) animate( anim, duration ) bringForward( zIndex ) destroy() getPosition( options ) → Object gone() hide() sendBackward( zIndex ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setMargins( left, top, right, bottom, mode ) setOnContextMenu( callback ) setOnMenu( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSize( width, height ) show() function( event ) function( event )
ui/addBottomNavbar.htm := addBottomNavbar Back addBottomNavbar Hello World Content: - Methods Adds a bottom navigation bar to your app. bmn = ui.addBottomNavbar( parent, navs, options, width, height ) → Object: BottomNavbar Component An example of a navs array. var navs = [ [ "Favorites", "favorites" ], [ "Groups", "person" ], [ "Folder", "folder" ] ] ### Properties These are the setter and getter properties for the addBottomNavbar Component. absHeight absLeft absTop absWidth backColor backImage border borderColor borderStyle cornerRadius disabled fontFile height iconColor iconSize isVisible labels left list margins opacity options padding parent position rotation textColor textSize top type value visibility width Example - Sample navs array. var navs = [ [ "Favorites", "favorites" ], [ "Groups", "person" ], [ "Folder", "folder" ] ] Copy All Run Example - Basic class Main extends App { onStart() { // Creates a layout with objects verticaly centered. this.main = ui.addLayout( "main", "Linear", "VCenter", 1, 1 ) this.main.setChildMargins( 0.01, 0.01, 0.01, 0.01 ) var navs = [ [ "Favorites", "favorites" ], [ "Groups", "person" ], [ "Folder", "folder" ] ] // Creates a BottomNavbar control this.bmn = ui.addBottomNavbar(this.main, navs, "", 1) // Add a callback handler for `onChange` event this.bmn.setOnChange( this.onChange ) } onChange(text, index) { ui.showPopup( text ) } } Copy All Run Example - Hide or show labels class Main extends App { onStart() { // Creates a layout with objects verticaly centered. this.main = ui.addLayout( "main", "Linear", "VCenter", 1, 1 ) this.main.setChildMargins( 0.01, 0.01, 0.01, 0.01 ) var navs = [ [ "Favorites", "favorites" ], [ "Groups", "person" ], [ "Folder", "folder" ] ] // Creates a BottomNavbar control this.bmn = ui.addBottomNavbar(this.main, navs, "", 1) // Add a callback handler for `onChange` event this.bmn.setOnChange( this.onChange ) // Button to show the labels this.btn = ui.addButton(this.main, "Show Labels") this.btn.setOnTouch( this.showLabels ) // Button to hide the labels this.btn1 = ui.addButton(this.main, "Hide Labels") this.btn1.setOnTouch( this.hideLabels ) } showLabels( ) { this.bmn.showLabels() } hideLabels() { this.bmn.hideLabels() } onChange(text, index) { ui.showPopup( text ) } } Copy All Run Example - Custom styles class Main extends App { onStart() { // Creates a layout with objects verticaly centered. this.main = ui.addLayout("main", "Linear", "VCenter", 1, 1) var navs = [ [ "Favorites", "favorites" ], [ "Groups", "person" ], [ "Folder", "folder" ] ] // Creates a BottomNavbar control this.bmn = ui.addBottomNavbar(this.main, navs, "", 1) // Hide the labels when not active this.bmn.labels = false // Set the color of the text and icons this.bmn.textColor = "#673ab7" this.bmn.iconColor = "#673ab7" // Set the icon size this.bmn.iconSize = "2rem" } } Copy All Run Methods The following methods are available on the BottomNavbar object: addItem( name, icon, index ) animate( anim, duration ) bringForward( zIndex ) clearSelection() destroy() getEnabled( index ) → Boolean getEnabledByName( name ) → Boolean getList() → List getPosition( options ) → Object gone() hide() hideLabels() popItem() removeItemByIndex( index ) removeItemByName( name ) selectItem( name ) selectItemByIndex( index ) sendBackward( zIndex ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setEnabled( index, value ) setEnabledByName( name, value ) setIcon( index, newIcon ) setItemByIndex( index, newName, newIcon ) setList( navs ) setMargins( left, top, right, bottom, mode ) setOnChange( callback ) setOnContextMenu( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSize( width, height ) shiftItem() show() showLabels() function( text , index ) function( text , index , event ) function( event )
ui/addButton.htm := addButton Back addButton Hello World Content: - Properties - Methods Adds a button control into your app. btn = ui.addButton( parent, text, options, width, height ) → Object: Button Component In case of Upload, you can specify Multiple to accept multiple files. Properties These are the setter and getter properties for the addButton Component. absHeight absLeft absTop absWidth acceptedFiles backColor backImage badge badgeColor border borderColor borderStyle color cornerRadius disabled fontFile height icon isVisible left margins opacity options padding parent position rotation sizeVariant text textColor textSize toolTip toolTipPosition top type variant visibility width Example - Button variants class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout( "main", "Linear", "VCenter", 1, 1 ) this.main.setChildMargins( 0.01, 0.01, 0.01, 0.01 ) // Contained this.btn1 = ui.addButton( this.main, "Button", "Contained" ) // Add a callback handler for onTouch event this.btn1.setOnTouch( this.onTouch ) // Outlined this.btn2 = ui.addButton( this.main, "Button", "Outlined" ) this.btn2.setOnTouch( this.onTouch ) // Text this.btn3 = ui.addButton( this.main, "Button", "Text" ) this.btn3.setOnTouch( this.onTouch ) } onTouch() { ui.showPopup( "Button is touch!" ) } } Copy All Run Example - Button theme colors class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter", 1, 1) this.main.setChildMargins(0.01, 0.01, 0.01, 0.01) // Add primary button to the main layout this.btn1 = ui.addButton(this.main, "Primary", "Contained,Primary") // Add a callback handler for onTouch event this.btn1.setOnTouch( this.onTouch ) // Add secondary button to the main layout this.btn2 = ui.addButton(this.main, "Secondary", "Outlined,Secondary") this.btn2.setOnTouch( this.onTouch ) // Add default button to the main layout this.btn3 = ui.addButton(this.main, "Default", "Text,Default") this.btn3.setOnTouch( this.onTouch ) } onTouch() { ui.showPopup( "Button is touch!" ) } } Copy All Run Example - Button sizes class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter", 1, 1) this.main.setChildMargins(0.01, 0.01, 0.01, 0.01) // Add a small size button to the main layout this.btn1 = ui.addButton(this.main, "Small", "Contained,Primary,Small") // Add a callback handler for onTouch event this.btn1.setOnTouch( this.onTouch ) // Add a medium/default size button to the main layout this.btn2 = ui.addButton(this.main, "Medium", "Contained,Primary,Medium") // Add a large size button to the main layout this.btn3 = ui.addButton(this.main, "Large", "Contained,Primary,Large") } onTouch() { ui.showPopup( "Button is touch!" ) } } Copy All Run Example - Button tooltips class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter", 1, 1) this.main.setChildMargins(0, 0.05, 0, 0.05) // Add a button to the main layout // and add a tooltip to the left of the button this.btn1 = ui.addButton(this.main, "Left", "Contained,Primary") this.btn1.setToolTip("Tooltip on the left", "left") // Add a button to the main layout // and add a tooltip to the top of the button this.btn2 = ui.addButton(this.main, "Top", "Contained,Primary") this.btn2.setToolTip("Tooltip on the top", "top") // // Add a button to the main layout // and add a tooltip to the right of the button this.btn3 = ui.addButton(this.main, "Right", "Contained,Primary") this.btn3.setToolTip("Tooltip on the right", "right") // // Add a button to the main layout // and add a tooltip to the bottom of the button this.btn4 = ui.addButton(this.main, "Bottom", "Contained,Primary") this.btn4.setToolTip("Tooltip on the bottom", "bottom") } } Copy All Run Example - Button with icons class Main extends App { onStart() { // Creates a layout with objects verticaly centered. this.main = ui.addLayout( "main", "Linear", "VCenter", 1, 1 ) this.main.setChildMargins("12px", "12px", "12px", "12px") // Add a primary contained button and // set its leading icon to `send` this.btn1 = ui.addButton(this.main, "Send", "Primary") this.btn1.icon = "send" // Add a secondary contained button and // set its leading icon to `shopping_cart` this.btn2 = ui.addButton(this.main, "Add to cart", "Secondary") this.btn2.icon = "shopping_cart" // Add an `android` primary icon button to the main layout this.btn3 = ui.addButton(this.main, "android", "Primary,Icon") // Add a `settings` secondary icon button to the main layout this.btn4 = ui.addButton(this.main, "settings", "Secondary,Icon") } } Copy All Run Example - Buttons with badges class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter", 1, 1) this.main.setChildMargins(0.01, 0.01, 0.01, 0.01) // Add an android icon button to the main layout this.btn1 = ui.addButton(this.main, "android", "Primary,Icon") // Add a setting icon button to the main layout and // set the badge to `5` this.btn2 = ui.addButton(this.main, "settings", "Primary,Icon") this.btn2.setBadge( 5 ) // Add a contained button to the main layout and // set the badge to `New` with a `Primary` background color this.btn3 = ui.addButton(this.main, "With Badge", "Secondary,Outlined") this.btn3.setBadge("New", "Primary") } } Copy All Run Example - Upload button class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter", 1, 1) // Add a primary upload button with upload icon this.btn = ui.addButton(this.main, "Upload File", "Primary,Upload") this.btn.icon = "backup" // Add a callback handler for `onFileSelect` event this.btn.setOnFileSelect( this.onFileSelect ) } onFileSelect( files ) { // Get the first file and display its file name const file = files[ 0 ] ui.showPopup( `${file.name} is selected.` ) } } Copy All Run Methods The following methods are available on the Button object: animate( anim, duration ) bringForward( zIndex ) destroy() getPosition( options ) → Object gone() hide() sendBackward( zIndex ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setMargins( left, top, right, bottom, mode ) setOnContextMenu( callback ) setOnFileSelect( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSize( width, height ) setTextShadow( radius, dx, dy, color ) setToolTip( title, pos ) show() function( event ) function( files ) function( event )
ui/addButtonGroup.htm := addButtonGroup Back addButtonGroup Hello World Content: - Properties - Methods Adds a button group into your app. btg = ui.addButtonGroup( parent, list, options, width, height ) → Object: ButtonGroup Component Properties These are the setter and getter properties for the addButtonGroup Component. absHeight absLeft absTop absWidth backColor backImage border borderColor borderStyle color cornerRadius disabled fontFile height isVisible left list margins opacity options orientation padding parent position rotation sizeVariant textColor textSize toolTipPosition toolTips top type variant visibility width Example - Basic ButtonGroup class Main extends App { onStart() { // Creates a fullscreen layout with object vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter", 1, 1) // Initialize button items var buttons = ["Button 1", "Button 2", "Button 3"] // Add a ButtonGroup control to the main layout this.btg = ui.addButtonGroup(this.main, buttons, "", 0.9) // Add a callback handler for `onTouch` event this.btg.setOnTouch( this.onTouch ) } onTouch(text, index) { // Display the touched button text ui.showPopup( text ) } } Copy All Run Example - ButtonGroup variants class Main extends App { onStart() { // Creates a fullscreen layout with object vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter", 1, 1) this.main.setChildMargins(0, 0.05, 0, 0.05) var buttons = ["Button 1", "Button 2", "Button 3"] // Add a contained ButtonGroup to the main layout this.btg1 = ui.addButtonGroup(this.main, buttons, "Contained,Primary", 0.9) this.btg1.setOnTouch( this.onTouch ) // Add an outlined ButtonGroup to the main layout this.btg2 = ui.addButtonGroup(this.main, buttons, "Outlined,Primary", 0.9) this.btg2.setOnTouch( this.onTouch ) // Add a text ButtonGroup to the main layout this.btg3 = ui.addButtonGroup(this.main, buttons, "Text,Primary", 0.9) this.btg3.setOnTouch( this.onTouch ) } onTouch(text, index) { // Display the touched button text ui.showPopup( text ) } } Copy All Run Example - ButtonGroup colors class Main extends App { onStart() { // Creates a fullscreen layout with object vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter", 1, 1) this.main.setChildMargins(0, 0.05, 0, 0.05) // Initialize button items var buttons = ["Button 1", "Button 2", "Button 3"] // Add defualt ButtonGroup to the main layout this.btg1 = ui.addButtonGroup(this.main, buttons, "Default", 0.9) this.btg1.setOnTouch( this.onTouch ) // Add primary ButtonGroup to the main layout this.btg2 = ui.addButtonGroup(this.main, buttons, "Primary", 0.9) this.btg2.setOnTouch( this.onTouch ) // Add secondary ButtonGroup to the main layout this.btg3 = ui.addButtonGroup(this.main, buttons, "Secondary", 0.9) this.btg3.setOnTouch( this.onTouch ) } onTouch(text, index) { // Display the touched button text ui.showPopup( text ) } } Copy All Run Example - ButtonGroup sizes class Main extends App { onStart() { // Creates a fullscreen layout with object vertically centered this.main = ui.addLayout("main", "Linear", "VCenter", 1, 1) this.main.setChildMargins(0, 0.05, 0, 0.05) // Initialize button items var buttons = ["Button 1", "Button 2", "Button 3"] // Add small size ButtonGroup to the main layout this.btg1 = ui.addButtonGroup(this.main, buttons, "Contained,Primary,Small", 0.9) this.btg1.setOnTouch( this.onTouch ) // Add medium/default size ButtonGroup to the main layout this.btg2 = ui.addButtonGroup(this.main, buttons, "Contained,Primary,Medium", 0.9) this.btg2.setOnTouch( this.onTouch ) // Add large size ButtonGroup to the main layout this.btg3 = ui.addButtonGroup(this.main, buttons, "Contained,Primary,Large", 0.9) this.btg3.setOnTouch( this.onTouch ) } onTouch(text, index) { // Display the touched button text ui.showPopup( text ) } } Copy All Run Example - ButtonGroup icons class Main extends App { onStart() { // Creates a fullscreen layout with object vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter", 1, 1) this.main.setChildMargins(0, 0.05, 0, 0.05) // Initialize button items var buttons = ["delete", "shopping_cart", "dashboard"] // Add small and primary contained ButtonGroup icons to the main layout this.btg1 = ui.addButtonGroup(this.main, buttons, "Contained,Primary,Small,Icon") this.btg1.setOnTouch( this.onTouch ) // Add a medium and secondary outlined ButtonGroup icons to the main layout this.btg2 = ui.addButtonGroup(this.main, buttons, "Outlined,Secondary,Medium,Icon") this.btg2.setOnTouch( this.onTouch ) // Add a large and default text ButtonGroup icons to the main layout this.btg3 = ui.addButtonGroup(this.main, buttons, "Text,Large,Icon") this.btg3.setOnTouch( this.onTouch ) } onTouch(text, index) { // Display the touched button text ui.showPopup( text ) } } Copy All Run Methods The following methods are available on the ButtonGroup object: addItem( item ) animate( anim, duration ) bringForward( zIndex ) destroy() enableElevation( enable ) getEnabled( index ) → Boolean getEnabledByName( name ) → Boolean getPosition( options ) → Object gone() hide() popItem() removeItemByName( name ) removeItemIndex( index ) sendBackward( zIndex ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setEnabled( index, value ) setEnabledByName( name, value ) setItemByIndex( item, index ) setList( items ) setMargins( left, top, right, bottom, mode ) setOnContextMenu( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSize( width, height ) setToolTip( titles, pos ) shiftItem() show() function( text , index , event ) function( text , index , event )
ui/addCheckbox.htm := addCheckbox Back addCheckbox Hello World Content: - Properties - Methods Adds a checkbox control to the given layout. ckb = ui.addCheckbox( parent, text, options, width, height ) → Object: Checkbox Component Properties These are the setter and getter properties for the addCheckbox Component. absHeight absLeft absTop absWidth backColor backImage border borderColor borderStyle checkIcon color cornerRadius disable disabled enabled fontFile height iconColor iconSize isVisible left margins opacity options padding parent position rotation spaceBetween text textColor textPosition textSize top type uncheckIcon value visibility width Example - Basic class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter", 1, 1) // Add a checkbox control to the main layout this.ckb = ui.addCheckbox(this.main, "This is checkbox label") // Add a callback handler for `onTouch` event this.ckb.setOnTouch( this.onTouch ) } onTouch( value ) { ui.showPopup( `Value is ${ value }` ) } } Copy All Run Example - Colors class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter", 1, 1) this.main.setChildMargins(0, 0.05, 0, 0.05) // Add a default checkbox control to the main layout this.ckb1 = ui.addCheckbox(this.main, "This is checkbox label") this.ckb1.setOnTouch( this.onTouch ) // Add a primary checkbox control to the main layout this.ckb2 = ui.addCheckbox(this.main, "This is checkbox label", "Primary") this.ckb2.setOnTouch( this.onTouch ) // Add a secondary checkbox control to the main layout // and set its value to `true` this.ckb3 = ui.addCheckbox(this.main, "This is checkbox label", "Secondary") this.ckb3.value = true this.ckb3.setOnTouch( this.onTouch ) } onTouch( value ) { ui.showPopup( `Value is ${ value }` ) } } Copy All Run Example - Text positions class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter", 1, 1) this.main.setChildMargins(0, 0.05, 0, 0.05) // Add a checkbox with label on the right. this.ckb1 = ui.addCheckbox(this.main, "Checkbox on the left", "Left") this.ckb1.setOnTouch( this.onTouch ) // Add a checkbox with label on the bottom. this.ckb2 = ui.addCheckbox(this.main, "Checkbox on the top", "Primary,Top") this.ckb2.setOnTouch( this.onTouch ) // Add a checkbox with label on the left. this.ckb3 = ui.addCheckbox(this.main, "Checkbox on the right", "Secondary,Right") this.ckb3.setOnTouch( this.onTouch ) // Add a checkbox with label on top. this.ckb4 = ui.addCheckbox(this.main, "Checkbox on the bottom", "Secondary,Bottom") this.ckb4.setOnTouch( this.onTouch ) } onTouch( value ) { ui.showPopup( `Value is ${ value }` ) } } Copy All Run Example - Adding custom checkbox icon class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter", 1, 1) // Adds checkbox control to the main layout this.ckb = ui.addCheckbox(this.main, "This is checkbox label", "Left,Secondary") // Set the checked icon to `favorite` // and uncheck icon to `person` this.ckb.setIcon("favorite", "person") // Add a callback handler for `onTouch` event this.ckb.setOnTouch( this.onTouch ) } onTouch( value ) { ui.showPopup( `Value is ${ value }` ) } } Copy All Run Methods The following methods are available on the Checkbox object: animate( anim, duration ) bringForward( zIndex ) destroy() getIcon() → Object getPosition( options ) → Object gone() hide() sendBackward( zIndex ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setIcon( checked, unchecked ) setMargins( left, top, right, bottom, mode ) setOnContextMenu( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSize( width, height ) show() function( event ) function( check )
ui/addCheckboxGroup.htm := addCheckboxGroup Back addCheckboxGroup Hello World Content: - Properties - Methods Adds a CheckboxGroup to a given layout. ckb = ui.addCheckboxGroup( parent, list, options, width, height ) → Object: CheckboxGroup Component Properties These are the setter and getter properties for the addCheckboxGroup Component. absHeight absLeft absTop absWidth backColor backImage border borderColor borderStyle checkIcon color cornerRadius disabled elevation fontFile height iconColor iconSize isVisible itemPadding label left list margins opacity options outlined padding parent position rotation sizeVariant spaceBetween textColor textSize top type uncheckIcon visibility width Example - Basic class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Initialize checkbox items this.items = [ "Checkbox item 1", "Checkbox item 2", "Checkbox item 3" ] // Add a checkbox group to the main layout. this.ckg = ui.addCheckboxGroup(this.main, this.items) // Add a callback handler for `onTouch` event this.ckg.setOnTouch( this.onTouch ) } onTouch(value, item, index) { ui.showPopup( `Value of ${ item } is ${ value }` ) } } Copy All Run Example - Colors class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") this.main.childSpacing = "evenly" // Initialize the checkbox items var list = [ "Checkbox item 1", "Checkbox item 2", "Checkbox item 3" ] // Add a default CheckboxGroup to the main layout this.ckg1 = ui.addCheckboxGroup(this.main, list) this.ckg1.setOnTouch( this.onTouch ) // Add a primary CheckboxGroup to the main layout this.ckg2 = ui.addCheckboxGroup(this.main, list, "Primary") this.ckg2.setOnTouch( this.onTouch ) // Add a secondary CheckboxGroup to the main layout this.ckg3 = ui.addCheckboxGroup(this.main, list, "Secondary") this.ckg3.setOnTouch( this.onTouch ) } onTouch(value, item, index) { ui.showPopup( `Value of ${ item } is ${ value }` ) } } Copy All Run Example - Elevated class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Initialize the checkbox list items var list = [ "Checkbox item 1", "Checkbox item 2", "Checkbox item 3" ] // Add an elevated checkbox group to the main layout. this.ckg = ui.addCheckboxGroup( this.main, list, "Elevated,Secondary", 0.6) // Set the label of the CheckboxGroup this.ckg.label = "Select as many as you can" // Set the elevation of the CheckboxGroup container this.ckg.elevation = 4 // Add a callback handler for `onTouch` event this.ckg.setOnTouch( this.onTouch ) } onTouch(value, item, index) { ui.showPopup( `Value of ${ item } is ${ value }` ) } } Copy All Run Example - Outlined class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Initialize the checkbox items var list = [ "Checkbox item 1", "Checkbox item 2", "Checkbox item 3" ] // Add an outlined checkbox group to the main layout. this.ckg = ui.addCheckboxGroup( this.main, list, "Outlined,Secondary", 0.9 ) this.ckg.setOnTouch( this.onTouch ) // Set the label of the CheckboxGroup items this.ckg.label = "Select as many as you can" // Set the cornerRadius to `20` this.ckg.cornerRadius = 20 } onTouch(value, item, index) { ui.showPopup( `Value of ${ item } is ${ value }` ) } } Copy All Run Methods The following methods are available on the CheckboxGroup object: addItem( text, index ) animate( anim, duration ) bringForward( zIndex ) destroy() getCheckedByIndex( index ) → Boolean getCheckedByName( name ) → Boolean getCheckedItems() → String getEnabled( index ) → Boolean getEnabledByName( name ) → Boolean getIcon() → Object getPosition( options ) → Object getText( index ) → String gone() hide() popItem() removeItemByIndex( index ) removeItemByName( title ) sendBackward( zIndex ) setBorder( width, clr, style ) setCheckedByIndex( item, bool ) setCheckedByName( name, bool ) setCornerRadius( tl, tr, bl, br, mode ) setEnabled( index, value ) setEnabledByName( name, value ) setIcon( checked, unchecked ) setList( list ) setMargins( left, top, right, bottom, mode ) setOnChange( callback ) setOnContextMenu( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSize( width, height ) setTextByIndex( index, val ) setTextByName( name, val ) shiftItem() show() function( values ) function( label , index , event ) function( value , text , index , event )
ui/addChip.htm := addChip Back addChip Hello World Content: - Properties - Methods Adds a chip into your app. chp = ui.addChip( parent, text, options, width, height ) → Object: Chip Component If you want to change the height of the Chip later on after initializing, pass the height argument. Properties These are the setter and getter properties for the addChip Component. absHeight absLeft absTop absWidth avatar backColor backImage border borderColor borderStyle color cornerRadius deleteIcon disabled enabled fontFile height icon iconColor iconSize isVisible left margins opacity options padding parent position rotation sizeVariant text textColor textSize top type variant visibility width Example - Chips class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") this.main.setChildMargins(0, 0.025, 0, 0.025) // Add a default chip to the main layout this.chip1 = ui.addChip(this.main, "Basic Chip") // Add a callback handler for `onTouch` event. this.chip1.setOnTouch( this.onTouch ) // Add a small primary chip this.chip2 = ui.addChip(this.main, "Small Primary Chip", "Primary,Small") this.chip2.setOnTouch( this.onTouch ) // Add a touchable secondary chip this.chip3 = ui.addChip(this.main, "Secondary Chip", "Secondary,Touchable") this.chip2.setOnTouch( this.onTouch ) } onTouch() { ui.showPopup( "You touched the chip!" ) } } Copy All Run Example - Deletable chip class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Add a touchable and deletable chip this.chip = ui.addChip(this.main, 'Deletable', 'Secondary,Touchable') // Add callback hanlder for `onDelete` event. // This will also add a delete icon to the chip. this.chip.setOnDelete( this.onDelete ) } onDelete() { ui.showPopup( "Chip is deleted!" ) } } Copy All Run Example - Custom styles class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Add a chip control to the main layout this.chip = ui.addChip(this.main, "Shopping Cart") // Add a leading icon to the chip control this.chip.icon = "shopping_cart" // Sets the icon color of the chip control this.chip.iconColor = "#673ab7" // Sets the text size of the chip control this.chip.textSize = 14 } } Copy All Run Example - Avatar class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Add a chip control to the main layout this.chip = ui.addChip(this.main, "Character Avatar") // Set the avatar property of the main layout this.chip.avatar = "https://upload.wikimedia.org/wikipedia/commons/thumb/9/90/Hapus_Mango.jpg/220px-Hapus_Mango.jpg" } } Copy All Run Methods The following methods are available on the Chip object: animate( anim, duration ) bringForward( zIndex ) destroy() getPosition( options ) → Object gone() hide() sendBackward( zIndex ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setMargins( left, top, right, bottom, mode ) setOnContextMenu( callback ) setOnDelete( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSize( width, height ) setTouchable( touchable ) show() function( event ) function( event )
ui/addDatePicker.htm := addDatePicker Back addDatePicker Hello World Content: - Properties - Methods Adds a date picker component to the app. dtp = ui.addDatePicker( date, options ) → Object: DatePicker Component Properties These are the setter and getter properties for the addDatePicker Component. format Example - Default class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout( "main", "Linear", "Top,VCenter", 1, 1 ) this.main.setMargins( 0.01, 0.01, 0.01, 0.01 ) // Add a button to the main layout this.btn = ui.addButton( this.main, "Show Date Picker", "Secondary" ) this.btn.setOnTouch( this.showDatePicker ) // Initialize date picker this.dtp = ui.addDatePicker() } showDatePicker() { // Display the date picker dialog this.dtp.show() } } Copy All Run Example - With initial value & portrait class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout( "main", "Linear", "Top,VCenter", 1, 1 ) this.main.setMargins( 0.01, 0.01, 0.01, 0.01 ) // Add a button to the main layout this.btn = ui.addButton( this.main, "Show Date Picker", "Secondary" ) this.btn.setOnTouch( this.showDatePicker ) // With initial value. Date must be of the form "YYYY-MM-DD" this.dtp = ui.addDatePicker( "2022-12-25", "Portrait" ) } showDatePicker() { // Display the date picker dialog this.dtp.show() } } Copy All Run Example - With limits & callback class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout( "main", "Linear", "Top,VCenter", 1, 1 ) this.main.setMargins( 0.01, 0.01, 0.01, 0.01 ) // Add a button to the main layout this.btn = ui.addButton( this.main, "Show Date Picker", "Secondary" ) this.btn.setOnTouch( this.showDatePicker ) // With initial value. Date must be of the form "YYYY-MM-DD" this.dtp = ui.addDatePicker( "2022-12-25", "Portrait" ) this.dtp.setOnSelect( this.onSelect ) } showDatePicker() { // Display the date picker dialog this.dtp.show() } onSelect( value ) { console.log( value ) } } Copy All Run Methods The following methods are available on the DatePicker object: hide() isVisible() → Boolean setFormat( format ) setLimits( past, future ) setOnSelect( callback ) show() function( date )
ui/addDialog.htm := addDialog Back addDialog Hello World Content: - Properties - Methods Adds a dialog into your app. dlg = ui.addDialog( title, body, actions, options ) → Object: Dialog Component Properties These are the setter and getter properties for the addDialog Component. layout text titleColor titleText Example - Basic class Main extends App { onStart() { // Create a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Add button to the main layout to show the dialog when clicked. this.btn = ui.addButton(this.main, "Show Dialog", "Contained,Primary") this.btn.setOnTouch( this.showDialog ) // Message to be displayed in the Dialog component var bodyText = "Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running." // Initialize the Dialog component with `Agree` and `Disagree` action buttons this.dlg = ui.addDialog("Use Google's location service?", bodyText, "Disagree,Agree") } showDialog() { // Show the Dialog component when the button is click. this.dlg.show() } } Copy All Run Example - NoCancel class Main extends App { onStart() { // Create a fullscreen layout with objects vertically centered this.main = ui.addLayout( "main", "Linear", "VCenter,FillXY") // Add a button to the main layout. this.btn = ui.addButton( this.main, "Show Dialog", "Contained,Primary" ) // Add a callback handler for `onTouch` event on the button. this.btn.setOnTouch( this.showDialog ) // Message to display var bodyText = "Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running." // Initialize the Dialog component and pass a `NoCancel` option. this.dlg = ui.addDialog( "Use Google's location service?", bodyText, "Close,Agree", "NoCancel" ) // Add a callback handler for `onAction` event on the Dialog component this.dlg.setOnAction( this.onAction ); } showDialog() { // Show the Dialog component when button is click this.dlg.show(); } onAction( action ) { if(action == "Close") { ui.showPopup("There you go."); this.dlg.hide(); } else { ui.showPopup("Oops! You can't close me here."); } } } Copy All Run Example - Adding controls to the dialog class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") this.main.setChildMargins(0.01, 0.01, 0.01, 0.01) // Adds a text control to the main layout. this.txt = ui.addText(this.main, "Email: ", "", 0.7) // Adds a button to show the dialog. this.btn = ui.addButton(this.main, "Show Dialog", "Contained,Primary") // Add a callback handler for `ontouch` event on the button control // to show the Dialog component this.btn.setOnTouch( this.showDialog ) var bodyText = "To subscribe to this website, please enter your email address here. We will send updates occasionally." // Initialize the dialog. this.dlg = ui.addDialog("Subscribe", bodyText, "Cancel,Subscribe") // Add a callback handler for `onaction` event on the Dialog componenti this.dlg.setOnAction( this.onAction ) // Adding textfield to the main layout this.tfd = ui.addTextField(this.dlg.layout, "", "Filled") this.tfd.label = "Email Address" } showDialog() { this.dlg.show() } onAction( action ) { // Check the button that is click. if( action == "Subscribe" ) { // Change the text of the text control. this.txt.text = "Email : " + this.tfd.text } } } Copy All Run Methods The following methods are available on the Dialog object: hide() setOnAction( callback ) setOnClose( callback ) show() function( text , index )
ui/addDivider.htm := addDivider Back addDivider Hello World Content: - Properties - Methods Adds a hairline divider into your layout. dr = ui.addDivider( parent, width, options ) → Object: Divider Component Properties These are the setter and getter properties for the addDivider Component. absHeight absLeft absTop absWidth backColor backImage border borderColor borderStyle color cornerRadius disabled fontFile height isVisible left margins opacity options padding parent position rotation textColor textSize top type visibility width Example - Basic class Main extends App { onStart() { // Create a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Add text control to the main layout var text = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolores voluptatibus deleniti, eum nulla rerum dignissimos nihil, quidem facere repellendus necessitatibus incidunt non quasi doloremque delectus repellat pariatur dolorum. Omnis, vero." ui.addText(this.main, text, "Justify", 0.8) // Add divider control to the main layout this.div = ui.addDivider(this.main, 0.8) // Add more text control to the main layout ui.addText(this.main, text, "Justify", 0.8) // Add an inset divider to the main layout this.div = ui.addDivider(this.main, 0.8, "inset") ui.addText(this.main, text, "Justify", 0.8) } } Copy All Run Methods The following methods are available on the Divider object: animate( anim, duration ) bringForward( zIndex ) destroy() getPosition( options ) → Object gone() hide() sendBackward( zIndex ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setMargins( left, top, right, bottom, mode ) setOnContextMenu( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSize( width, height ) show() function( event ) function( event )
ui/addDrawer.htm := addDrawer Back addDrawer Hello World Content: - Properties - Methods Adds a drawer into your app. drw = ui.addDrawer( lay, options ) → Object: Drawer Component Properties These are the setter and getter properties for the addDrawer Component. anchor disabled swipeAreaWidth width Example - Drawer Implementation class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout( "main", "Linear", "VCenter,FillXY") // Add a fixed appbar with menu icon to the main layout. this.apb = ui.addAppBar(this.main, "My App", "Menu,Fixed") // Add a callback handler for `onMenu` event of the AppBar control. this.apb.setOnMenu( this.openDrawer ) // Add a text control to the main layout. ui.addText(this.main, " ---- Swipe left ----->", "Center"); // Create a linear layout for the drawer. this.drawerLay = ui.addLayout(null, "Linear") // Initialize the drawer by passing the drawer layout above. this.drawer = ui.addDrawer(this.drawerLay, "left", 0.7) // Add a callback handler for `onClose` event on the Drawer component. this.drawer.setOnClose( this.onClose ) var lst1 = [ [ "music_note", "Audios" ], [ "movie", "Videos" ], [ "insert_drive_file", "Documents" ] ] // Adds a list to the drawer layout. See List control for customization. this.lstMenu1 = ui.addList( this.drawerLay, lst1, "Icon", 1 ) this.lstMenu1.label = "Main navigation" // Add a callback handler for `onSelect` event on the list. this.lstMenu1.setOnTouch( this.onSelect ) // Adds a divider into the drawer layout. ui.addDivider( this.drawerLay, 1 ) var lst2 = [ [ "mail", "All Mail" ], [ "inbox", "Inbox" ], [ "drafts", "Outbox" ], [ "send", "Sent" ] ] // Adds another list to the drawer layout. See List control for customization. this.lstMenu2 = ui.addList( this.drawerLay, lst2, "Icon", 1 ) this.lstMenu2.label = "Secondary navigation" this.lstMenu2.setOnTouch( this.onSelect ) } openDrawer() { this.drawer.show() } onSelect(title) { this.apb.text = title ui.showPopup( title ) this.drawer.hide() } onClose() { ui.showPopup('Drawer is close', "bottom") } } Copy All Run Example - Drawer Anchor Positions class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout( "main", "Linear", "VCenter,FillXY") // Adds a select control to the main layout. this.sel = ui.addSelect(this.main, ["Left", "Top", "Right", "Bottom"], "Radio,Outlined", 0.7) this.sel.label = "Select anchor position" // Add a callback handler for `onChange` event of the select control. this.sel.setOnChange(this.onSelect) // Creates a linear layout for the drawer. this.drawerLay = ui.addLayout( null, "Linear" ) // Initialize the drawer by passing the drawer layout. this.drawer = ui.addDrawer( this.drawerLay, "left" ) var lst1 = [ [ "music_note", "Audios" ], [ "movie", "Videos" ], [ "insert_drive_file", "Documents" ] ] // Adds a list to the drawer layout. this.lstMenu1 = ui.addList( this.drawerLay, lst1, "Icon", 1 ) this.lstMenu1.setOnTouch( this.closeDrawer ) this.lstMenu1.label = "Main navigation" // Adds a divider into the drawer layout. ui.addDivider( this.drawerLay, 1 ) var lst2 = [ [ "mail", "All Mail" ], [ "inbox", "Inbox" ], [ "drafts", "Outbox" ], [ "send", "Sent" ] ] // Adds another list to the drawer layout. this.lstMenu2 = ui.addList( this.drawerLay, lst2, "Icon", 1 ) this.lstMenu2.label = "Secondary navigation" this.lstMenu2.setOnTouch( this.closeDrawer ) } openDrawer() { this.drawer.show() } closeDrawer( title ) { ui.showPopup( title ) this.drawer.hide() } onSelect( value ) { // Set the drawer anchor first this.drawer.anchor = value // Set the drawer width depending on anchor position if(value == "Top" || value == "Bottom") { this.drawer.width = 0.5 } else { this.drawer.width = 0.7 } // Open the drawer this.drawer.show() } } Copy All Run Methods The following methods are available on the Drawer object: addLayout( lay ) disableBackdropTransition( value ) disableDiscovery( value ) disableSwipeToOpen( value ) hide() setOnClose( callback ) setOnOpen( callback ) show( anchor )
ui/addDropdown.htm := addDropdown Back addDropdown Hello World Content: - Properties - Methods Adds a dropdown component into your layout. dpd = ui.addDropdown( parent, list, options, width, height ) → Object: Dropdown Component. Properties These are the setter and getter properties for the addDropdown Component. absHeight absLeft absTop absWidth backColor backImage border borderColor borderStyle color cornerRadius disabled fontFile height icon isVisible label left list margins opacity options orientation padding parent position rotation sizeVariant textColor textSize top type value variant visibility width Example - Basic class Main extends App { onStart() { // Create a fullscreen linear layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Initialize items to show in the dropdown var items = ["Item 1", "Item 2", "Item 3"] // Add Dropdown control to the main layout. this.dpd = ui.addDropdown(this.main, items) // Add a callback handler for `onChange` event on the Dropdown control this.dpd.setOnChange( this.onChange ) } onChange(text, index) { ui.showPopup( "Value is " + text ) } } Copy All Run Example - Custom styles class Main extends App { onStart() { // Create a fullscreen linear layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Initialize dropdown items var items = ["Item 1", "Item 2", "Item 3"] // Add a Dropdown control to the main layout // and pass `Outlined` and `Primary` options for styling this.dpd = ui.addDropdown( this.main, items, "Outlined,Primary" ) // Set the label property of the Dropdown this.dpd.label = "Choose and item" // Set the corner radius to 16px this.dpd.cornerRadius = 16 // Set the text size to 18 this.dpd.textSize = 18 // Add a callback handler for `onChange` event of the Dropdown control this.dpd.setOnChange( this.onChange ) } onChange(text, index) { ui.showPopup( "Value is " + text ) } } Copy All Run Methods The following methods are available on the Dropdown object: addItem( name, index ) animate( anim, duration ) bringForward( zIndex ) destroy() getEnabled( index ) → Boolean getEnabledByName( name ) → Boolean getItemByIndex( index ) → String getPosition( options ) → Object gone() hide() popItem() removeItemByIndex( index ) removeItemByName( name ) sendBackward( zIndex ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setEnabled( index, value ) setEnabledByName( name, value ) setItemByIndex( item, index ) setList( val ) setMargins( left, top, right, bottom, mode ) setOnChange( callback ) setOnClose( callback ) setOnContextMenu( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSize( width, height ) shiftItem() show() function( The , index ) function( event ) function( event )
ui/addFAB.htm := addFAB Back addFAB Hello World Content: - Properties - Methods Adds a floating action button on your layout. fab = ui.addFAB( parent, icon, options, text ) → Object: FAB Component FAB usually float at the bottom right of your screen by default. If you want the fab to position relative to the layout and not on the bottom right corner, pass a Static option. If fab is Extended pass a text argument. Properties These are the setter and getter properties for the addFAB Component. absHeight absLeft absTop absWidth backColor backImage border borderColor borderStyle color cornerRadius disabled disabledRipple fontFile height icon iconSize isVisible left margins opacity options padding parent position rotation sizeVariant text textColor textSize top type variant visibility width Example - Basic FAB class Main extends App { onStart() { // Create a fullscreen linear layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Add a floating action button to the main layout. // By default, FAB is positioned fix at the bottom right corner this.fab = ui.addFAB(this.main, "add") // Add a callback handler for `onTouch` event on the FAB this.fab.setOnTouch( this.onTouch ) } onTouch() { ui.showPopup( "You click me!" ) } } Copy All Run Example - Primary static FAB class Main extends App { onStart() { // Create a fullscreen linear layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Add a primary floating action button to the main layout. // Passing `Static` will ignore fixed positioning // and will follow the flow of the parent layout this.fab = ui.addFAB( this.main, "add", "Primary,Static" ) // Add a callback handler for `onTouch` event on the FAB this.fab.setOnTouch( this.onTouch ) } onTouch() { ui.showPopup( "You click me!" ) } } Copy All Run Example - Extended FAB class Main extends App { onStart() { // Create a fullscreen linear layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Add a secondary floating action button to the main layout. // Passing `Extended` enables to add more text on the FAB this.fab = ui.addFAB(this.main, "add", "Secondary,Extended", "New message") // Add a callback handler for `onTouch` event on the FAB this.fab.setOnTouch( this.onTouch ) } onTouch() { ui.showPopup( "You click me!" ) } } Copy All Run Example - Secondary,Extended,Left class Main extends App { onStart() { // Create a fullscreen linear layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Add a secondary floating action button to the main layout. // Passing `Left` option will position the FAB on the bottom left corner this.fab = ui.addFAB(this.main, "add", "Secondary,Extended,Left", "New message") // Add a callback handler for `onTouch` event on the FAB this.fab.setOnTouch( this.onTouch ) } onTouch() { ui.showPopup( "You click me!" ) } } Copy All Run Methods The following methods are available on the FAB object: animate( anim, duration ) bringForward( zIndex ) destroy() getPosition( options ) → Object gone() hide() sendBackward( zIndex ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setMargins( left, top, right, bottom, mode ) setOnContextMenu( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSize( width, height ) show() function( event ) function( event )
ui/addImage.htm := addImage Back addImage Hello World Content: - Properties - Methods Adds an image into your layout. img = ui.addImage( parent, file, options, width, height ) → Object: Image Component. Please note that a canvas image cannot switch to Button or Avatar in setOptions method. Properties These are the setter and getter properties for the addImage Component. absHeight absLeft absTop absWidth backColor backImage border borderColor borderStyle cornerRadius disabled errorIcon file fill fillColor fontFile height isVisible left lineCap lineJoin lineWidth margins miterLimit opacity options padding parent pixelData position rotation strokeColor textColor textSize textStyle top type visibility width Example - Basic Image class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout( "main", "Linear", "VCenter,FillXY") var image = "https://upload.wikimedia.org/wikipedia/commons/thumb/9/90/Hapus_Mango.jpg/220px-Hapus_Mango.jpg" // Add an image control to the main layout with a width of 7/10 of the parent width this.img = ui.addImage(this.main, image, "", 0.5) // Add callback handler for `onTouch` event on the image control this.img.setOnTouch( this.onTouch ) } onTouch() { ui.showPopup( "You touched the mango!" ) } } Copy All Run Example - Avatar class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout( "main", "Linear", "VCenter,FillXY") var image = "https://upload.wikimedia.org/wikipedia/commons/thumb/9/90/Hapus_Mango.jpg/220px-Hapus_Mango.jpg" // Add an image control to the main layout. // Avatar option will ignore the width of the image control. this.img = ui.addImage(this.main, image, "Avatar") // Add callback handler for `onTouch` event on the image control this.img.setOnTouch( this.onTouch ) } onTouch() { ui.showPopup( "You touched the mango!" ) } } Copy All Run Example - Button class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout( "main", "Linear", "VCenter,FillXY") var image = "https://upload.wikimedia.org/wikipedia/commons/thumb/9/90/Hapus_Mango.jpg/220px-Hapus_Mango.jpg" // Add an image control to the main layout. // `Button` option will add touch effect when image is click. this.img = ui.addImage(this.main, image, "Button", 0.5) // Add callback handler for `onTouch` event on the image control this.img.setOnTouch( this.onTouch ) } onTouch() { ui.showPopup( "You touched the mango!" ) } } Copy All Run Example - Drawings class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout( "main", "Linear", "VCenter", 1, 1 ) // Add an image control into the main layout. // Pass canvas option to enable drawings on the image this.img = ui.addImage( this.main, "", "canvas", 1, 1 ) this.img.lineCap = "round" this.img.lineJoin = "round" // Draw a line from (130, 40) to (300, 500) this.img.drawLine( 130, 40, 300, 500, "#009688", 10) // Draw a square from (320, 200) with a side of 200 this.img.drawSquare( 320, 200, 200, "#683ab7") // Draw a circle centered at (400, 300) with a radius of 300 this.img.drawCircle(400, 300, 250, "#00000000", "", 20) // Draw an arc centered at (800, 200) with a radius of 100 // from 40 degrees to 270 degrees this.img.drawArc(800, 200, 100, 40, 270, "#44009688", "#009688", 10) // Draw a polyline from the given set of points below. var points = [ [0,0], [400,40], [20, 40], [300, 340], [140, 500] ] this.img.lineCap = "square" this.img.lineJoin = "miter" this.img.drawPolyline( points, "blue", 10 ) } } Copy All Run Example - Text and Shapes class Main extends App { onStart() { // create a main layout with object vertically centered this.main = ui.addLayout( "main", "Linear", "VCenter", 1, 1 ); // add a canvas image this.img = ui.addImage( this.main, "", "canvas", "300px", "500px"); // draw rectangle this.img.drawRectangle(0, 0, 300, 500, "#fff", "", 4); // draw polygon this.img.drawPolygon([ {x: 300, y: 0}, {x: 300, y: 500}, {x: 0, y: 500} ]); // draw text this.img.textSize = 100; this.img.textWeight = "bold"; this.img.fillColor = "white"; this.img.drawText("Hello", 30, 225, "", "", 3); this.img.drawText("World", 10, 325, "", "", 3); } } Copy All Run Example - Analog Clock class Main extends App { onStart() { // Create a linear layout with objects vertically centered. this.main = ui.addLayout( "main", "Linear", "VCenter", 1, 1 ) ui.addAppBar( this.main, "Analog Clock" ) // Create a canvas image this.img = ui.addImage( this.main, "", "canvas", "300px", "300px" ) // Set the initial line styles this.img.lineCap = "round" this.img.lineWidth = 4 this.img.strokeColor = "#009688" this.img.lineJoin = "round" // Create a text to display the time this.time = ui.addText(this.main, "00:00:00", "h6,bold") this.time.setMargins(0, 0.05, 0, 0) // Call the draw function every second setInterval( this.draw.bind(this), 1000) } draw() { // Clear all the drawings first in the canvas this.img.clear() let x, y, n // Draw the 12 dot for every hour for( n=1; n =12; n++ ) { x = 130 * Math.cos( n * (Math.PI/6) ) y = 130 * Math.sin( n * (Math.PI/6) ) x += 150 y += 150 this.img.drawCircle(x, y, 4, "#311b92") } var date = new Date() // Get the hour, minutes and seconds var hour = date.getHours() > 12 ? date.getHours()-12 : date.getHours(); var minutes = date.getMinutes() var seconds = date.getSeconds() // Calculate the corresponding angles var hourAngle = hour * ( Math.PI / 6) - ( Math.PI/2 ) var minAngle = minutes * ( Math.PI / 30 ) - ( Math.PI/2 ) var secAngle = seconds * ( Math.PI / 30 ) - ( Math.PI/2 ) // Draw each hand by calling the drawHand function this.drawHand(hourAngle, 80, 7, "#311b92") this.drawHand(minAngle, 100, 4, "#1e88e5") this.drawHand(secAngle, 110, 2, "#d81b60") // Draw the black cirlce in the center this.img.drawCircle(150, 150, 8, "#000") // Display the time this.time.text = (`${hour}`.padStart(2, '0')) + ":"+ (`${minutes}`.padStart(2, '0'))+":" + (`${seconds}`.padStart(2, '0')) + (date.getHours() > 12 ? " PM" : " AM") } drawHand( angle, length, width, color ) { var x, y x = length * Math.cos( angle ) y = length * Math.sin( angle ) x += 150 y += 150 // Draw the hand this.img.drawLine(150, 150, x, y, color, width ) } } Copy All Run Example - Scratch Pad class Main extends App { onStart() { this.color = "#000000" this.main = ui.addLayout( "main", "Linear", "Top", 1, 1 ); this.main.setChildMargins(0, 0.01, 0, 0.01); var lay = ui.addLayout( this.main, "Linear", "Horizontal,Center,VCenter", 1) lay.setChildMargins(0.01, 0, 0.01, 0); var colors = ["#009688", "#673ab7", "#e53935", "#1e88e5"] ui.addText( lay, "Color", "H5"); for( var i=0; i colors.length; i++ ) { var btn = ui.addLayout( lay, "Linear", "", "48px", "48px" ) btn.backColor = colors[i]; btn.setCornerRadius(8,8,8,8); btn.setOnTouch( this.changeColor.bind(this, colors[i]) ); } ui.addText( this.main, "Thickness", "H5") this.sld = ui.addSlider( this.main, 5, "", 0.9) this.sld.setRange(5, 25); this.sld.value = 15; this.img = ui.addImage( this.main, "", "canvas", 0.96, 0.7); this.img.fill = "#e0e0e0"; this.img.setOnTouchMove( this.draw ); this.img.setOnTouchDown( this.draw ); this.img.setOnTouch( this.draw ); } changeColor( color ) { this.color = color; } draw( e ) { this.img.drawCircle( e.x, e.y, this.sld.value, this.color, "", 0 ) } } Copy All Run Methods The following methods are available on the Image object: animate( anim, duration ) bringForward( zIndex ) clear() destroy() drawArc( x, y, radius, start, end, fillColor, strokeColor, strokeWidth ) drawCircle( x, y, radius, fillColor, strokeColor, strokeWidth ) drawImage( img, x, y, width, height ) drawLine( x1, y1, x2, y2, strokeColor, strokeWidth ) drawPoint( x, y, color ) drawPolygon( points, fillColor, strokeColor, strokeWidth ) drawPolyline( points, strokeColor, strokeWidth ) drawRectangle( x1, y1, width, height, fillColor, strokeColor, strokeWidth ) drawSquare( x, y, width, fillColor, strokeColor, strokeWidth ) enableContextMenu( value ) getPixelColor( x, y ) → List getPixelData() → String getPosition( options ) → Object gone() hide() sendBackward( zIndex ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setImage( file ) setMargins( left, top, right, bottom, mode ) setOnContextMenu( callback ) setOnLoad( callback ) setOnTouch( callback ) setOnTouchMove( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSize( width, height ) show() function( event ) function( event )
ui/addLayout.htm := addLayout Back addLayout Hello World Content: - Properties - Methods Adds a layout into your app. lay = ui.addLayout( parent, type, options, width, height ) → Object: Layout Component A layout is the basic ui component of an app. It is where you add other ui components such as buttons, textfields, checkboxes, list, images and many more. To add a layout, simply call the addLayout method of the ui object. There are 4 types of layouts: Linear, Absolute, Frame, and Slide. Layouts are transparent by default but you can set a background color or a background image. You can add child objects to the Layout by passing the layout as parent when initializing a control. By default, Layouts will auto-size to wrap and fit their contents but you have 3 more options as to how layout sizes within it's parent: FillXY, FillX, and FillY. ### Linear Layouts Linear layouts are probably the most common type and are used to organize controls in the Vertical or Horizontal orientation on the screen. You can also pass alignment options. For vertical alignment you can pass Top, VCenter, and Bottom. For horizontal alignment you can pass Left, Center, and Right. These will align your children accordingly. For children spacing, see childSpacing property below. ### Absolute Layouts Absolute layouts ignore all alignment options and allow the absolute positioning of controls by calling the setPosition method of each child control. However, you are encouraged to use linear layouts for most of your programs, unless it is absolutely necessary. ### Frame Layouts Frame layouts are used to display objects in front or behind each other. Everytime a child control is added, the new control is placed in a new layer in front of the previously added control at the top left of the frame. You can then use setPosition method of the child control to position it relative to the frame. ### Slide Layouts Slide layouts are used to display carousels or swipeable contents. The same as the Frame layout, this will add a new layer when a new control is added with a swipeable behaviour. You can pass alignment options to align your children within the Slide layout layer. Please note that Vertical and Horizontal options will be the direction of the swipe. If your parent layout is of type Slide, do not add setOnTouch callback handler in order for the slide layout to work perfectly. Properties These are the setter and getter properties for the addLayout Component. absHeight absLeft absTop absWidth alignment backColor backImage border borderColor borderStyle childMargins childSpacing cornerRadius currentSlide disabled fontFile height isVisible left margins opacity options orientation padding parent position rotation textColor textSize top type verticalAlignment visibility width Example - Main layout class Main extends App { onStart() { // Create a fullscreen linear layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter", 1, 1) // Add a callback hanlder when the layout is touched this.main.setOnTouch( this.onTouch ) // Add a button control to the main layout this.btn = ui.addButton(this.main, "Button", "primary") // Add a callback handler when the button is touched this.btn.setOnTouch( this.btnTouch ) } onTouch() { ui.showPopup( "You click the layout!" ) } btnTouch() { if(this.main.backColor == "yellow") { this.main.backColor = "white" } else { this.main.backColor = "yellow" } } } Copy All Run Example - Bottom aligned with margins class Main extends App { onStart() { // Creates a fullscreen main layout with objects aligned at the bottom this.main = ui.addLayout("main", "Linear", "Bottom,FillXY") // Set margins for children controls this.main.setChildMargins(0, 0.05, 0, 0.05) // Add buttons to the main layout this.btn1 = ui.addButton( this.main, "Button 1", "Primary" ) this.btn2 = ui.addButton( this.main, "Button 2", "Secondary" ) this.btn3 = ui.addButton( this.main, "Button 3", "Primary,Outlined" ) } } Copy All Run Example - Orientation and spacing class Main extends App { onStart() { // Create a fullscreen main layout with objects centered horizontally this.main = ui.addLayout("main", "Linear", "VCenter,Horizontal", 1, 1) // Set the children spacing this.main.childSpacing = "even" // Add buttons to the main layout. this.btn1 = ui.addButton(this.main, "Button 1", "Primary") this.btn2 = ui.addButton(this.main, "Button 2", "Secondary") this.btn3 = ui.addButton(this.main, "Button 3", "Primary,Outlined") } } Copy All Run Example - Slide Layout class Main extends App { onStart() { // Create a fullscreen slide layout with objects vertically centered // You can pass `Vertical` option to make a vertical slide this.main = ui.addLayout( "main", "Slide", "VCenter,FillXY" ) // Adds an onSlide event handler to the layout this.main.setOnSlide( this.onSlide ) // Adds a yellow-colored Linear first layout to the slide var lay1 = ui.addLayout(this.main, "Linear", "VCenter", 0.8, 0.5) lay1.backColor = "yellow" ui.addText(lay1, "First Page") // Adds a green-colored Linear second layout to the slide var lay2 = ui.addLayout(this.main, "Linear", "VCenter", 0.8, 0.5) lay2.backColor = "green" ui.addText(lay2, "Second Page") // Adds a red-colored Linear third layout to the slide var lay3 = ui.addLayout(this.main, "Linear", "VCenter", 0.8, 0.5) lay3.backColor = "red" ui.addText(lay3, "Third Page") // Adds a blue-colored Linear fourth layout to the slide var lay4 = ui.addLayout(this.main, "Linear", "VCenter", 0.8, 0.5) lay4.backColor = "blue" ui.addText(lay4, "Fourth Page") ui.showPopup("Swipe horizontally", "Long"); } onSlide( ctrl, index ) { ui.showPopup( index, "", 350 ); } } Copy All Run Methods The following methods are available on the Layout object: animate( anim, duration ) bringForward( zIndex ) childToFront( child ) destroy() getChildOrder( child ) → Number getCurrentSlide() → Number getPosition( options ) → Object gone() goto( index ) hasChild( child ) → Boolean hide() next() previous() removeChild( child ) sendBackward( zIndex ) setBorder( width, clr, style ) setChildMargins( left, top, right, bottom, mode ) setCornerRadius( tl, tr, bl, br, mode ) setMargins( left, top, right, bottom, mode ) setOnContextMenu( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSize( width, height ) show() function( event ) function( event )
ui/addList.htm := addList Back addList Hello World Content: - Properties - Methods Lists are continuous, vertical indexes of text or images. lst = ui.addList( parent, list, options, width, height ) → Object: List Component They are used to group together related pieces of data or informations to highlight association with each other and easy to read. They are frequently used for navigation as well as displaying general content. Add a list to your app by calling the addList method of the ui object. If Icon option is passed, the list must be of the form [icon, title, body, secondary]. To display an image avatar, passed and additional Avatar option and the list must be of the form [image, title, body, secondary] If no Icon option is passed, the list is treated as [title, body, secondary] by default. The secondary action is an icon button by default, to display as a text passed secondarytext option. Adding a selectable list will disregard the icon option. Properties These are the setter and getter properties for the addList Component. absHeight absLeft absTop absWidth avatarSize avatarVariant backColor backImage border borderColor borderStyle checkboxColor cornerRadius disabled elevation fontFile height iconColor iconSize isVisible itemPadding label left margins opacity options outlined padding parent position rotation selectable textColor textColor1 textColor2 textSize textSize1 textSize2 top type visibility width Example - Basic list class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Initialize the list items to show var list = ["Javascript", "Java", "Python"] // Add a list control to the main layout this.lst = ui.addList(this.main, list, "", 0.6) // Adds a callback handler when the list is touched this.lst.setOnTouch( this.onTouch ) } onTouch( title, body, icon, action, index ) { ui.showPopup( title, "Short" ) } } Copy All Run Example - List with icon and body class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter", 1, 1) this.main.setChildMargins(0, 0, 0, 0.02) // Initialize the list items to show var list = [ ["favorite", "Javascript", "This is a sample body text."], ["person", "Java", "This is a sample body text."], ["settings", "Python", "This is a sample body text."] ] // Add a list control with icon to the main layout this.lst = ui.addList(this.main, list, "Icon", 0.8) // Adds a callback handler when the list is touched this.lst.setOnTouch( this.onTouch ) // Add a button control to the main layout this.btn = ui.addButton(this.main, "Change Icon Color", "Outlined") // Add a callback handler to change the icon color when the button is touched this.btn.setOnTouch( this.changeIconColor ) } onTouch(title, body, icon, action, index) { ui.showPopup(title, "Short") } changeIconColor() { this.lst.iconColor = "#e91e63" } } Copy All Run Example - Contacts list class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Avatar url var avatar = "https://static.wikia.nocookie.net/heroes-and-villain/images/7/7e/Bilbo_BOFA_12.png/revision/latest/scale-to-width-down/350?cb=20190320192007" // Initialize the contact items to show var list = [ [avatar, "Frodo", "+0123456789"], [avatar, "Bilbo", "+0123456789"], [avatar, "Well", "+0123456789"] ] // Add a list control with avatar to the main layout this.lst = ui.addList(this.main, list, "Avatar", 0.8) // Adds a callback handler when the list is touched this.lst.setOnTouch( this.onTouch ) } onTouch(title, body, icon, action, index) { ui.showPopup(title + " : " +body, "Short") } } Copy All Run Example - Elevated list class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Initialize the list items to show var list = [ ["favorite", "Javascript", "This is a sample body text."], ["person", "Java", "This is a sample body text."], ["settings", "Python", "This is a sample body text."] ] // Add an elevated list control to the main layout this.lst = ui.addList(this.main, list, "Icon,Elevated", 0.8) // Set the elevation depth to 5 this.lst.elevation = 5 // Set the list label this.lst.label = "This is a label text" // Adds a callback handler when the list is touched this.lst.setOnTouch( this.onTouch ) } onTouch(title, body, icon, action, index) { ui.showPopup(title + " : " +body, "Short") } } Copy All Run Example - Outlined List class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Initialize the list items to show var list = [ ["favorite", "Javascript", "This is a sample body text."], ["person", "Java", "This is a sample body text."], ["settings", "Python", "This is a sample body text."] ] // Add an outlined list control to the main layout this.lst = ui.addList(this.main, list, "Icon,Outlined", 0.8) // Set the list label this.lst.label = "My awesome list" // Set the corner radius to 12 this.lst.cornerRadius = 12 // Adds a callback handler when the list is touched this.lst.setOnTouch( this.onTouch ) } onTouch(title, body, icon, action, index) { ui.showPopup(title + " : " +body, "Short") } } Copy All Run Example - Selectable List class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") var list = ["Javascript", "Java", "Python"] // Add a list control to the main layout this.lst = ui.addList(this.main, list, "", 0.6) // Set the list label this.lst.label = "Long press any item to select" // Add on long touch event and set the list to selectable this.lst.setOnLongTouch( this.onLongTouch ) // Add `onSelect` event listener to the list // and display the selected item in the popup this.lst.setOnSelect( this.onSelect ) } onLongTouch() { this.lst.selectable = true } onSelect(title, i, value) { ui. showPopup(title + " : " + value) } } Copy All Run Methods The following methods are available on the List object: addItem( title, body, image, index ) animate( anim, duration ) bringForward( zIndex ) deselectAll() destroy() getItem( title ) getItemByIndex( index ) getPosition( options ) → Object getSelectedItems() getSelectedTitles() gone() hide() popItem() removeItemByIndex( index ) removeItemByName( name ) selectItemByIndex( index ) sendBackward( zIndex ) setBodyText( index, newText ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setIcon( index, icon ) setItem( title, newTitle, newBody, newImage ) setItemByIndex( index, newTitle, newBody, newImage ) setList( list ) setMargins( left, top, right, bottom, mode ) setOnAction( callback ) setOnContextMenu( callback ) setOnSelect( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSelectable( selectable ) setSize( width, height ) setTitleText( index, title ) shiftItem() show() function( icon , index ) function( title , body , icon , index , event ) function( title , index )
ui/addMenu.htm := addMenu Back addMenu Hello World Content: - Properties - Methods Adds a pop-up menu into your components. men = ui.addMenu( parent, list, options, width, height ) → Object: Menu Component These are examples on how you can format your list. Basic list var lst = [ 'Item 1', 'Item 2', 'Item 3' ]; List with icons var lst = ['favorite : Favorites', 'person : Account', 'delete : Trash Bin']; List with group title var lst = [' : This is a label', 'Item 1', 'Item 2', 'Item 3']; Properties These are the setter and getter properties for the addMenu Component. absHeight absLeft absTop absWidth backColor backImage border borderColor borderStyle cornerRadius disabled fontFile height isVisible itemPadding left list margins opacity options padding parent position rotation textColor textSize top type visibility width Example - Basic menu class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Adds a button control to the layout this.btn = ui.addButton(this.main, "Show Menu", "Primary") this.btn.setOnTouch( this.onTouch ) // Menu items to display in the popup var items = ["Item 1", "Item 2", "Item 3"] // Adds a menu passing the button control as anchor this.menu = ui.addMenu(this.btn, items) // Add a callback handler when a menu is touched this.menu.setOnTouch( this.menuTouch ) } onTouch() { // show the menu this.menu.show() } menuTouch( item ) { ui.showPopup( item ) } } Copy All Run Example - Changing anchor component class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") this.main.setChildSpacing( "Evenly" ) // Add a first button control to the layout this.btn1 = ui.addButton(this.main, "Button 1", "Primary") this.btn1.setOnTouch( this.onTouch1 ) // Add a second button control to the layout this.btn2 = ui.addButton(this.main, "Button 2", "Secondary") this.btn2.setOnTouch( this.onTouch2 ) // Menu items to display the menu popup var items = ["Item 1", "Item 2", "Item 3"] // Adds a menu without anchor component this.menu = ui.addMenu(null, items) // Add a callback handler when a menu is touched this.menu.setOnTouch( this.menuTouch ) } onTouch1() { // Show the menu on button 1 this.menu.show( this.btn1 ) } onTouch2() { // Show the menu on button 2 this.menu.show( this.btn2 ) } menuTouch( item ) { ui.showPopup( item ) } } Copy All Run Example - With icons and disabled items class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Add a button control to the main layout this.btn = ui.addButton(this.main, "Show Menu", "Primary") this.btn.setOnTouch( this.onTouch ) // List items with icons var items = ["person:Item 1", "delete:Item 2", "favorite:Item 3"] // Add a menu passing the btn as anchor component this.menu = ui.addMenu(this.btn, items, "Icons,Primary,Dense") // Disable the second menu item this.menu.setEnabled(1, false) // Add a callback handler when a menu is touched this.menu.setOnTouch( this.menuTouch ) } onTouch() { // show the menu this.menu.show() } menuTouch( item ) { // display the selected item ui.showPopup( item ) } } Copy All Run Example - Anchor position on mouse class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") this.main.setOnContextMenu( this.onMenu ) // Add a text control to the layout this.txt = ui.addText(this.main, "Right click anywhere on the screen.") // List items with icons var items = ["person:Item 1", "delete:Item 2", "favorite:Item 3"] // Add menu passing the btn as anchor component this.menu = ui.addMenu(null, items, "Icons,Dense") // Add a callback handler when a menu is touched this.menu.setOnTouch( this.menuTouch ) } onMenu( pos ) { // show the menu on the position of the mouse this.menu.show(pos.x, pos.y) } menuTouch( item ) { // display the selected item ui.showPopup( item ) } } Copy All Run Methods The following methods are available on the Menu object: addItem( name, index ) animate( anim, duration ) bringForward( zIndex ) destroy() getEnabled( index ) → Boolean getEnabledByName( name ) → Boolean getPosition( options ) → Object gone() hide() popItem() removeItemByIndex( index ) removeItemByName( name ) sendBackward( zIndex ) setAutoFocus( bool ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setEnabled( index, value ) setEnabledByName( name, value ) setList( list ) setMargins( left, top, right, bottom, mode ) setOnContextMenu( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top ) setScale( x, y ) setSize( width, height ) shiftItem() show( parent ) function( event ) function( item , icon , index )
ui/addProgress.htm := addProgress Back addProgress Hello World Content: - Properties - Methods Adds a progress component into your app. prg = ui.addProgress( parent, value, options, width, height ) → Object: Progress Component If you pass a null value on initialization and you won't passed a variant option, the default variant will be indeterminate. Otherwise if there's no variant option and the value is not null, it will automatically be a determinate variant. Properties These are the setter and getter properties for the addProgress Component. absHeight absLeft absTop absWidth backColor backImage border borderColor borderStyle circleSize color cornerRadius disabled fontFile height isVisible left margins opacity options padding parent position rotation textColor textSize thickness top type value variant visibility width Example - Progress control implementation class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") this.main.childSpacing = "Even" // Indeterminate Linear this.prog1 = ui.addProgress(this.main, 40, "linear", 0.7) // Determinate Linear this.prog2 = ui.addProgress(this.main, null, "Linear,Secondary,indeterminate", 0.7) // Determinate Circular this.prog3 = ui.addProgress(this.main, 50, "Circular") // Indeterminate Circular, enlarge and secondary this.prog4 = ui.addProgress(this.main, null, "Circular,Secondary,indeterminate") this.prog4.circleSize = 100 } } Copy All Run Example - Setting progress value class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") this.main.childSpacing = "Even" // Add an indeterminate linear progress control to the main layout this.prog = ui.addProgress(this.main, 0, "Linear", 0.7) // Add a button control to the main layout this.btn = ui.addButton(this.main, "Increment") // Add a callback handler when the button is touched this.btn.setOnTouch( this.onTouch ) } onTouch() { // Increment the value of the progress control by 10 if( this.prog.value 100 ) { this.prog.value += 10 } else { ui.showPopup( "Progress is complete!" ) } } } Copy All Run Methods The following methods are available on the Progress object: animate( anim, duration ) bringForward( zIndex ) destroy() getPosition( options ) → Object gone() hide() sendBackward( zIndex ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setMargins( left, top, right, bottom, mode ) setOnContextMenu( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSize( width, height ) show() function( event ) function( event )
ui/addRadioGroup.htm := addRadioGroup Back addRadioGroup Hello World Content: - Properties - Methods Adds a radiogroup component into your app. rdg = ui.addRadioGroup( parent, list, options, width, height ) → Object: RadioGroup Component A radiogroup is a type of select list that can only have a single value being checked at a time. Pass required as option to have atleast one value selected. Properties These are the setter and getter properties for the addRadioGroup Component. absHeight absLeft absTop absWidth backColor backImage border borderColor borderStyle color cornerRadius disabled elevation fontFile height iconColor iconPosition isVisible itemPadding label left list margins opacity options outlined padding parent position radioSize rotation spaceBetween textColor textPosition textSize top type value visibility width Example - Basic radiogroup class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Initialize list items to show var items = ["Item 1", "Item 2", "Item 3"] // Add a radiogroup control to the main layout this.rdg = ui.addRadioGroup(this.main, items) // Add a callback handler when the value changes this.rdg.setOnChange( this.onChange ) } onChange(text, index) { ui.showPopup("You choose " + text) } } Copy All Run Example - Elevated secondary radiogroup class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Initialize list items to show var items = ["Item 1", "Item 2", "Item 3"] // Add an elevated radiogroup control to the main layout this.rdg = ui.addRadioGroup(this.main, items, "Elevated,Secondary", 0.6) // Set the label text of the radiogroup this.rdg.label = "Select one" // Set the elevation depth this.rdg.elevation = 4 // Add a callback handler when the value changes this.rdg.setOnChange( this.onChange ) } onChange(text, index) { ui.showPopup("You choose " + text) } } Copy All Run Example - Outlined and radios to the right class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Initialize list items to show var items = ["Item 1", "Item 2", "Item 3"] // Add an outlined radiogroup control to the main layout // Passing `Right` will display the radios to the right this.rdg = ui.addRadioGroup( this.main, items, "Outlined,Primary,Right", 0.6) // Set the label text of the radiogroup this.rdg.label = "Select one" // Set the corner radius to 12 this.rdg.cornerRadius = 12 // Add a callback handler when the value changes this.rdg.setOnChange( this.onChange ) } onChange(text, index) { ui.showPopup("You choose " + text) } } Copy All Run Methods The following methods are available on the RadioGroup object: addItem( name, index ) animate( anim, duration ) bringForward( zIndex ) destroy() getEnabled( index ) → Boolean getEnabledByName( name ) → Boolean getPosition( options ) → Object gone() hide() popItem() removeItemByIndex( index ) removeItemByName( name ) sendBackward( zIndex ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setEnabled( index, value ) setEnabledByName( name, value ) setItemByIndex( item, index ) setItemByName( name, text ) setList( val ) setMargins( left, top, right, bottom, mode ) setOnChange( callback ) setOnContextMenu( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSize( width, height ) shiftItem() show() function( index ) function( label , index , event ) function( checked , label , index , event )
ui/addSelect.htm := addSelect Back addSelect Hello World Content: - Properties - Methods Adds a Select Component to a given layout. sel = ui.addSelect( parent, list, options, width, height ) → Object: Select Component This component is used to create a drop-down list and is most often used in a form to collect user choices. A simple list [ "Option 1", "Option 2", "Option 3"] If you want a list with groupings, you can add a colon : before each item text to display as group name. Below is an example [" : Group 1", "Option 1", "Option 2", " : Group 2", "Item 1", "Item 2"] Properties These are the setter and getter properties for the addSelect Component. absHeight absLeft absTop absWidth backColor backImage border borderColor borderStyle cornerRadius disabled enabled fontFile height iconColor isVisible label labelColor labelSize left list margins maxHeight opacity options padding parent popupColor position rotation sizeVariant textColor textSize top type value variant visibility width Example - Basic class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Initialize the list items to show var items = ["Item 1", "Item 2", "Item 3"] // Adds a select control to the main layout this.sel = ui.addSelect(this.main, items, "", 0.6) // Set the label text this.sel.label = "Select an item" // Add a callback handler when an item is selected this.sel.setOnChange( this.onChange ) } onChange(text, index) { ui.showPopup("You choose " + text) } } Copy All Run Example - Group title class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Initialize the list items to show // The leading colon in each item will render it as group tile var items = [":Choices", "Item 1", "Item 2", "Item 3"] // Adds a select control to the main layout this.sel = ui.addSelect(this.main, items, "", 0.6) // Set the label text this.sel.label = "Select an item" // Add a callback handler when an item is selected this.sel.setOnChange( this.onChange ) } onChange(text, index) { ui.showPopup("You choose " + text) } } Copy All Run Example - Multiple selection class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Initialize list items to show var items = ["Item 1", "Item 2", "Item 3"] // Adds a select control to the main layout // Passing `Multiple` option will allow more than one selection this.sel = ui.addSelect(this.main, items, "Multiple", 0.6) this.sel.label = "Select an item" // Add a callback handler when an item is selected this.sel.setOnChange( this.onChange ) } onChange(items, index) { ui.showPopup( "You choose " + items.join(", ") ) } } Copy All Run Example - Outlined and small class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Initialize list items to show var items = ["Item 1", "Item 2", "Item 3"] // Adds a select control to the main layout // Passing `Outlined` option will add a border // Passing `Small` option will make the control smaller this.sel = ui.addSelect(this.main, items, "Outlined,Small,Secondary", 0.6) this.sel.label = "Select an item" // Add a callback handler when an item is selected this.sel.setOnChange( this.onChange ) } onChange(item, index) { ui.showPopup( "You choose " + item ) } } Copy All Run Example - Radiogroup items class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Initialize list items to show var items = ["Item 1", "Item 2", "Item 3"] // Adds a select control to the main layout // Passing `Radio` option will render the items as radiogroup this.sel = ui.addSelect(this.main, items, "Filled,Radio", 0.6) this.sel.label = "Select an item" // Add a callback handler when an item is selected this.sel.setOnChange( this.onChange ) } onChange(item, index) { ui.showPopup( "You choose " + item ) } } Copy All Run Example - Grouped list items class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Initialize list items to show with group tiles var items = [":Group 1", "Item 1", "Item 2", ":Group 2", "Another item 1", "Another item 2"] // Adds a select control to the main layout this.sel = ui.addSelect(this.main, items, "Filled", 0.6) this.sel.label = "Select an item" // Add a callback handler when an item is selected this.sel.setOnChange( this.onChange ) } onChange(item, index) { ui.showPopup( "You choose " + item ) } } Copy All Run Example - Multiple radiogroup with titles class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Initialize list items to show with group tiles var items = [":Group 1", "Item 1", "Item 2", ":Group 2", "Another item 1", "Another item 2"] // Adds a select control to the main layout this.sel = ui.addSelect(this.main, items, "Outlined,Radio,Multiple", 0.6) this.sel.label = "Select an item" // Add a callback handler when an item is selected this.sel.setOnChange( this.onChange ) } onChange(items, index) { ui.showPopup( "You choose " + items.join(", ") ) } } Copy All Run Methods The following methods are available on the Select object: addItem( item, index ) animate( anim, duration ) bringForward( zIndex ) destroy() getEnabled( index ) → Boolean getEnabledByName( name ) → Boolean getItem( index ) getPosition( options ) → Object gone() hide() popItem() removeItemByIndex( index ) removeItemByName( name ) sendBackward( zIndex ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setEnabled( index, value ) setEnabledByName( name, value ) setList( items ) setMargins( left, top, right, bottom, mode ) setOnChange( callback ) setOnClose( callback ) setOnContextMenu( callback ) setOnOpen( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSize( width, height ) shifItem() show() function( value ) function( event ) function( event )
ui/addSlider.htm := addSlider Back addSlider Hello World Content: - Properties - Methods Adds a Slider Component into your App. sld = ui.addSlider( parent, value, options, width, height ) → Object: Slider Component. A Slider Component defines a control for selecting a number whose exact value must be within the range. Default range is 0 to 100. However, you can set restrictions on what numbers are accepted with the min, max, steps and even marks. Properties These are the setter and getter properties for the addSlider Component. absHeight absLeft absTop absWidth backColor backImage border borderColor borderStyle color cornerRadius disabled fontFile height isVisible left margins marks maxValue minValue opacity options orientation padding parent position rotation step textColor textSize top track type value valueLabelDisplay visibility width Example - Marks array var marks = [ { label: "First stop", value: 10 }, { label: "Second stop", value: 30 }, { label: "Third stop", value: 70 } ] Copy All Run Example - Basic slider class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Add a slider control to the main layout with an initial value of 10 this.sld = ui.addSlider(this.main, 10, "", 0.7) // Add a callback handler when the value of the slider changes this.sld.setOnChange( this.onChange ) // Create a popup where to display values this.popup = ui.showPopup( 10 ) } onChange( value ) { this.popup.text = value this.popup.show() } } Copy All Run Example - Slider steps and marks class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Add a slider control to the main layout with an initial value of 10 this.sld = ui.addSlider(this.main, 10, "", 0.7) // Set the step to 10 this.sld.step = 10 // Add marks for every step this.sld.marks = true // Add a callback handler when the value of the slider changes this.sld.setOnSelect( this.onSelect ) // Add a text control to show the selected value this.txt = ui.addText(this.main, "Value is 10") } onSelect( value ) { this.txt.text = "Value is " + value } } Copy All Run Example - Slider with custom step marks class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Add a slider control to the main layout with an initial value of 10 this.sld = ui.addSlider(this.main, 10, "Primary", 0.7) // Set the step to 10 this.sld.step = 10 // Add custom marks for values at 10, 40 and 60 this.sld.marks = [ { label: "First", value: 10 }, { label: "Second", value: 40 }, { label: "Third", value: 60 } ] // Add a callback handler when the value of the slider changes this.sld.setOnSelect( this.onSelect ) // Add a text control to show the selected value this.txt = ui.addText(this.main, "Value is 10") this.txt.margins = 0.02 } onSelect( value ) { this.txt.text = "Value is " + value } } Copy All Run Example - Vertical slider class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Add a vertical slider control to the main layout this.sld = ui.addSlider(this.main, 10, "Vertical,Primary", 0.2, 0.7) // Add a callback handler when the value of the slider changes this.sld.setOnChange( this.onChange ) // Create a popup where to display values this.popup = ui.showPopup( 10 ) } onChange( value ) { this.popup.text = value this.popup.show() } } Copy All Run Methods The following methods are available on the Slider object: animate( anim, duration ) bringForward( zIndex ) destroy() getMarks() → Boolean getPosition( options ) → Object gone() hide() sendBackward( zIndex ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setMargins( left, top, right, bottom, mode ) setMarks( val ) setOnChange( callback ) setOnContextMenu( callback ) setOnSelect( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setRange( min, max ) setScale( x, y ) setSize( width, height ) show() function( value ) function( event ) function( event )
ui/addStepper.htm := addStepper Back addStepper Hello World Content: - Properties - Methods Adds a Stepper to a given layout. stp = ui.addStepper( parent, steps, options, width, height ) → Object: Stepper Component A stepper can display a series of steps or information that a user can navigate forward or backward. For Mobile option, an additional position options can be added Top, Static or Bottom and AutoSwipe to enable auto swiping. To style step count text, pass Fraction, Dots or Progress options. For vertical and mobile, you can add Layout type Linear or Absolute Properties These are the setter and getter properties for the addStepper Component. absHeight absLeft absTop absWidth activeStep backColor backImage border borderColor borderStyle cornerRadius disabled elevation fontFile height isVisible left margins opacity options orientation padding parent position rotation textColor textSize top type visibility width Example - Basic stepper class Main extends App { onStart() { // Creates a fullscreen layout with object vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") this.main.setChildMargins(0, 0, 0, 0.02) // Initialize the steps array var steps = ["Step 1", "Step 2", "Step 3"] // Add a stepper component to the main layout this.stp = ui.addStepper(this.main, steps, "", 0.6) // Add back button control to the main layout this.btnBack = ui.addButton(this.main, "Back", "Raised,Primary") this.btnBack.setOnTouch( this.back ) // Add next button control to the main layout this.btnNext = ui.addButton(this.main, "Next", "Raised,Primary") this.btnNext.setOnTouch( this.next ) } next() { this.stp.nextStep() } back() { this.stp.previousStep() } } Copy All Run Example - Vertical stepper class Main extends App { onStart() { // Creates a fulscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Stepper titles var steps = ["Step 1", "Step 2", "Step 3"] // Add a stepper control into the main layout this.stp = ui.addStepper(this.main, steps, "Vertical", 0.5, 0.6) // Get the layout of the first step var step1Lay = this.stp.getLayout( 0 ) step1Lay.setChildMargins(0, 0.005, 0, 0.005) // Add controls to the first step layout ui.addText(step1Lay, "This is a text content on step 1") var btnStep1Next = ui.addButton(step1Lay, "Next", "Raised,Primary") btnStep1Next.setOnTouch( this.next ) // Get the layout of the second step var step2Lay = this.stp.getLayout( 1 ) step2Lay.setChildMargins(0, 0.005, 0, 0.005) // Add controls to the second step layout ui.addText(step2Lay, "This is a text content on step 2") var btnStep2Next = ui.addButton(step2Lay, "Next", "Raised,Primary") btnStep2Next.setOnTouch( this.next ) // Get the layout of the third step var step3Lay = this.stp.getLayout( 2 ) step3Lay.setChildMargins(0, 0.005, 0, 0.005) // Add controls to the third step layout ui.addText(step3Lay, "This is a text content on step 3") var btnStep3Next = ui.addButton(step3Lay, "Next", "Raised,Primary") btnStep3Next.setOnTouch( this.next ) } next() { this.stp.nextStep() } back() { this.stp.previousStep() } } Copy All Run Example - Mobile Stepper class Main extends App { onStart() { // Creates a layout with objects verticaly centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") var steps = ["Step 1", "Step 2", "Step 3"] var img1 = "https://images.unsplash.com/photo-1537944434965-cf4679d1a598?auto=format fit=crop w=400 h=250 q=60" var img2 = "https://images.unsplash.com/photo-1538032746644-0212e812a9e7?auto=format fit=crop w=400 h=250 q=60" var img3 = "https://images.unsplash.com/photo-1537996194471-e657df975ab4?auto=format fit=crop w=400 h=250 q=80" // Add stepper control with `mobile` option this.stp = ui.addStepper(this.main, steps, "mobile", 0.6, 0.7) // get the first layout on the stepper this.lay1 = this.stp.getLayout( 0 ) // add an image control to the first layout ui.addImage(this.lay1, img1, "", 1, 1) // get the second layout on the stepper this.lay2 = this.stp.getLayout( 1 ) // add an image control to the second layout ui.addImage(this.lay2, img2, "", 1, 1) // get the third layout on the stepper this.lay3 = this.stp.getLayout( 2 ) // add an image control to the third layout ui.addImage(this.lay3, img3, "", 1, 1) // Add a callback handler when stepper layout changes this.stp.setOnChange( this.onChange ) } onChange( index ) { ui.showPopup( "Layout index " + index ) } } Copy All Run Example - Autoswipe and Fraction Mobile Stepper class Main extends App { onStart() { ui.setTheme("dark") // Creates a layout with objects verticaly centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") var steps = ["Step 1", "Step 2", "Step 3"] var img1 = "https://images.unsplash.com/photo-1537944434965-cf4679d1a598?auto=format fit=crop w=400 h=250 q=60" var img2 = "https://images.unsplash.com/photo-1538032746644-0212e812a9e7?auto=format fit=crop w=400 h=250 q=60" var img3 = "https://images.unsplash.com/photo-1537996194471-e657df975ab4?auto=format fit=crop w=400 h=250 q=80" // Add stepper control with `mobile` option this.stp = ui.addStepper(this.main, steps, "mobile,autoswipe,fraction", 0.6) // Get the first layout on the stepper this.lay1 = this.stp.getLayout( 0 ) // Add an image control to the first layout ui.addImage(this.lay1, img1, "", 1) // Get the second layout on the stepper this.lay2 = this.stp.getLayout( 1 ) // Add an image control to the second layout ui.addImage(this.lay2, img2, "", 1) // Get the third layout on the stepper this.lay3 = this.stp.getLayout( 2 ) // Add an image control to the third layout ui.addImage(this.lay3, img3, "", 1) // Add a callback handler when stepper layout changes this.stp.setOnChange( this.onChange ) } onChange( index ) { ui.showPopup( "Layout index " + index ) } } Copy All Run Methods The following methods are available on the Stepper object: animate( anim, duration ) bringForward( zIndex ) destroy() getLayout( index ) → Object: Layout getLayoutIndex( layout ) → Number getPosition( options ) → Object gone() hide() nextStep() previousStep() removeStep( index ) sendBackward( zIndex ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setMargins( left, top, right, bottom, mode ) setOnChange( callback ) setOnComplete( callback ) setOnContextMenu( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSize( width, height ) setTitleText( index, title ) show() function( index ) function( event ) function( event )
ui/addSwitch.htm := addSwitch Back addSwitch Hello World Content: - Properties - Methods Adds a Switch Component into your layout. swt = ui.addSwitch( parent, text, options, width, height ) → Object: Switch Component A switch is a control whose values can be toggled between on and off. Properties These are the setter and getter properties for the addSwitch Component. absHeight absLeft absTop absWidth backColor backImage border borderColor borderStyle color cornerRadius disableRipple disabled edge enable fontFile height iconPosition isVisible left margins opacity options padding parent position required rotation sizeVariant spaceBetween text textColor textSize top type value visibility width Example - Basic class Main extends App { onStart() { // Creates a layout with objects verticaly centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Adds a switch to the main layout this.swt = ui.addSwitch(this.main, "Check me", "Secondary", 0.5) // Add a callback handler when the switch control is touch this.swt.setOnTouch( this.onTouch ) } onTouch( value ) { ui.showPopup("Value is : " + value) // Setting the switch label text this.swt.text = `Check me (Value is ${value})` } } Copy All Run Example - Right switch with custom styles class Main extends App { onStart() { // Creates a layout with objects verticaly centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Adds a switch control to the main layout // `Right` option will display the switch on the right this.swt = ui.addSwitch(this.main, "Check me", "Right,Secondary", 0.5) // Add some custom styling to thw switch control this.swt.border = 1 this.swt.padding = ["1.2rem"] this.swt.cornerRadius = 4 this.swt.backColor = "yellow" // Add a callback handler when the switch control is touch this.swt.setOnTouch( this.onTouch ) } onTouch( value ) { ui.showPopup("Value is : " + value) } } Copy All Run Methods The following methods are available on the Switch object: animate( anim, duration ) bringForward( zIndex ) destroy() getPosition( options ) → Object gone() hide() sendBackward( zIndex ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setMargins( left, top, right, bottom, mode ) setOnContextMenu( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSize( width, height ) show() function( event ) function( check )
ui/addSwitchGroup.htm := addSwitchGroup Back addSwitchGroup Hello World Content: - Properties - Methods Adds a SwitchGroup Component into your layout. swg = ui.addSwitchGroup( parent, list, options, width, height ) → Object: SwitchGroup Component A switchgroup is a list whose items can be toggled between on and off. Properties These are the setter and getter properties for the addSwitchGroup Component. absHeight absLeft absTop absWidth backColor backImage border borderColor borderStyle color cornerRadius disabled edge elevation fontFile height iconColor iconSize isVisible itemPadding label labelColor labelSize left list margins opacity options outlined padding parent position rotation textColor textSize top type visibility width Example - Basic class Main extends App { onStart() { // Creates a layout with objects verticaly centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") var items = ["This is item 1", "This is item 2", "This is item 3"] // Add a switchgroup control to the main layout. this.swg = ui.addSwitchGroup(this.main, items, "Secondary", 0.9) // Add a callback handler when the switchgroup item is touch this.swg.setOnTouch( this.onTouch ) } onTouch(item, value) { ui.showPopup(item + " : " + value) } } Copy All Run Example - SwitchGroup with leading icons class Main extends App { onStart() { // Creates a layout with objects verticaly centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Initialize switchgroup items with leading icon var items = [ ["music_note", "Enable Sound"], ["bluetooth", "Enable Bluetooth"], ["wifi", "Enable Wifi"] ] // Add a switchgroup control to the main layout. this.swg = ui.addSwitchGroup(this.main, items, "Secondary,Icon", 0.9) // Set the label text of the switchgroup control this.swg.label = "Settings" // Add a callback handler when the switchgroup item is touch this.swg.setOnTouch( this.onTouch ) } onTouch(item, value) { ui.showPopup(item + " : " + value) } } Copy All Run Example - With custom styles class Main extends App { onStart() { // Creates a layout with objects verticaly centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Initialize switchgroup items with leading icon var items = [ ["music_note", "Enable Sound"], ["bluetooth", "Enable Bluetooth"], ["wifi", "Enable Wifi"] ] // Adds a switchgroup control to the main layout this.swg = ui.addSwitchGroup(this.main, items, "Secondary,Icon", 0.9) this.swg.setOnTouch( this.onTouch ) // Set the text color to deep-purple this.swg.textColor = "#673ab7" // Set the icon color to teal this.swg.iconColor = "#009688" // Set the corner radius this.swg.cornerRadius = 4 // Set the background color using rgba this.swg.backColor = "rgba(255, 255, 100, 255)" } onTouch( item, value ) { ui.showPopup( item + " : " + value ) } } Copy All Run Example - Elevated switchgroup with onChange callback class Main extends App { onStart() { // Creates a layout with objects verticaly centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Initialize switchgroup items to be displayed var items = ["This is item 1", "This is item 2", "This is item 3"] // Adds a switchgroup control to the main layout this.swg = ui.addSwitchGroup( this.main, items, "Secondary,Elevated", 0.9 ) this.swg.label = "My label" this.swg.elevation = 4 // Add a callback handler when the value of switchgroup changes this.swg.setOnChange( this.onChange ) } onChange(items, indexes) { ui.showPopup( items.join(", ") ) } } Copy All Run Example - Outlined switchgroup class Main extends App { onStart() { // Creates a layout with objects verticaly centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Initialize switchgroup items to be displayed var items = ["This is item 1", "This is item 2", "This is item 3"] // Adds a switchgroup control to the main layout this.swg = ui.addSwitchGroup( this.main, items, "Primary,Outlined", 0.9) this.swg.label = "My label" this.swg.cornerRadius = 8 // Add a callback handler when the value of switchgroup changes this.swg.setOnChange( this.onChange ) } onChange(items, indexes) { ui.showPopup( items.join(", ") ) } } Copy All Run Methods The following methods are available on the SwitchGroup object: addItem( title, icon, value, index ) animate( anim, duration ) bringForward( zIndex ) destroy() getEnabled( index ) → Boolean getPosition( options ) → Object getValueByIndex( index ) → Boolean gone() hide() popItem() removeItemByIndex( index ) removeItemByName( title ) sendBackward( zIndex ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setEnabled( index, value ) setList( lst ) setMargins( left, top, right, bottom, mode ) setOnChange( callback ) setOnContextMenu( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSize( width, height ) setValueByIndex( index, val ) shiftItem() show() function( values ) function( text , index , event ) function( value , text , index , event )
ui/addTabs.htm := addTabs Back addTabs Hello World Content: - Properties - Methods Adds a Tabs Component into your layout. s = ui.addTabs( parent, list, options, width, height ) → Object: Tabs Component Default Tab variant for mobile screens is fullWidth unless provided. Properties These are the setter and getter properties for the addTabs Component. absHeight absLeft absTop absWidth backColor backImage border borderColor borderStyle centered color cornerRadius disabled elevation fontFile height iconColor iconSize indicatorColor indicatorRadius indicatorThickness indicatorWidth isVisible left margins opacity options padding parent position rotation scrollButtonMode tabHeight tabPadding textColor textSize top type variant visibility width Example - Basic class Main extends App { onStart() { // Creates a layout with objects verticaly centered this.main = ui.addLayout( "main", "Linear", "FillXY,VCenter") this.main.backColor = "#e0e0e0" // Initialize tab names array var tabs = ["Tab 1", "Tab 2", "Tab 3"] // Adds a tab component to the main layout. this.tabs = ui.addTabs(this.main, tabs, "", 0.8, 0.8) // Handle tab changes this.tabs.setOnChange( this.onChange ) // get the first tab and add a button control this.tab1 = this.tabs.getLayout(0) this.tab1.options = "VCenter" this.btn = ui.addButton(this.tab1, "Button", "Secondary", 0.5) // get the second tab and add a text control. this.tab2 = this.tabs.getLayout(1) this.tab2.options = "VCenter" this.txt = ui.addText(this.tab2, "Lorem ipsum dolor set amit", "Center", 1) // get the third tab and add a checkbox control this.tab3 = this.tabs.getLayout(2) this.tab3.options = "VCenter" this.ckb = ui.addCheckbox(this.tab3, "Check me", "Secondary") } onChange(tab, index) { ui.showPopup( tab + " : Index " + index) } } Copy All Run Example - With Icon class Main extends App { onStart() { // Creates a layout with objects verticaly centered this.main = ui.addLayout( "main", "Linear", "FillXY,VCenter") this.main.backColor = "#e0e0e0" // Initialize tabs array with leading icons var tabs = [ ["favorite", "Favorites"], ["bluetooth", "Bluetooth"], ["wifi", "Connection"] ] // Adds a tab component to the main layout and passing the `icon` option this.tabs = ui.addTabs(this.main, tabs, "Icon", 0.8, 0.8) // Handle tab changes this.tabs.setOnChange( this.onChange ) // get the first tab and add a button control this.tab1 = this.tabs.getLayout(0) this.tab1.options = "VCenter" this.btn = ui.addButton(this.tab1, "Button", "Secondary", 0.5) // get the second tab and add a text control. this.tab2 = this.tabs.getLayout(1) this.tab2.options = "VCenter" this.txt = ui.addText(this.tab2, "Lorem ipsum dolor set amit", "Center", 1) // get the third tab and add a checkbox control this.tab3 = this.tabs.getLayout(2) this.tab3.options = "VCenter" this.ckb = ui.addCheckbox(this.tab3, "Check me", "Secondary") } onChange(tab, index) { ui.showPopup( tab + " : Index " + index) } } Copy All Run Example - Swipeable tabs class Main extends App { onStart() { // Creates a layout with objects verticaly centered this.main = ui.addLayout( "main", "Linear", "FillXY,VCenter") this.main.backColor = "#e0e0e0" // Initialize tabs names array var tabs = ["Tab 1", "Tab 2", "Tab 3"] // Adds a tab component to the main layout and passing the `swipeable` option // to enable swiping gesture this.tabs = ui.addTabs( this.main, tabs, "Swipeable", 0.8, 0.8) // Handle tab changes this.tabs.setOnChange( this.onChange ) // get the first tab and add a text control this.tab1 = this.tabs.getLayout(0) this.tab1.options = "VCenter" this.tab1.backColor = "yellow" this.txt = ui.addText(this.tab1, " --- Swipe to the left", "Center", 1) // get the second tab and add a button control. this.tab2 = this.tabs.getLayout(1) this.tab2.backColor = "green" // get the third tab and add a checkbox control this.tab3 = this.tabs.getLayout(2) this.tab3.backColor = "blue" } onChange(tab, index) { ui.showPopup( tab + " : Index " + index) } } Copy All Run Example - Open tabs dynamically class Main extends App { onStart() { // Set the primary and secondary theme colors ui.setThemeColor("#673ab7", "#ffc107") // Creates a layout with objects verticaly centered this.main = ui.addLayout("main", "Linear", "FillXY,VCenter") this.main.backColor = "#e0e0e0" // Initialize tabs names array with leading icons var tabs = [ ["favorite", "Favorites"], ["bluetooth", "Bluetooth"], ["wifi", "Connection"] ] // Adds a tab component to the main layout this.tabs = ui.addTabs(this.main, tabs, "Icon,Center,Primary", 0.8, 0.8) // Handle tab changes this.tabs.setOnChange( this.onChange ) // get the first tab and add a button control // to open the second tab by its index this.tab1 = this.tabs.getLayout(0) this.tab1.options = "VCenter" this.btn1 = ui.addButton(this.tab1, "Open next") this.btn1.setOnTouch(() => { this.tabs.showTabByIndex( 1 ) }) // get the second tab and add a button control // to open the last tab by its index this.tab2 = this.tabs.getLayout(1) this.tab2.options = "VCenter" this.btn2 = ui.addButton(this.tab2, "Open next", "Primary") this.btn2.setOnTouch(() => { this.tabs.showTabByIndex( 2 ) }) // get the third tab and add a button control // to open the first tab by its tab name this.tab3 = this.tabs.getLayout(2) this.tab3.options = "VCenter" this.btn3 = ui.addButton(this.tab3, "Open previous", "Secondary") this.btn3.setOnTouch(() => { this.tabs.showTab( "Favorites" ) }) } onChange(tab, index) { ui.showPopup( tab + " : Index " + index) } } Copy All Run Example - Icon only class Main extends App { onStart() { // Set the primary and secondary theme colors ui.setTheme( "dark" ) // Creates a layout with objects verticaly centered this.main = ui.addLayout("main", "Linear", "FillXY,VCenter") // Initialize tabs array with icons only var tabs = ["favorite", "person", "wifi"]; // Adds a tab component to the main layout this.tabs = ui.addTabs(this.main, tabs, "Icon", 1, 1) // Set the tab height to 40px this.tabs.tabHeight = 40; // Handle tab changes this.tabs.setOnChange( this.onChange ) // get the first tab and add a button control this.tab1 = this.tabs.getLayout(0) this.tab1.options = "VCenter" this.btn = ui.addButton(this.tab1, "Button", "Secondary", 0.5) // get the second tab and add a text control. this.tab2 = this.tabs.getLayout(1) this.tab2.options = "VCenter" this.txt = ui.addText(this.tab2, "Lorem ipsum dolor set amit", "Center", 1) // get the third tab and add a checkbox control this.tab3 = this.tabs.getLayout(2) this.tab3.options = "VCenter" this.ckb = ui.addCheckbox(this.tab3, "Check me", "Secondary") } onChange(tab, index) { ui.showPopup(tab + " : Index " + index, "Bottom") } } Copy All Run Example - Custom colors and sizes class Main extends App { onStart() { // Creates a layout with objects verticaly centered this.main = ui.addLayout("main", "Linear", "FillXY,VCenter") // Initialize tabs array with leading icons var tabs = [ ["favorite", "Favorites"], ["bluetooth", "Bluetooth"], ["wifi", "Connection"] ] // Adds a tab component to the main layout // add some styling to the backColor, textColor, iconColor, iconSize and indicatorColor this.tabs = ui.addTabs(this.main, tabs, "Icon", 0.8, 0.8) this.tabs.backColor = "#ffccbc" this.tabs.textColor = "#f4511e" this.tabs.iconColor = "#f4511e" this.tabs.iconSize = "1.5rem" this.tabs.indicatorColor = "#f4511e" } } Copy All Run Methods The following methods are available on the Tabs object: addTab( name, icon, index ) animate( anim, duration ) bringForward( zIndex ) destroy() getEnabled( index ) → Boolean getEnabledByName( name ) → Boolean getLayout( name ) → Object: Layout Component getLayoutIndex( layout ) → Number getPosition( options ) → Object gone() hide() removeTabByIndex( index ) removeTabByName( name ) sendBackward( zIndex ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setEnabled( index, value ) setEnabledByName( name, value ) setIcon( index, icon ) setIndicatorStyle( width, thickness, color, radius ) setMargins( left, top, right, bottom, mode ) setOnChange( callback ) setOnContextMenu( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSize( width, height ) setTabPadding( left, top, right, bottom, mode ) setTabs( tabs ) setTitleText( index, title ) show() showScrollButton( mode ) showTab( name ) showTabByIndex( index ) function( name , index ) function( text , index , event ) function( name , The )
ui/addText.htm := addText Back addText Hello World Content: - Properties - Methods Adds a text to your app. txt = ui.addText( parent, text, options, width, height ) → Object: Text Component Properties These are the setter and getter properties for the addText Component. absHeight absLeft absTop absWidth alignment backColor backImage bold border borderColor borderStyle color cornerRadius disabled ellipsize fontFile height isVisible italic left margins opacity options padding parent position rotation text textColor textSize textStyle top type underline variant verticalAlignment visibility width Example - Basic text control class Main extends App { onStart() { // Create a full screen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") var t = "This is the sample text to be displayed." // Add a text control to the main layout this.txt = ui.addText(this.main, t) // You can also add a callback handler when the text control is touch this.txt.setOnTouch( this.onTouch ) } onTouch() { ui.showPopup( "You touched the text!" ) } } Copy All Run Example - Heading variants class Main extends App { onStart() { // Create a full screen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") var t = "Lorem ipsum dolor sit amet, consectetur" // Heading ranges from H1 to H6 this.h1 = ui.addText( this.main, "Heading 1", "H1" ) this.h2 = ui.addText( this.main, "Heading 2", "H2" ) this.h3 = ui.addText( this.main, "Heading 3", "H3" ) this.h4 = ui.addText( this.main, "Heading 4", "H4" ) this.h5 = ui.addText( this.main, "Heading 5", "H5" ) this.h6 = ui.addText( this.main, "Heading 6", "H6" ) } } Copy All Run Example - Other variants class Main extends App { onStart() { // Create a full screen layout. this.main = ui.addLayout( "main", "Linear", "VCenter", 1, 1 ) var t = "Lorem ipsum dolor sit amet, consectetur" this.text = ui.addText( this.main, t, "body1" ) this.text = ui.addText( this.main, t, "body2" ) this.text = ui.addText( this.main, t, "subtitle1" ) this.text = ui.addText( this.main, t, "subtitle2" ) this.text = ui.addText( this.main, t, "overline" ) this.text = ui.addText( this.main, t, "button" ) this.text = ui.addText( this.main, t, "caption" ) } } Copy All Run Example - Alignments and colors class Main extends App { onStart() { // Create a full screen layout. this.main = ui.addLayout( "main", "Linear", "VCenter,FillXY") this.main.setChildMargins(0, 0.05) var t = "Lorem ipsum dolor sit amet, consectetur adipiscing elit" // Default is left this.txt1 = ui.addText( this.main, t, "body1,Left", 0.9 ) this.txt1.backColor = "#e0e0e0" // Center and color primary this.txt2 = ui.addText( this.main, t, "body1,Center,Primary", 0.9 ) this.txt2.backColor = "#e0e0e0" // Right and color secondary this.txt3 = ui.addText( this.main, t, "body1,Right,Secondary", 0.9) this.txt3.backColor = "#e0e0e0" // Bottom, Center with a textSecondary color this.txt4 = ui.addText( this.main, t, "body1,Center,Bottom,TextSecondary", 0.9, 0.1) this.txt4.backColor = "#e0e0e0" } } Copy All Run Example - Icons class Main extends App { onStart() { // Create a full screen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") this.main.setChildMargins(0, 0.05) // Add a settings icon this.txt1 = ui.addText(this.main, "settings", "Icon") this.txt1.setOnTouch( this.onTouch ) // Add a camera icon ui.addText(this.main, "add_a_photo", "Icon,TextSecondary") // Add a heart icon ui.addText(this.main, "favorite", "Icon,Secondary") // Add an android icon ui.addText(this.main, "android", "Icon,Primary") } onTouch() { ui.showPopup( "You touch the icon!" ) } } Copy All Run Example - Html formatted text class Main extends App { onStart() { // Create a full screen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Html formatted string var t = 'This text is formatted as html. h3 style="color:green;">This is a heading with color. /h3>' t += 'You can also add i>italize text /i> as well as span style="background-color:yellow;">text with styles /span>.' // Add text control to the main layout by passing `Html` option this.txt = ui.addText(this.main, t, "html") } } Copy All Run Methods The following methods are available on the Text object: animate( anim, duration ) bringForward( zIndex ) destroy() getHtml() → String getPosition( options ) → Object gone() hide() sendBackward( zIndex ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setHtml( html ) setMargins( left, top, right, bottom, mode ) setOnContextMenu( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSize( width, height ) setTextShadow( radius, dx, dy, color ) show() function( event ) function( event )
ui/addTextField.htm := addTextField Back addTextField Hello World Content: - Properties - Methods Add a textfield component into your app. tfd = ui.addTextField( parent, text, options, width, height ) → Object: TextField Component Collect inputs from users. Inputs can be a number, text, emails, passwords and more. Just pass the corresponding type into the options arguments to get your desired type of TextField. If you want a materialize date and time pickers, see DatePicker, TimePicker or DateTimePicker components. Properties These are the setter and getter properties for the addTextField Component. absHeight absLeft absTop absWidth autoFocus backColor backImage border borderColor borderStyle color cornerRadius disabled endAdornment error fontFile height helperText hint inputType isVisible label labelColor left margins maxRows minRows opacity options outlineColor padding parent placeholder position required rotation sizeVariant startAdornment stepIncrement text textColor textSize top type variant visibility width Example - Textfield variants class Main extends App { onStart() { // Creates a layout with objects verticaly centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") this.main.setChildMargins(0, 1, 0, 1, "rem") // Add a default textfield control to the main layout this.tfd1 = ui.addTextField( this.main ) this.tfd1.label = "Enter text" // Handle textfield value changes this.tfd1.setOnChange( this.onChange ) // Add a filled textfield control this.tfd2 = ui.addTextField(this.main, "", "Filled,Primary,Number") this.tfd2.label = "Enter number" this.tfd2.setOnChange( this.onChange ) // Add an outlined textfield control this.tfd3 = ui.addTextField(this.main, "", "Outlined,Secondary,Email") this.tfd3.label = "Enter email" this.tfd3.setOnChange( this.onChange ) this.popup = ui.showPopup( "" ) this.popup.hide() } onChange( value ) { this.popup.text = value this.popup.show() } } Copy All Run Example - Callbacks class Main extends App { onStart() { // Creates a layout with objects verticaly centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") this.main.setChildMargins(0.01, 0.01, 0.01, 0.05) // Add a default textfield control to the main layout this.tfd = ui.addTextField(this.main, "", "Outlined,Secondary") this.tfd.label = "Enter text" // Add a callback handler when the value changes this.tfd.setOnChange( this.onChange ) // Add a callback handler on submit event this.tfd.setOnEnter( this.onEnter ) // Add a button control to the main layout that will get the value // of the textfield when clicked this.btn = ui.addButton(this.main, "Get value", "Outlined,Secondary") this.btn.setOnTouch( this.btn_onTouch ) // Initialize a popup to display values this.popup = ui.showPopup( "" ) this.popup.hide() } onChange( value ) { this.popup.text = "Change : " + value this.popup.show() } onEnter( value ) { this.popup.text = "Enter : " + value this.popup.show() } btn_onTouch() { this.popup.text = "Value : " + this.tfd.text this.popup.show() } } Copy All Run Example - Multiline textfield class Main extends App { onStart() { // Creates a layout with objects verticaly centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Add a text control to the main layout this.txt = ui.addText(this.main, "This is a multiline type of TextField input", "Left", 0.8) this.txt.setMargins(0, 0, 0, 0.05) // Add a Multiline textfield control to the main layout this.tfd = ui.addTextField(this.main, "", "Outlined,Secondary,Multiline", 0.8) this.tfd.label = "Enter description" this.tfd.setRows(3, 6) } } Copy All Run Example - Advance textfield class Main extends App { onStart() { // Creates a layout with objects verticaly centered. this.main = ui.addLayout("main", "Linear", "VCenter,ScrollY,FillXY") this.main.setChildMargins(0.01, 0.01, 0.01, 0.01) // Start and end adornment ui.addText(this.main, "Click the eye icon to show password.", "Left", 0.7) this.tfd = ui.addTextField(this.main, "", "Outlined,Secondary,Password", 0.7) this.tfd.label = "Enter password" this.tfd.setStartAdornment("lock", "Icon") this.tfd.setEndAdornment("visibility_off", "Icon,Touchable") this.tfd.setEndAdornmentOnTouch( this.togglePasswordVisibility ) // Start Adornment text ui.addText(this.main, "Start text adornment", "Left,Overline", 0.7) this.tfd1 = ui.addTextField(this.main, "", "Outlined,Secondary,Number", 0.7) this.tfd1.label = "Enter mass" this.tfd1.setStartAdornment("KG", "Text") // Start Adornment icon ui.addText(this.main, "Start icon adornment", "Left,Overline", 0.7) this.tfd2 = ui.addTextField(this.main, "", "Outlined,Secondary", 0.7) this.tfd2.label = "Enter username" this.tfd2.setStartAdornment("person", "Icon") // End Adornment text ui.addText(this.main, "End text adornment", "Left,Overline", 0.7) this.tfd3 = ui.addTextField(this.main, "", "Outlined,Secondary,Number", 0.7) this.tfd3.label = "Enter amount" this.tfd3.setEndAdornment("$", "Text") // End Adornment icon ui.addText(this.main, "End icon adornment", "Left,Overline", 0.7) this.tfd4 = ui.addTextField(this.main, "", "Outlined,Secondary,Password", 0.7) this.tfd4.label = "Enter password" this.tfd4.setEndAdornment("lock", "Icon") } togglePasswordVisibility() { if(this.tfd.endAdornment == "visibility_off") { this.tfd.setEndAdornment("visibility_on", "icon,touchable") this.tfd.inputType = 'text' } else { this.tfd.setEndAdornment("visibility_off", "icon,touchable") this.tfd.inputType = 'password' } } } Copy All Run Methods The following methods are available on the TextField object: animate( anim, duration ) bringForward( zIndex ) destroy() getEndAdornment() → String getPosition( options ) → Object getStartAdornment() → String gone() hide() sendBackward( zIndex ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setEndAdornment( text, type ) setEndAdornmentOnTouch( callback ) setMargins( left, top, right, bottom, mode ) setOnChange( callback ) setOnContextMenu( callback ) setOnEnter( callback ) setOnFocus( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setRows( min, max ) setScale( x, y ) setSize( width, height ) setStartAdornment( text, type ) setStartAdornmentOnTouch( callback ) show() function( text ) function( event ) function( focus ) function( event )
ui/addTimePicker.htm := addTimePicker Back addTimePicker Hello World Content: - Properties - Methods Adds a time picker component to the app. tpk = ui.addTimePicker( time, options ) → Object: TimePicker Component Properties These are the setter and getter properties for the addTimePicker Component. format Example - Basic class Main extends App { onStart() { // Creates a layout with objects verticaly centered. this.main = ui.addLayout( "main", "Linear", "VCenter,ScrollY", 1, 1 ) // button to show time picker this.btn = ui.addButton( this.main, "Show Time Picker", "Outlined,Secondary", 0.2 ) this.btn.setOnTouch( this.showTimePicker ) // Initialize time picker this.tpk = ui.addTimePicker() this.tpk.setOnSelect( this.onSelect ) } showTimePicker() { // show time picker dialog this.tpk.show() } onSelect( value ) { console.log( value ) } } Copy All Run Methods The following methods are available on the TimePicker object: show( callback, format ) → Boolean function( value )
ui/addTreeView.htm := addTreeView Back addTreeView Hello World Content: - Properties - Methods Adds a TreeView component into your app. trv = ui.addTreeView( parent, list, options, width, height ) → Object: TreeView Component A tree view is best use in file system navigation. Properties These are the setter and getter properties for the addTreeView Component. absHeight absLeft absTop absWidth backColor backImage border borderColor borderStyle cornerRadius disabled fontFile height isVisible left list margins opacity options padding parent position rotation textColor textSize top type value visibility width Example - Items var items = { "Group 1": { "Item 1": "", "Item 2": "", "Item 3": "" }, "Group 2": { "Item 1": "", "Item 2": "", "Item 3": "" }, "Applications": { "Editor": "", "Productivity": "", "Social Media": { "TikTok": "", "YouTube": "", "Meta": { "Facebook": "", "Instagram": "", "Whatsapp": "", "Messenger": "" } } } } Copy All Run Example - Items with icons var items = { "Folders": { "Music": "music_note", "Photos": "photo", "Favorites": "favorite" } } Copy All Run Example - Basic TreeView class Main extends App { onStart() { // Create a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "Center,ScrollY,FillXY") // Initialize json object for the treeview items var items = { "Group 1": { "Item 1": "", "Item 2": "", "Item 3": "" }, "Group 2": { "Item 1": "", "Item 2": "", "Item 3": "" }, "Applications": { "Editor": "", "Productivity": "", "Social Media": { "TikTok": "", "YouTube": "", "Meta": { "Facebook": "", "Instagram": "", "Whatsapp": "", "Messenger": "" } } } } // Add a treeview component to the main layout this.trv = ui.addTreeView(this.main, items, "Primary") this.trv.setMargins(0, 5, 0, 0, "rem") // Add a callback handler when the treeview item is touched this.trv.setOnTouch( this.onTouch ) } onTouch(value, path) { ui.showPopup("Value: "+value + " Path: "+path) } } Copy All Run Methods The following methods are available on the TreeView object: addItem( name, obj ) animate( anim, duration ) bringForward( zIndex ) destroy() getItem( name ) → Object getPosition( options ) → Object gone() hide() sendBackward( zIndex ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setList( obj ) setMargins( left, top, right, bottom, mode ) setOnContextMenu( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSize( width, height ) show() function( event ) function( value , path )
ui/addWebView.htm := addWebView Back addWebView Hello World Content: - Properties - Methods Adds a webview into your app. web = ui.addWebView( parent, url, options, width, height ) → Object: WebView Component A webview is a component where you can display a website into your app layout. Properties These are the setter and getter properties for the addWebView Component. absHeight absLeft absTop absWidth backColor backImage blockUrls border borderColor borderStyle cornerRadius disabled document errorPage fontFile height html isVisible left margins opacity options padding parent position rotation textColor textSize textZoom top type url visibility width window Example - EnjineIO homepage class Main extends App { onStart() { // Create a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Create a webview and load the EnjineIO homepage this.web = ui.addWebView(this.main, "https://enjine.io/", "", 0.9, 0.9) // Add a callback handler when the website is loaded this.web.setOnLoad( this.onLoad ) } onLoad() { ui.showPopup( "Website is loaded!" ) } } Copy All Run Example - Call a function inside the webview class Main extends App { onStart() { // Create a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Create a webview and pass this.web = ui.addWebView(this.main, "", "", 0.9, 0.7) // Add a callback handler when the page is loaded this.web.setOnLoad( this.onLoad ) // Load a webpage from a string this.web.html = ' html>' + ' head>' + ' script>' + 'function callFunc( name ) {' + 'alert("Hi " + name + " webview!")' + '}' + ' \/script>' + ' \/head>' + ' body>' + ' h2>This is an html. \/h2>' + ' \/body>' + ' \/html>'; } onLoad() { // Call the function `callFunc` inside the webpage // when the page is loaded var x = this.web.window.callFunc( "John Doe" ) } } Copy All Run Example - Getting returned values from a function in a webview class Main extends App { onStart() { // Create a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Create a webview and pass this.web = ui.addWebView(this.main, "", "", 0.9, 0.7) // Add a callback handler when the page is loaded this.web.setOnLoad( this.onLoad ) // Load a webpage from a string this.web.html = ' html>' + ' head>' + ' script>' + 'function getProduct(num1, num2)' + '{' + 'return num1 * num2' + '}' + ' \/script>' + ' \/head>' + ' body>' + ' h2>Get some product here! \/h2>' + ' \/body>' + ' \/html>'; } onLoad() { // Call the function `getProduct` inside the webview // when the page is loaded and display the answer var prod = this.web.window.getProduct(2, 3) ui.showPopup( "The product is " + prod ) } } Copy All Run Example - Manipulate dom inside the webview class Main extends App { onStart() { this.loaded = false; // Create a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Create a webview and pass this.web = ui.addWebView(this.main, "", "", 0.7, 0.5) // Add a callback handler when the page is loaded this.web.setOnLoad( this.onLoad ) // Load a webpage from a string this.web.html = ' html>' + ' head>' + ' /head>' + ' body>' + ' h2 id="my-text">Hi from webview! /h2>' + ' /body>' + ' /html>'; // Add a button control to the main layout this.btn = ui.addButton(this.main, "Change background color") this.btn.setOnTouch( this.onTouch ) } onLoad() { this.loaded = true; } onTouch() { // Check first if webview is loaded if( this.loaded ) { // Get a reference to the document object of the webview const dom = this.web.document // or `const dom = this.web.window.document` // Set the background-color of the body to green dom.body.style.backgroundColor = "green" // Get a reference to the h2 element by its id let h2 = dom.getElementById("my-text") // Set the text h2.innerText = "New text from parent!" // Set the text color to white h2.style.color = "white" } else ui.showPopup( "Webview is not yet loaded!" ) } } Copy All Run Methods The following methods are available on the WebView object: animate( anim, duration ) bringForward( zIndex ) destroy() getPosition( options ) → Object gone() hide() sendBackward( zIndex ) setBorder( width, clr, style ) setCornerRadius( tl, tr, bl, br, mode ) setMargins( left, top, right, bottom, mode ) setOnContextMenu( callback ) setOnLoad( callback ) setOnTouch( callback ) setPadding( left, top, right, bottom, mode ) setPosition( left, top, mode ) setScale( x, y ) setSize( width, height ) show() function( event ) function( event )
ui/showColorPicker.htm := showColorPicker Back showColorPicker Hello World Content: - Properties - Methods Shows a color picker. lrp = ui.showColorPicker( value, options, ) → Object: ColorPicker Component Customize a color or choose from the presets of color carefully selected from Material Design Color Pallette. Properties These are the setter and getter properties for the showColorPicker Component. value Example - Basic class Main extends App { onStart() { // Create a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Add a button to the main layout this.btn = ui.addButton(this.main, "Show Popup", "Primary") // Add callback handler for `onTouch` event this.btn.setOnTouch( this.showColorPicker ) } showColorPicker() { // Show color picker dialog with `Alpha` option // to include alpha in the output format `#aarrggbb` ui.showColorPicker(null, "Alpha", this.onSelect) } onSelect( clr ) { ui.showPopup( clr ) } } Copy All Run Methods The following methods are available on the showColorPicker object: getValue() → String
ui/showDateTimePicker.htm := showDateTimePicker Back showDateTimePicker Hello World Content: - Methods Show a DateTimePicker where the user can select a date and time. dtp = ui.showDateTimePicker( callback, date, time, format ) → Object: DateTimePicker Component If you want a date picker only see DatePicker or if you want time picker only see TimePicker Example - DateTimePicker class Main extends App { onStart() { this.main = ui.addLayout( "main", "Linear", "VCenter", 1, 1 ) this.btn = ui.addButton( this.main, "Show Date Time Picker", "Primary" ) this.btn.setOnTouch( this.btn_onTouch ) } btn_onTouch() { ui.showDateTimePicker( this.onDateTime ) } onDateTime( val ) { ui.showPopup( val ) } } Copy All Run Methods The following methods are available on the showDateTimePicker object: setOnSelect( callback ) function( value )
ui/showPopover.htm := showPopover Back showPopover Hello World Content: - Properties Show a popover on any UI Components except Dialogs and Popups. ui.showPopover( parent, text, position, width, height ) → Object: Popover Component. Popover is very useful on showing additional info or displaying instructions especially when the control is click or hovered. Properties These are the setter and getter properties for the showPopover Component. backImage fontFile Example - Basic class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Creates a button control where to attached the popover this.btn = ui.addButton(this.main, "Show Popover") // Add a callback handler when the button is click this.btn.setOnTouch( this.onTouch ) } onTouch() { // Display a popover when the button is click ui.showPopover(this.btn, "This is a text to be displayed.") } } Copy All Run Example - Positioning class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout( "main", "Linear", "VCenter,Horizontal", 1, 1 ) var lay1 = ui.addLayout( this.main, "Linear", "VCenter", 0.5, 1 ) lay1.setChildMargins(0, 0.05) ui.addText(lay1, "Position on parent", "h5") var btn = ui.addButton(lay1, "Top-Left") btn.setOnTouch( function() { ui.showPopover(this, "This is a popover message", "tl,tl") } ) btn = ui.addButton(lay1, "Top-Center") btn.setOnTouch( function() { ui.showPopover(this, "This is a popover message", "tc,tl") } ) btn = ui.addButton(lay1, "Top-Right") btn.setOnTouch( function() { ui.showPopover(this, "This is a popover message", "tr,tl") } ) btn = ui.addButton(lay1, "Center-Left") btn.setOnTouch( function() { ui.showPopover(this, "This is a popover message", "cl,tl") } ) btn = ui.addButton(lay1, "Center-Center") btn.setOnTouch( function() { ui.showPopover(this, "This is a popover message", "cc,tl") } ) btn = ui.addButton(lay1, "Center-Right") btn.setOnTouch( function() { ui.showPopover(this, "This is a popover message", "cr,tl") } ) btn = ui.addButton(lay1, "Bottom-Left") btn.setOnTouch( function() { ui.showPopover(this, "This is a popover message", "bl,tl") } ) btn = ui.addButton(lay1, "Bottom-Center") btn.setOnTouch( function() { ui.showPopover(this, "This is a popover message", "bc,tl") } ) btn = ui.addButton(lay1, "Bottom-Right") btn.setOnTouch( function() { ui.showPopover(this, "This is a popover message", "br,tl") } ) var lay2 = ui.addLayout( this.main, "Linear", "VCenter", 0.5, 1 ) lay2.setChildMargins(0, 0.05) ui.addText(lay2, "Origin on popover", "h5") btn = ui.addButton(lay2, "Top-Left") btn.setOnTouch( function() { ui.showPopover(this, "This is a popover message", "tl,tl") } ) btn = ui.addButton(lay2, "Top-Center") btn.setOnTouch( function() { ui.showPopover(this, "This is a popover message", "tl,tc") } ) btn = ui.addButton(lay2, "Top-Right") btn.setOnTouch( function() { ui.showPopover(this, "This is a popover message", "tl,tr") } ) btn = ui.addButton(lay2, "Center-Left") btn.setOnTouch( function() { ui.showPopover(this, "This is a popover message", "tl", "cl") } ) btn = ui.addButton(lay2, "Center-Center") btn.setOnTouch( function() { ui.showPopover(this, "This is a popover message", "tl,cc") } ) btn = ui.addButton(lay2, "Center-Right") btn.setOnTouch( function() { ui.showPopover(this, "This is a popover message", "tl,cr") } ) btn = ui.addButton(lay2, "Bottom-Left") btn.setOnTouch( function() { ui.showPopover(this, "This is a popover message", "tl,bl") } ) btn = ui.addButton(lay2, "Bottom-Center") btn.setOnTouch( function() { ui.showPopover(this, "This is a popover message", "tl,bc") } ) btn = ui.addButton(lay2, "Bottom-Right") btn.setOnTouch( function() { ui.showPopover(this, "This is a popover message", "tl,br") } ) } } Copy All Run Example - Advanced class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout( "main", "Linear", "VCenter", 1, 1 ) // Creates a button where to attached the popover. this.btn = ui.addButton( this.main, "Show Popover" ) this.btn.setOnTouch( this.onTouch ) } onTouch() { // Display a custom popover when the button is click. // Create a layout with `null` parent to be pass into the popover var lay = ui.addLayout(null, "Linear", "VCenter,Left") lay.setChildMargins(0.1, 0.05, 0.1, 0.05) // you can add text ui.addText(lay, "Header", "h5") // you can add as many text as you can ui.addText(lay, "This is a very long text to display in this popover", "Left") // you can also add button ui.addButton(lay, "Outlined Button", "Outlined", "Secondary") // pass the layout into the `ui.showPopover` method ui.showPopover( this.btn, lay, "bl,tr") } } Copy All Run
ui/showPopup.htm := showPopup Back showPopup Hello World Content: - Properties - Methods Shows a popup into your app. pop = ui.showPopup( msg, options, duration, action ) → Object: Popup Component. Properties These are the setter and getter properties for the showPopup Component. duration text Example - Basic class Main extends App { onStart() { // Create a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Add button control to the main layout this.btn1 = ui.addButton(this.main, "Show Popup") // Add a callback handler when the button is touched this.btn1.setOnTouch( this.onTouch ) } onTouch() { // Display popup on the Top with transition Grow ui.showPopup("Hello from popup!") } } Copy All Run Example - Popups with transitions class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") this.main.setChildMargins(0, 0, 0, 0.02) // Adds first button to the main layout this.btn1 = ui.addButton(this.main, "Top Grow", "Primary") this.btn1.setOnTouch( this.onTouch1 ) // Adds second button to the main layout this.btn2 = ui.addButton(this.main, "Bottom and Slide", "Secondary") this.btn2.setOnTouch( this.onTouch2 ) } onTouch1() { // Display popup on the Top with transition Grow ui.showPopup("Hello world.", "Top,Grow") } onTouch2() { // Display popup on the Bottom with transition Slide in 1.5 seconds. ui.showPopup("Hello world.", "Bottom,Slide", 1500) } } Copy All Run Example - With Transition class Main extends App { onStart() { // Create a fullscreen layout with objects vertically centered this.layMain = ui.addLayout("main", "Linear", "VCenter,FillXY") // Add a button control to the main layout this.btn = ui.addButton(this.layMain, "Show Popup") // Add a callback handler when the button is touched this.btn.setOnTouch( this.showMessage ) } showMessage() { // Show a popup with additional action this.snackbar = ui.showPopup("Please login to continue", "Bottom,Center", "", "Login") // Add a callback handler when the action is touched this.snackbar.setOnAction( this.onAction ) } onAction() { // Hide the popup when the action button is click this.snackbar.hide() ui.showPopup("Login is click. Show login Page.") } } Copy All Run Methods The following methods are available on the showPopup object: getPosition() → Object hide() setOnAction( callback ) setOnClose( callback ) setPosition( vertical, horizontal ) show()
ui/showProgressDialog.htm := showProgressDialog Back showProgressDialog Hello World Content: - Properties - Methods Shows a progress dialog component into your app. prd = ui.showProgressDialog( text, options ) → Object: ProgressDialog Properties These are the setter and getter properties for the showProgressDialog Component. text Example - Progress Dialog class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Add a button to the main layout this.btn = ui.addButton(this.main, "Show Progress Dialog", "Outlined") // Add a callback handler when the button is click this.btn.setOnTouch( this.onTouch ) } onTouch() { // Show a progress dialog with `AutoCancel` the dismisses on backdrop click ui.showProgressDialog("Loading...", "AutoCancel") } } Copy All Run Example - Nocancel progress dialog class Main extends App { onStart() { // Creates a fullscreen layout with objects vertically centered. this.main = ui.addLayout("main", "Linear", "VCenter,FillXY") // Add a button to the main layout this.btn = ui.addButton(this.main, "Show Progress Dialog", "Outlined") // Add a callback handler when the button is click this.btn.setOnTouch( this.onTouch ) } onTouch() { // Show a progress dialog with `AutoCancel` the dismisses on backdrop click this.pdlg = ui.showProgressDialog("Loading...", "NoCancel") // hide the progress dialog after 2 seconds setTimeout( () => { this.pdlg.hide() ui.showPopup( "Progress dialog is close!" ) }, 2000) } } Copy All Run Methods The following methods are available on the showProgressDialog object: hide() setOnClose( callback ) show()
