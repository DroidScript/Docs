{
	"AddDrawer": {
		"desc": "AddDrawer adds layout as drawer on a given side. If the user swipes from this side to the other the layout will slide out",
		"isfunc": true,
		"name": "AddDrawer",
		"pNames": ["layout", "side", "width"],
		"pTypes": ["dso_lay", "str-left|right", "num_srw"],
		"shortDesc": "Adds a slide-able layout on given side."
	},
	"AddLayout": {
		"desc": "AddLayout adds a layout to the screen so that it is visible (if not hidden with SetVisibility)",
		"isfunc": true,
		"name": "AddLayout",
		"pNames": ["layout"],
		"pTypes": ["dso_lay"],
		"shortDesc": "Adds a layout to the app"
	},
	"Alert": {
		"desc": "Alert shows a simple text dialog with a colored title and a 'Ok' button to exit. If title was not given the dialog looks like a normal alert box.\nWithout the NoDim option the background behind the dialog will be darkened.",
		"isfunc": true,
		"name": "Alert",
		"pNames": ["message", "title", "options", "hue"],
		"pTypes": ["str", "str", "str-NoDim,NoFocus", "num_int--180..180"],
		"shortDesc": "Shows a popup message with an 'OK' button to exit"
	},
	"Animate": {
		"desc": "Animate calls a function repeatedly like setInterval() but with the current time (Date.getTime()) and the difference to the last call in milliseconds as parameter.\nwhen using _AddOptions( “NoDom” ); to cause a high performance you cannot use SetInterval but Animate.\n\ncomparison:\n\nnormal:\n\tsetInterval: about 242 calls per second\n\tapp.animate: about 217 calls per second\n\nwith “NoDom” option:\n\tsetInterval: error\n\tapp.Animate: up to 1000 calls per second",
		"isfunc": true,
		"name": "Animate",
		"pNames": ["callback", "fps"],
		"pTypes": [
			{
				"desc": "Callback",
				"isfunc": true,
				"name": "callback",
				"pNames": ["time", "dtime"],
				"pTypes": ["num_mls", "num_mls"],
				"shortDesc": "callback"
			},
			"num_int"
		],
		"shortDesc": "SetInterval equivalent used with 'NoDom' option"
	},
	"Broadcast": {
		"desc": "Broadcast is used for broadcasting messages between DroidScript apps.",
		"isfunc": true,
		"name": "Broadcast",
		"pNames": ["type", "message"],
		"pTypes": ["str-Exec", "str"],
		"shortDesc": "Used for broadcasting messages between DroidScript apps"
	},
	"BroadcastIntent": {
		"desc": "Send a broadcasting intent with a custom action.",
		"isfunc": true,
		"name": "BroadcastIntent",
		"pNames": ["action", "category", "data", "type", "extras", "options"],
		"pTypes": ["str-android action", "str", "str", "str", "str", "str"],
		"shortDesc": "Send broadcast intent"
	},
	"Call": {
		"desc": "Call is used to call the given phone number.",
		"isfunc": true,
		"name": "Call",
		"pNames": ["number"],
		"pTypes": ["str-number"],
		"shortDesc": "Calls a phone number"
	},
	"CheckLicense": {
		"desc": "CheckLicense checks if the app is licensed with Google Play.",
		"isfunc": true,
		"name": "CheckLicense",
		"pNames": ["key"],
		"pTypes": ["str"],
		"shortDesc": "Checks if app is licensed with Google Play"
	},
	"CheckPermission": {
		"desc": "CheckPermission checks whether the permission of a particular component has been granted.",
		"isfunc": true,
		"name": "CheckPermission",
		"pNames": ["type"],
		"pTypes": ["str-Camera|Storage|ExtSDcard|Network|..."],
		"retval": "bin",
		"shortDesc": "Checks if permission was granted"
	},
	"ChooseAccount": {
		"desc": "Opens an Android dialog and allows the user to select one of his registered Google/Gmail accounts or add one. The selected email address is returned as the first argument in the callback function.",
		"isfunc": true,
		"name": "ChooseAccount",
		"pNames": ["callback"],
		"pTypes": [
			{
				"desc": "callback",
				"isfunc": true,
				"name": "callback",
				"pNames": ["account"],
				"pTypes": ["str-email"],
				"shortDesc": "callback"
			}
		],
		"shortDesc": "Let the user choose an google account"
	},
	"ChooseContact": {
		"desc": "ChooseContact opens the Contacts app so that the user can select the name and either the phone number or email address of a user.",
		"isfunc": true,
		"name": "ChooseContact",
		"pNames": ["type", "callback"],
		"pTypes": ["str", {
				"desc": "Callback",
				"isfunc": true,
				"name": "callback",
				"pNames": ["name", "data"],
				"pTypes": ["str-Phone|Email", "str"],
				"shortDesc": "callback"
			}],
		"shortDesc": "Let the user choose an image"
	},
	"ChooseFile": {
		"desc": "ChooseFile opens a file picker for user to select a file.",
		"isfunc": true,
		"name": "ChooseFile",
		"pNames": ["message", "type", "callback"],
		"pTypes": ["str", "str-mimetype", {
				"desc": "Callback",
				"isfunc": true,
				"name": "callback",
				"pNames": ["path"],
				"pTypes": ["str_pth"],
				"shortDesc": "callback"
			}],
		"shortDesc": "Let the user choose a file"
	},
	"ChooseImage": {
		"desc": "ChooseImage opens the photo gallery for user to select an image.",
		"isfunc": true,
		"name": "ChooseImage",
		"pNames": ["options", "callback"],
		"pTypes": ["str-internal|external|", {
				"desc": "callback",
				"isfunc": true,
				"name": "callback",
				"pNames": ["path"],
				"pTypes": ["str_path"],
				"shortDesc": "callback"
			}],
		"shortDesc": "Let the user choose an image"
	},
	"ChooseWifi": {
		"desc": "ChooseWifi lets the user select a WiFi network in his range.\n\n**title1** and **title2** are the titles for the scanning and the selection process. They default to “Scanning” and “Select WiFi”.\n\nThe **callback** function returns the name and the ssid of the selected network.\n\nYou can set the _force_ option so that the dialog cannot be closed until the user has selected an item.\n\nFinally you can add extra items as pipe “|” separated string - ie. to add a default “[None]” entry to select no wifi network.",
		"isfunc": true,
		"name": "ChooseWifi",
		"pNames": ["title1", "title2", "callback", "options", "extra"],
		"pTypes": ["str", "str", {
				"desc": "callback function",
				"isfunc": true,
				"name": "callback",
				"pNames": ["ssid"],
				"pTypes": ["str"],
				"shortDesc": "callback"
			}, "str-force|large", "str_com-ssids"],
		"shortDesc": "Let the user choose a WiFi network."
	},
	"ClearCookies": {
		"desc": "ClearCookies clears the saved cookies for webviews or html apps. If session was not given, the latest one will be selected.",
		"isfunc": true,
		"name": "ClearCookies",
		"pNames": ["session"],
		"pTypes": ["?"],
		"shortDesc": "Clears saved web cookies"
	},
	"ClearData": {
		"desc": "ClearData deletes variables saved via app.Save*(). The file parameter is optional. If given, the specified file will be used, otherwise it will be located in the apps private Folder.",
		"isfunc": true,
		"name": "ClearData",
		"pNames": ["file"],
		"pTypes": ["str_pth"],
		"shortDesc": "Deletes app.Save*() storage."
	},
	"ClearValue": {
		"desc": "ClearValue deletes a variable saved via app.Save*(). The file parameter is optional. If given, the specified file will be used, otherwise it will be located in the apps private Folder.",
		"isfunc": true,
		"name": "ClearValue",
		"pNames": ["name", "file"],
		"pTypes": ["string", "str_pth"],
		"shortDesc": "Deletes a variable saved via app.Save*()"
	},
	"CloseDrawer": {
		"desc": "Closes the drawer layout on the given side with slide animation.",
		"isfunc": true,
		"name": "CloseDrawer",
		"pNames": ["side"],
		"pTypes": ["str-left|right"],
		"shortDesc": "Closes the drawer layout on the given side."
	},
	"CopyFile": {
		"desc": "CopyFile copies a file to a given destination. The target must locate to the actual target file, not the folder. An existing file will be overridden.",
		"isfunc": true,
		"name": "CopyFile",
		"pNames": ["source", "destination"],
		"pTypes": ["str_pth", "str_pth"],
		"shortDesc": "Copies a file to a given destination"
	},
	"CopyFolder": {
		"desc": "CopyFolder copies a folder to a given destination. If override is false and the folder already exists in the destination, it will not be copied.",
		"isfunc": true,
		"name": "CopyFolder",
		"pNames": ["source", "destination", "overwrite", "filter"],
		"pTypes": ["str_pth", "str_pth", "bin", "str-pattern"],
		"shortDesc": "Copies a folder to a given destination"
	},
	"CreateAudioRecorder": {
		"abbrev": "rec",
		"desc": "The AudioRecorder object can be used to listen for sound and record it to a file.\nAfter creation you have to define the recording file with the **SetFile** Method: <js>rec.SetFile( “/sdcard/demofile.wav” );</js>\nAfter that you can **Start** the recording: <js>rec.Start();</js>\nThe recorded audio will then be written to the specified file.\n\nFinally you can also **Stop** the recording: <js>rec.Stop();</js>",
		"isfunc": true,
		"name": "CreateAudioRecorder",
		"pNames": [],
		"pTypes": [],
		"retval": "AudioRecorder",
		"shortDesc": "Returns an AudioRecorder object",
		"subf": {
			"GetData": {
				"desc": "Returns a list of 320 frequency values.",
				"isfunc": true,
				"name": "GetData",
				"pNames": [],
				"pTypes": [],
				"retval": "lst-[frequencies:num_int]",
				"shortDesc": "Returns a list of frequency values."
			},
			"GetPeak": {
				"desc": "returns PMPO value (Peak music power output)",
				"isfunc": true,
				"name": "GetPeak",
				"pNames": [],
				"pTypes": [],
				"retval": "num_flt",
				"shortDesc": "Returns PMPO value."
			},
			"GetRMS": {
				"desc": "returns RMS value (Root Mean Square)",
				"isfunc": true,
				"name": "GetRMS",
				"pNames": [],
				"pTypes": [],
				"retval": "num_flt",
				"shortDesc": "returns RMS value"
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-AudioRecorder",
				"shortDesc": "Returns the control class name."
			},
			"Method": "#1023663567",
			"Pause": {
				"desc": "Pause the recording temporally.",
				"isfunc": true,
				"name": "Pause",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "Pause the recording."
			},
			"SetFile": {
				"desc": "Define the file where the recorder should record to.",
				"isfunc": true,
				"name": "SetFile",
				"pNames": ["file"],
				"pTypes": ["str_pth"],
				"shortDesc": "Define the recording file."
			},
			"SetFrequency": {
				"desc": "Set the Recording frequency to one of the possible values.",
				"isfunc": true,
				"name": "SetFrequency",
				"pNames": ["frequency"],
				"pTypes": ["num_int-8000|11025|22050|44100|48000"],
				"shortDesc": "Define the Recording frequency."
			},
			"Start": {
				"desc": "Start recording to the specified file.",
				"isfunc": true,
				"name": "Start",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "Start recording."
			},
			"Stop": {
				"desc": "Stop the audio recording.",
				"isfunc": true,
				"name": "Stop",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "Stop recording."
			}
		}
	},
	"CreateBluetoothList": {
		"abbrev": "btl",
		"desc": "CreateBluetoothList is an Android dialog which allows user to select a Bluetooth device from paired and discovered devices. You can also use @GetPairedBtDevices and @DiscoverBtDevices.",
		"isfunc": true,
		"name": "CreateBluetoothList",
		"pNames": ["filter"],
		"pTypes": ["?"],
		"retval": "BluetoothList",
		"shortDesc": "Returns a BluetoothList object with selectable list of paired and discovered Bluetooth devices",
		"subf": {
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-BluetoothList",
				"shortDesc": "Returns the control class name."
			},
			"SetOnTouch": {
				"desc": "Define a callback function that is called when the user touches the control.",
				"isfunc": true,
				"name": "SetOnTouch",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["name", "address"],
						"pTypes": ["str", "str"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": "Define a callback function for touch events."
			}
		}
	},
	"CreateBluetoothSerial": {
		"abbrev": "bls",
		"desc": "The CreateBluetoothSerial object is used for communicating with other Bluetooth devices.The 'Text' mode is set by default, but <b>int</b>eger and <b>hex</b>adecimal values can also be sent.",
		"isfunc": true,
		"name": "CreateBluetoothSerial",
		"pNames": ["mode"],
		"pTypes": ["str-Text|Int|Hex"],
		"retval": "BluetoothSerial",
		"shortDesc": "Communicate with other Bluetooth devices.",
		"subf": {
			"Clear": {
				"desc": "Clears the Bluetooth buffer stored in the serial connection.",
				"isfunc": true,
				"name": "Clear",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "Clears the Bluetooth buffer."
			},
			"Connect": {
				"desc": "Connect to a Bluetooth device via its name or address. The oppenent must have called bt.Listen before.",
				"isfunc": true,
				"name": "Connect",
				"pNames": ["name", "channel"],
				"pTypes": ["str", "?"],
				"shortDesc": "Connect a Bluetooth device."
			},
			"Disconnect": {
				"desc": "Disconnect your device from an eventually existant connection. Calls the OnDisconnect callback function on both devices.",
				"isfunc": true,
				"name": "Disconnect",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "Disconnect the Bluetooth connection."
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-BluetoothSerial",
				"shortDesc": "Returns the control class name."
			},
			"IsBluetoothEnabled": {
				"desc": "Returns a boolean indicating whether the Bluetooth is enabled or not.",
				"isfunc": true,
				"name": "IsBluetoothEnabled",
				"pNames": [],
				"pTypes": [],
				"retval": "bin",
				"shortDesc": "Returns whether Bluetooth is enabled."
			},
			"IsConnected": {
				"desc": "Returns a boolean indicating whether a Bluetooth connection exists to another device.",
				"isfunc": true,
				"name": "IsConnected",
				"pNames": [],
				"pTypes": [],
				"retval": "bin",
				"shortDesc": "Returns whether a Bluetooth connection exists."
			},
			"IsPaired": {
				"desc": "Returns a Boolean indicating whether the device was been paired with a particular bluetooth name.",
				"isfunc": true,
				"name": "IsPaired",
				"pNames": ["name"],
				"pTypes": ["str"],
				"retval": "bin",
				"shortDesc": "Check pairing status to another device."
			},
			"Listen": {
				"desc": "Listen to your serial connection for any incoming mesages by passing <i>true</i> as first argument, <s>or stop listening by passing false</s>. It has to be called before an other device can connect with yours via bt.Connect.",
				"isfunc": true,
				"name": "Listen",
				"pNames": ["enabled"],
				"pTypes": ["bin"],
				"shortDesc": "Listen <s>or stop listening</s> for incoming messages."
			},
			"Method": "#1023663567",
			"RequestEnable": {
				"desc": "If Bluetooth is disabled, shows an android dialog which asks the user to enable bluetooth connection. If granted, bluetooth will be enabled automatically. No callback fired.",
				"isfunc": true,
				"name": "RequestEnable",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "Ask user to enable Bluetooth."
			},
			"SetOnConnect": {
				"desc": "If the device has sent the connection request\n\tname is of type boolean (true if the connection was established successful)\n\tand address is your BluetoothSerial object\n\nif the device has received the connection request\n\tname is a string with the clients bluetooth name\n\tand address includes the bluetooth address.",
				"isfunc": true,
				"name": "SetOnConnect",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["name", "address"],
						"pTypes": ["str", "str"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnDisconnect": {
				"desc": "SetOnDisconnect will be called on both devices after disconnecting from an existing bluetooth connection.",
				"isfunc": true,
				"name": "SetOnDisconnect",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "Called after disconnecting from bluetooth connection."
			},
			"SetOnReceive": {
				"desc": "SetOnReceive is called automatically after data has been received via the Bluetooth serial connection.",
				"isfunc": true,
				"name": "SetOnReceive",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["data"],
						"pTypes": ["str"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": "Called after receiving Data via Bluetooth."
			},
			"SetSplitMode": {
				"desc": "Tells the serial listener how to split received data. Splitted data will result in multiple OnReceive calls.\np2 and p3 have different purposes for different modes:\n<style type='text/css'>th{align:center;}td{padding:0 10px 0 10px;}</style><table><tr><th>mode</th><th>p1</th><th>p2</th></tr><tr><td>Size</td><td>Size of one data package</td><td>-</td></tr><tr><td>End</td><td>Byte indicating end of data</td><td>-</td></tr><tr><td>Start-End</td><td>Byte indicating start of data</td><td>Byte indicating end of data</td></tr></table>",
				"isfunc": true,
				"name": "SetSplitMode",
				"pNames": ["mode", "p2", "p3"],
				"pTypes": ["str-End|Start-End|Size", "str|int", "str|int"],
				"shortDesc": "Specify how to split received data."
			},
			"SetTimeout": {
				"desc": "SetTimeout",
				"isfunc": true,
				"name": "SetTimeout",
				"pNames": ["milliseconds"],
				"pTypes": ["num_mls"],
				"shortDesc": ""
			},
			"Write": {
				"desc": "Send data over the serial Bluetooth connection to the other device.",
				"isfunc": true,
				"name": "Write",
				"pNames": ["data"],
				"pTypes": ["str"],
				"shortDesc": "Send data to connected device."
			}
		}
	},
	"CreateButton": {
		"abbrev": "btn",
		"desc": "Buttons created with the **CreateButton** method are used for interacting with the app. This is done by calling a callback function after clicking on the button. You can specify such a callback function with the **SetOnTouch** Method: <js>btn.SetOnTouch( btn\\_OnTouch );\n\nfunction btn\\_OnTouch() {\n\t_// your OnTouch code goes here_\n}</js>\n <h3>Styling</h3>\nYou can allow the button to auto-size by leaving out the dimensions or you can specify a **width** and **height** as decimal fractions. Setting the width and height to _-1_ whilst using the _“FillX”_ option will allow it to fill the layout width.\n\nYou can customize the visual look in many ways by either using one of the existing style **options** _“Alum”_ or _“Gray”_, or you can use _“Custom”_ and define a custom style with the **SetStyle** method.",
		"isfunc": true,
		"name": "CreateButton",
		"pNames": ["text", "width", "height", "options"],
		"pTypes": ["str", "num_srw", "num_srh", "str-FontAwesome,Html,SingleLine,Custom,NoPad,FillX|FillY|FillXY,Normal|Aluminium|Gray|Lego"],
		"retval": "Button",
		"shortDesc": "Creates a button control.",
		"subf": {
			"AdjustColor": "#1794786072",
			"ClearFocus": "#1362225380",
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetText": "#2387569276",
			"GetTextSize": "#2530918945",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-Button",
				"shortDesc": "Returns the control class name."
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetEllipsize": "#0897234673",
			"SetEnabled": "#1602385882",
			"SetFontFile": "#0197498372",
			"SetHtml": "#8753208754",
			"SetMargins": "#1741900074",
			"SetOnTouch": "#2398750419",
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetStyle": {
				"desc": "styling with custom option",
				"isfunc": true,
				"name": "SetStyle",
				"pNames": ["color1", "color2", "radius", "strokeClr", "strokeWidth", "shadow"],
				"pTypes": ["str_col", "str_col", "num_srw", "str_col", "num_int", "bin", "?"],
				"shortDesc": ""
			},
			"SetText": "#8207502354",
			"SetTextColor": "#0175303923",
			"SetTextShadow": "#1093247031",
			"SetTextSize": "#5019790423",
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreateCameraView": {
		"abbrev": "cam",
		"desc": "**CameraView**s are used to create a preview of the device camera.\nYou can use the “Front” option to show the front camera's preview.\n\nThe camera needs some time to initialize first.\nYou can define a callback function via **SetOnReady** which is called if the camera can be used.\nThere you have to to call the **StartPreview** function of the CameraView control to start the preview.",
		"isfunc": true,
		"name": "CreateCameraView",
		"pNames": ["width", "height", "options"],
		"pTypes": ["num_srw", "num_srh", "str-Front,CIF|QVGA|SVGA|VGA|XGA|UXGA"],
		"retval": "CameraView",
		"shortDesc": "Returns a CameraView object to access the device camera.",
		"subf": {
			"AdjustColor": "#1794786072",
			"AutoCapture": {
				"desc": "? take multiple pictures?",
				"isfunc": true,
				"name": "AutoCapture",
				"pNames": ["path", "file", "maxCount"],
				"pTypes": ["str_pth", "str_pth", "num_int"],
				"shortDesc": ""
			},
			"ClearFocus": "#1362225380",
			"FindFaces": {
				"desc": "finds faces",
				"isfunc": true,
				"name": "FindFaces",
				"pNames": ["max"],
				"pTypes": ["num_int"],
				"retval": "?",
				"shortDesc": ""
			},
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetCameraCount": {
				"desc": "?",
				"isfunc": true,
				"name": "GetCameraCount",
				"pNames": [],
				"pTypes": [],
				"retval": "num_int",
				"shortDesc": ""
			},
			"GetColorEffects": {
				"desc": "get available effects",
				"isfunc": true,
				"name": "GetColorEffects",
				"pNames": [],
				"pTypes": [],
				"retval": "str-none,mono,negative,solarize,sepia,positionterize,whiteboard,blackboard,aqua,vage-cold,point-blue,point-red-yellow,emboss,sketch,neon)",
				"shortDesc": ""
			},
			"GetHeight": "#2576212953",
			"GetImageHeight": {
				"desc": "GetImageHeight",
				"isfunc": true,
				"name": "GetImageHeight",
				"pNames": [],
				"pTypes": [],
				"retval": "num_srh",
				"shortDesc": ""
			},
			"GetImageWidth": {
				"desc": "GetImageWidth",
				"isfunc": true,
				"name": "GetImageWidth",
				"pNames": [],
				"pTypes": [],
				"retval": "num_srw",
				"shortDesc": ""
			},
			"GetLeft": "#1237814406",
			"GetMaxZoom": {
				"desc": "GetMaxZoom",
				"isfunc": true,
				"name": "GetMaxZoom",
				"pNames": [],
				"pTypes": [],
				"retval": "num",
				"shortDesc": ""
			},
			"GetParameters": {
				"desc": "?",
				"isfunc": true,
				"name": "GetParameters",
				"pNames": [],
				"pTypes": [],
				"retval": "str",
				"shortDesc": ""
			},
			"GetParent": "#3557841648",
			"GetPictureSizes": {
				"desc": "“w x h,w x h,...”",
				"isfunc": true,
				"name": "GetPictureSizes",
				"pNames": [],
				"pTypes": [],
				"retval": "str",
				"shortDesc": ""
			},
			"GetPixelData": {
				"desc": "get pixel data of given area",
				"isfunc": true,
				"name": "GetPixelData",
				"pNames": ["format", "left", "top", "width", "height"],
				"pTypes": ["str-rawbase64|pngbase64|jpgbase64", "num_orw", "num_orh", "num_orw", "num_orh"],
				"retval": "?",
				"shortDesc": ""
			},
			"GetPosition": "#1605064214",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-CameraView",
				"shortDesc": "Returns the control class name."
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"GetZoom": {
				"desc": "get curent zoom",
				"isfunc": true,
				"name": "GetZoom",
				"pNames": [],
				"pTypes": [],
				"retval": "num",
				"shortDesc": ""
			},
			"Gone": "#5528553362",
			"HasFlash": {
				"desc": "HasFlash",
				"isfunc": true,
				"name": "HasFlash",
				"pNames": [],
				"pTypes": [],
				"retval": "bin",
				"shortDesc": ""
			},
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsRecording": {
				"desc": "",
				"isfunc": true,
				"name": "IsRecording",
				"pNames": [],
				"pTypes": [],
				"retval": "bin",
				"shortDesc": ""
			},
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"MotionMosaic": {
				"desc": "?",
				"isfunc": true,
				"name": "MotionMosaic",
				"pNames": ["xtiles", "ytiles", "sensitivity", "minPeriod", "image"],
				"pTypes": ["?", "?", "?", "?", "?"],
				"shortDesc": ""
			},
			"Record": {
				"desc": "record for given time",
				"isfunc": true,
				"name": "Record",
				"pNames": ["file", "seconds"],
				"pTypes": ["str_pth", "num_sec"],
				"shortDesc": ""
			},
			"ReportColors": {
				"desc": "?",
				"isfunc": true,
				"name": "ReportColors",
				"pNames": ["list", "callback", "sampSize", "maxRate"],
				"pTypes": ["?", "?", "?", "?"],
				"shortDesc": ""
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorEffect": {
				"desc": "set effect",
				"isfunc": true,
				"name": "SetColorEffect",
				"pNames": ["effect"],
				"pTypes": ["str-none|mono|negative|solarize|sepia|positionterize|whiteboard|blackboard|aqua|vage-cold|point-blue|point-red-yellow|emboss|sketch|neon"],
				"shortDesc": ""
			},
			"SetColorFilter": "#1096996086",
			"SetDuplicateImage": {
				"desc": "? like SetPrevImg but multiple?",
				"isfunc": true,
				"name": "SetDuplicateImage",
				"pNames": ["image1", "image2"],
				"pTypes": ["dso_img", "dso_img"],
				"shortDesc": ""
			},
			"SetEnabled": "#1602385882",
			"SetFlash": {
				"desc": "SetFlash",
				"isfunc": true,
				"name": "SetFlash",
				"pNames": ["onoff"],
				"pTypes": ["bin"],
				"shortDesc": ""
			},
			"SetFocusMode": {
				"desc": "?",
				"isfunc": true,
				"name": "SetFocusMode",
				"pNames": ["mode"],
				"pTypes": ["str-Video", "?"],
				"shortDesc": ""
			},
			"SetMargins": "#1741900074",
			"SetOnFocus": {
				"desc": "?",
				"isfunc": true,
				"name": "SetOnFocus",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnMotion": {
				"desc": "?",
				"isfunc": true,
				"name": "SetOnMotion",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnPicture": {
				"desc": "?",
				"isfunc": true,
				"name": "SetOnPicture",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnReady": {
				"desc": "called when cam loaded",
				"isfunc": true,
				"name": "SetOnReady",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOrientation": {
				"desc": "? does nothing when tried",
				"isfunc": true,
				"name": "SetOrientation",
				"pNames": ["angle"],
				"pTypes": ["num_deg"],
				"shortDesc": ""
			},
			"SetPadding": "#1923105617",
			"SetParameter": {
				"desc": "?",
				"isfunc": true,
				"name": "SetParameter",
				"pNames": ["name", "value"],
				"pTypes": ["str", "all"],
				"shortDesc": ""
			},
			"SetPictureSize": {
				"desc": "set pixel size",
				"isfunc": true,
				"name": "SetPictureSize",
				"pNames": ["width", "height"],
				"pTypes": ["num_int", "num_int"],
				"shortDesc": ""
			},
			"SetPosition": "#1425862386",
			"SetPostRotation": {
				"desc": "? does nothing when tried",
				"isfunc": true,
				"name": "SetPostRotation",
				"pNames": ["angle"],
				"pTypes": ["num_deg"],
				"shortDesc": ""
			},
			"SetPreviewImage": {
				"desc": "? change preview to image?",
				"isfunc": true,
				"name": "SetPreviewImage",
				"pNames": ["image"],
				"pTypes": ["dso_img"],
				"shortDesc": ""
			},
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetSound": {
				"desc": "SetSound",
				"isfunc": true,
				"name": "SetSound",
				"pNames": ["enabled"],
				"pTypes": ["bin"],
				"shortDesc": ""
			},
			"SetVideoSize": {
				"desc": "set pixel size",
				"isfunc": true,
				"name": "SetVideoSize",
				"pNames": ["width", "height"],
				"pTypes": ["num_int", "num_int"],
				"shortDesc": ""
			},
			"SetVisibility": "#1004824195",
			"SetZoom": {
				"desc": "SetZoom",
				"isfunc": true,
				"name": "SetZoom",
				"pNames": ["level"],
				"pTypes": ["num"],
				"shortDesc": ""
			},
			"Show": "#1243391562",
			"StartPreview": {
				"desc": "start camera & preview on display,needed for flash",
				"isfunc": true,
				"name": "StartPreview",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Stop": {
				"desc": "stop camera",
				"isfunc": true,
				"name": "Stop",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"StopPreview": {
				"desc": "stop camera",
				"isfunc": true,
				"name": "StopPreview",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Stream": {
				"desc": "?",
				"isfunc": true,
				"name": "Stream",
				"pNames": ["ip", "port", "quality", "fps", "mtu"],
				"pTypes": ["str", "num_int", "num_prc", "num_int", "?"],
				"shortDesc": ""
			},
			"TakePicture": {
				"desc": "TakePicture",
				"isfunc": true,
				"name": "TakePicture",
				"pNames": ["file"],
				"pTypes": ["str_pth"],
				"shortDesc": ""
			},
			"Tween": "#2114624769"
		}
	},
	"CreateCheckBox": {
		"abbrev": "chk",
		"desc": "CheckBoxes can be used to let the user en- or disable specific options in your app. They consist of a ticker box on the left and a text label on the right side.\n\nIt is disabled by default, but you can enable it with the **SetChecked** method to change its initial state.\n\nUse the SetOnTouch method of the CheckBox object to define a function you want to be called when the CheckBox is touched. There you can read  the 'isChecked' parameter to get the current state of the CheckBox:",
		"isfunc": true,
		"name": "CreateCheckBox",
		"pNames": ["text", "width", "height", "options"],
		"pTypes": ["str", "num_srw", "num_srh", "?"],
		"retval": "CheckBox",
		"shortDesc": "Returns a CheckBox object.",
		"subf": {
			"AdjustColor": "#1794786072",
			"ClearFocus": "#1362225380",
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetChecked": {
				"desc": "",
				"isfunc": true,
				"name": "GetChecked",
				"pNames": [],
				"pTypes": [],
				"retval": "bin",
				"shortDesc": ""
			},
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetText": "#2387569276",
			"GetTextSize": "#2530918945",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-CheckBox",
				"shortDesc": "Returns the control class name."
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetChecked": {
				"desc": "",
				"isfunc": true,
				"name": "SetChecked",
				"pNames": ["checked"],
				"pTypes": ["bin"],
				"shortDesc": ""
			},
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"SetMargins": "#1741900074",
			"SetOnTouch": {
				"desc": "Define a callback function that is called when the user touches the control.",
				"isfunc": true,
				"name": "SetOnTouch",
				"pNames": ["callback"],
				"pTypes": [
                    {
            	        "desc": "callback function",
            	        "isfunc": true,
            	        "name": "callback",
            	        "pNames": ["isChecked"],
            	        "pTypes": ["bin"],
            	        "shortDesc": "callback"
                    }
				],
				"shortDesc": "Define a callback function for click event."
			},
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetText": "#8207502354",
			"SetTextColor": "#0175303923",
			"SetTextSize": "#5019790423",
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreateCodeEdit": {
		"abbrev": "cde",
		"desc": "CreateCodeEdit is a control for premium users which is like a TextEdit but it has advanced methods.",
		"isfunc": true,
		"name": "CreateCodeEdit",
		"pNames": ["text", "width", "height", "options"],
		"pTypes": ["str", "num_srw", "num_srh", "?"],
		"retval": "CodeEdit",
		"shortDesc": "Returns a CodeEdit object.",
		"subf": {
			"AdjustColor": "#1794786072",
			"ClearFocus": "#1362225380",
			"ClearHistory": {
				"desc": "clear actions for undo/redo",
				"isfunc": true,
				"name": "ClearHistory",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Copy": {
				"desc": "copy selected text",
				"isfunc": true,
				"name": "Copy",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Cut": {
				"desc": "cut selected text",
				"isfunc": true,
				"name": "Cut",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetCursorLine": {
				"desc": "GetCursorLine",
				"isfunc": true,
				"name": "GetCursorLine",
				"pNames": [],
				"pTypes": [],
				"retval": "num_int",
				"shortDesc": ""
			},
			"GetCursorPos": {
				"desc": "GetCursorPos",
				"isfunc": true,
				"name": "GetCursorPos",
				"pNames": [],
				"pTypes": [],
				"retval": "num_int",
				"shortDesc": ""
			},
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetLineStart": {
				"desc": "? from which line?",
				"isfunc": true,
				"name": "GetLineStart",
				"pNames": ["line"],
				"pTypes": ["num_int"],
				"retval": "num_int",
				"shortDesc": ""
			},
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetSelectedText": {
				"desc": "GetSelectedText",
				"isfunc": true,
				"name": "GetSelectedText",
				"pNames": [],
				"pTypes": [],
				"retval": "str",
				"shortDesc": ""
			},
			"GetSelectMode": {
				"desc": "GetSelectMode",
				"isfunc": true,
				"name": "GetSelectMode",
				"pNames": [],
				"pTypes": [],
				"retval": "bin",
				"shortDesc": ""
			},
			"GetText": "#2387569276",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-CodeEdit",
				"shortDesc": "Returns the control class name."
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"HighlightLine": {
				"desc": "HighlightLine",
				"isfunc": true,
				"name": "HighlightLine",
				"pNames": ["line"],
				"pTypes": ["num_int"],
				"shortDesc": ""
			},
			"InsertText": {
				"desc": "InsertText",
				"isfunc": true,
				"name": "InsertText",
				"pNames": ["text", "start", "end"],
				"pTypes": ["str", "num_int", "num_int"],
				"shortDesc": ""
			},
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"Paste": {
				"desc": "selected text",
				"isfunc": true,
				"name": "Paste",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Redo": {
				"desc": "redo undone action",
				"isfunc": true,
				"name": "Redo",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Replace": {
				"desc": "why theres no replace text arg?",
				"isfunc": true,
				"name": "Replace",
				"pNames": ["text"],
				"pTypes": ["str"],
				"shortDesc": ""
			},
			"ReplaceAll": {
				"desc": "",
				"isfunc": true,
				"name": "ReplaceAll",
				"pNames": ["text", "newText", "matchCase", "wholeWord"],
				"pTypes": ["str", "str", "bin", "bin"],
				"shortDesc": ""
			},
			"ReplaceText": {
				"desc": "ReplaceText",
				"isfunc": true,
				"name": "ReplaceText",
				"pNames": ["text", "start", "end"],
				"pTypes": ["str", "num_int", "num_int"],
				"shortDesc": ""
			},
			"Search": {
				"desc": "",
				"isfunc": true,
				"name": "Search",
				"pNames": ["text", "dir", "matchCase", "wholeWord"],
				"pTypes": ["str", "str-Up|Down|?", "bin", "bin"],
				"shortDesc": ""
			},
			"SelectAll": {
				"desc": "SelectAll",
				"isfunc": true,
				"name": "SelectAll",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetColorScheme": {
				"desc": "?",
				"isfunc": true,
				"name": "SetColorScheme",
				"pNames": ["scheme"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetCursorPos": {
				"desc": "SetCursorPos",
				"isfunc": true,
				"name": "SetCursorPos",
				"pNames": ["position"],
				"pTypes": ["num_int"],
				"shortDesc": ""
			},
			"SetEnabled": "#1602385882",
			"SetHtml": "#8753208754",
			"SetLanguage": {
				"desc": "?",
				"isfunc": true,
				"name": "SetLanguage",
				"pNames": ["ext"],
				"pTypes": ["str-.js,.java,.php,.c,.cpp,.cs,.rb,.m,.py,.txt"],
				"shortDesc": ""
			},
			"SetMargins": "#1741900074",
			"SetNavigationMethod": {
				"desc": "",
				"isfunc": true,
				"name": "SetNavigationMethod",
				"pNames": ["method"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetOnChange": "#2137502353",
			"SetOnDoubleTap": {
				"desc": "called when double pressed yoyo",
				"isfunc": true,
				"name": "SetOnDoubleTap",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnKey": {
				"desc": "called when device key pressed",
				"isfunc": true,
				"name": "SetOnKey",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["action", "keyname", "keycode", "?"],
						"pTypes": ["str-Down|Move|Up", "str-VOLUME_DOWN|VOLUME_UP|BACK|MENU", "num_int", "?"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSelection": {
				"desc": "SetSelection",
				"isfunc": true,
				"name": "SetSelection",
				"pNames": ["start", "stop"],
				"pTypes": ["num_int", "num_int"],
				"shortDesc": ""
			},
			"SetSelectMode": {
				"desc": "en/disable text selection",
				"isfunc": true,
				"name": "SetSelectMode",
				"pNames": ["onOff"],
				"pTypes": ["bin"],
				"shortDesc": ""
			},
			"SetSize": "#1296070870",
			"SetText": "#8207502354",
			"SetTextColor": "#1093247031",
			"SetTextSize": "#5019790423",
			"SetUseKeyboard": {
				"desc": "en/disable android standard keyboard",
				"isfunc": true,
				"name": "SetUseKeyboard",
				"pNames": ["onOff"],
				"pTypes": ["bin"],
				"shortDesc": ""
			},
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769",
			"Undo": {
				"desc": "undo action",
				"isfunc": true,
				"name": "Undo",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			}
		}
	},
	"CreateCrypt": {
		"abbrev": "crp",
		"desc": "CreateCrypt  component is used to encrypt or decrypt a string with a given key or create a hash of it.",
		"isfunc": true,
		"name": "CreateCrypt",
		"pNames": ["options"],
		"pTypes": ["?"],
		"retval": "Crypt",
		"shortDesc": "Returns a Crypt object to encrypt or decrypt a string with a given key or create a hash of it",
		"subf": {
			"Decrypt": {
				"desc": "decrypt text with key",
				"isfunc": true,
				"name": "Decrypt",
				"pNames": ["text", "password"],
				"pTypes": ["str", "str"],
				"retval": "str",
				"shortDesc": ""
			},
			"Encrypt": {
				"desc": "encrypt text with key",
				"isfunc": true,
				"name": "Encrypt",
				"pNames": ["text", "password"],
				"pTypes": ["str", "str"],
				"retval": "str",
				"shortDesc": ""
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-Crypt",
				"shortDesc": "Returns the control class name."
			},
			"Hash": {
				"desc": "one-way encryption",
				"isfunc": true,
				"name": "Hash",
				"pNames": ["text", "mode", "options"],
				"pTypes": ["str", "str-MD5|?", "?"],
				"shortDesc": ""
			},
			"Method": "#1023663567"
		}
	},
	"CreateDebug": {
		"abbrev": "dbg",
		"desc": "CreateDebug is used to show the console as overlay above the app in order to see the debug logs.",
		"isfunc": true,
		"name": "CreateDebug",
		"pNames": [],
		"pTypes": [],
		"retval": "Debug",
		"shortDesc": "Returns a Debug object."
	},
	"CreateDialog": {
		"abbrev": "dlg",
		"desc": "Custom dialogs appear on top of the app and thus can be used to show temporary information or collect data from the user. They are also useful for displaying configuration or settings controls.\n%cDialogs are resizeable and you can also change the look of them so that they fit in with the theme of your application.\n\nA custom dialog needs a layout to add the controls to. Use the @CreateLayout method of the **app** object to add a layout.<js>layDlg = app.CreateLayout( type, options );\ndlg.AddLayout( layDlg );</js>If you have added all your controls to the dialog layout you can use the **Show** method to show the dialog.\n\nNormally the user can cancel the dialog by pressing the _BACK_ button of the device, but you can disable that option by using the _“NoCancel”_ **option**. In order to close the dialog now, you have to call **Dismiss**.",
		"isfunc": true,
		"name": "CreateDialog",
		"pNames": ["title", "options"],
		"pTypes": ["str", "str-AutoCancel|NoCancel,NoTitle,NoFocus,NoDim,NoKeys,TouchModal,NoTouch"],
		"retval": "Dialog",
		"shortDesc": "Returns a Dialog object to display messages",
		"subf": {
			"AddLayout": {
				"desc": "AddLayout",
				"isfunc": true,
				"name": "AddLayout",
				"pNames": ["layout"],
				"pTypes": ["dso_lay"],
				"shortDesc": ""
			},
			"AdjustColor": "#1794786072",
			"ClearFocus": "#1362225380",
			"Dismiss": {
				"desc": "hide dialog",
				"isfunc": true,
				"name": "Dismiss",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"EnableBackKey": {
				"desc": "EnableBackKey",
				"isfunc": true,
				"name": "EnableBackKey",
				"pNames": ["enable"],
				"pTypes": ["bin"],
				"shortDesc": ""
			},
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-Dialog",
				"shortDesc": "Returns the control class name."
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"RemoveLayout": {
				"desc": "RemoveLayout",
				"isfunc": true,
				"name": "RemoveLayout",
				"pNames": ["layout"],
				"pTypes": ["dso_lay"],
				"shortDesc": ""
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"SetMargins": "#1741900074",
			"SetOnBack": {
				"desc": "called when device's back button pressed",
				"isfunc": true,
				"name": "SetOnBack",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnCancel": {
				"desc": "valled when dialog was cancelled",
				"isfunc": true,
				"name": "SetOnCancel",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnTouch": "#2088093920",
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetTitle": {
				"desc": "SetTitle",
				"isfunc": true,
				"name": "SetTitle",
				"pNames": ["title"],
				"pTypes": ["str"],
				"shortDesc": ""
			},
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreateDownloader": {
		"abbrev": "dwn",
		"desc": "The Downloader component can be used to download a file straight from the internet to your phone or tablet's local storage. You can download a file with the **Download** method which accepts a _source url_ and a _target directory_:<js>dwn.Download( srcFileUrl, targetDir );</js>Once the Download method has been called, it show a progress bar with the current download progress. But you can disable this behavior with the _“NoDialog”_ **option**.\n\nIf you want to know when the download process has finished (or failed) you can define a callback functioni with the **SetOnComplete** method:<js>dload.SetOnComplete( callback );</js>",
		"isfunc": true,
		"name": "CreateDownloader",
		"pNames": ["options"],
		"pTypes": ["str-NoDialog|Light"],
		"retval": "Downloader",
		"shortDesc": "Returns a Downloader object.",
		"subf": {
			"Download": {
				"desc": "Download file",
				"isfunc": true,
				"name": "Download",
				"pNames": ["url", "fldr", "name", "headers"],
				"pTypes": ["str_url", "str_pth", "str", "?"],
				"shortDesc": ""
			},
			"GetProgress": {
				"desc": "get current download progress",
				"isfunc": true,
				"name": "GetProgress",
				"pNames": [],
				"pTypes": [],
				"retval": "?",
				"shortDesc": ""
			},
			"GetSize": {
				"desc": "get target download size",
				"isfunc": true,
				"name": "GetSize",
				"pNames": [],
				"pTypes": [],
				"retval": "?",
				"shortDesc": ""
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-Downloader",
				"shortDesc": "Returns the control class name."
			},
			"IsComplete": {
				"desc": "return whether download compleated or not",
				"isfunc": true,
				"name": "IsComplete",
				"pNames": [],
				"pTypes": [],
				"retval": "bin",
				"shortDesc": ""
			},
			"Method": "#1023663567",
			"SetOnCancel": {
				"desc": "? called when download cancelled",
				"isfunc": true,
				"name": "SetOnCancel",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnComplete": {
				"desc": "called when download finished",
				"isfunc": true,
				"name": "SetOnComplete",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnDownload": {
				"desc": "?",
				"isfunc": true,
				"name": "SetOnDownload",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["path"],
						"pTypes": ["str_pth"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnError": {
				"desc": "called when error occurred while downloading",
				"isfunc": true,
				"name": "SetOnError",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["error"],
						"pTypes": ["str"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			}
		}
	},
	"CreateEmail": {
		"abbrev": "eml",
		"desc": "CreateEmail component allows user to send emails.",
		"isfunc": true,
		"name": "CreateEmail",
		"pNames": ["account", "password"],
		"pTypes": ["str-email", "str-password"],
		"retval": "Email",
		"shortDesc": "Returns an Email object for user to send emails",
		"subf": {
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-Email",
				"shortDesc": "Returns the control class name."
			},
			"Method": "#1023663567",
			"Receive": {
				"desc": "receive emails",
				"isfunc": true,
				"name": "Receive",
				"pNames": ["folder", "maxCount", "filter"],
				"pTypes": ["str_pth", "num_int", "?"],
				"shortDesc": ""
			},
			"Send": {
				"desc": "send email",
				"isfunc": true,
				"name": "Send",
				"pNames": ["subject", "body", "sender", "recipients", "attach"],
				"pTypes": ["str", "str", "str-email address", "str-email address", "str_pth"],
				"shortDesc": ""
			},
			"SetIMAP": {
				"desc": "for receiving messages",
				"isfunc": true,
				"name": "SetIMAP",
				"pNames": ["server", "port"],
				"pTypes": ["num_imap", "num_int-465 (SSL)"],
				"shortDesc": ""
			},
			"SetOnMessage": {
				"desc": "called when received message",
				"isfunc": true,
				"name": "SetOnMessage",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnStatus": {
				"desc": "",
				"isfunc": true,
				"name": "SetOnStatus",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["status"],
						"pTypes": ["str"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetSMTP": {
				"desc": "for sending messages",
				"isfunc": true,
				"name": "SetSMTP",
				"pNames": ["server", "port"],
				"pTypes": ["num_smtp", "num_int-993 (SSL)"],
				"shortDesc": ""
			}
		}
	},
	"CreateFile": {
		"abbrev": "fil",
		"desc": "Returns a File object.",
		"isfunc": true,
		"name": "CreateFile",
		"pNames": ["file", "mode"],
		"pTypes": ["str_pth", "str-r|w|rw"],
		"retval": "File",
		"shortDesc": "Returns a File object",
		"subf": {
			"Close": {
				"desc": "",
				"isfunc": true,
				"name": "Close",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"GetLength": {
				"desc": "length in bytes",
				"isfunc": true,
				"name": "GetLength",
				"pNames": [],
				"pTypes": [],
				"retval": "num_int",
				"shortDesc": ""
			},
			"GetPointer": {
				"desc": "GetPointer",
				"isfunc": true,
				"name": "GetPointer",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "GetPointer"
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-File",
				"shortDesc": "Returns the control class name."
			},
			"Method": "#1023663567",
			"ReadData": {
				"desc": "read len bytes from file",
				"isfunc": true,
				"name": "ReadData",
				"pNames": ["len", "mode"],
				"pTypes": ["num_int", "?"],
				"shortDesc": ""
			},
			"ReadNumber": {
				"desc": "returns whole contrastent as number",
				"isfunc": true,
				"name": "ReadNumber",
				"pNames": ["type"],
				"pTypes": ["?"],
				"retval": "num",
				"shortDesc": ""
			},
			"ReadText": {
				"desc": "return whole contrastent as text",
				"isfunc": true,
				"name": "ReadText",
				"pNames": ["type"],
				"pTypes": ["?"],
				"retval": "str",
				"shortDesc": ""
			},
			"ReadTextAsync": {
				"desc": "ReadTextAsync",
				"isfunc": true,
				"name": "ReadTextAsync",
				"pNames": ["type", "callback"],
				"pTypes": ["?", "?"],
				"shortDesc": "ReadTextAsync"
			},
			"Seek": {
				"desc": "jump to given byte",
				"isfunc": true,
				"name": "Seek",
				"pNames": ["offset"],
				"pTypes": ["num_int"],
				"shortDesc": ""
			},
			"SetLength": {
				"desc": "?",
				"isfunc": true,
				"name": "SetLength",
				"pNames": ["len"],
				"pTypes": ["num_int"],
				"shortDesc": ""
			},
			"Skip": {
				"desc": "skip a given number of bytes",
				"isfunc": true,
				"name": "Skip",
				"pNames": ["bytes"],
				"pTypes": ["num_int"],
				"shortDesc": ""
			},
			"WriteData": {
				"desc": "writes ? to file",
				"isfunc": true,
				"name": "WriteData",
				"pNames": ["data", "mode"],
				"pTypes": ["?", "?"],
				"shortDesc": ""
			},
			"WriteNumber": {
				"desc": "writes a number to file",
				"isfunc": true,
				"name": "WriteNumber",
				"pNames": ["data", "type"],
				"pTypes": ["num", "?"],
				"shortDesc": ""
			},
			"WriteText": {
				"desc": "writes text to file",
				"isfunc": true,
				"name": "WriteText",
				"pNames": ["data", "type"],
				"pTypes": ["num_int", "?"],
				"shortDesc": ""
			}
		}
	},
	"CreateGame": {
		"abbrev": "gam",
		"desc": "CreateGame automatically turns your app in game mode and adds a [CreateGameView.htm](GameView) control to it. It also applies various settings to your app such like the **orientation**, `ScreenMode(“Game”)` and `PreventScreenLock(true)`.\nYou can still access the GameView and the layout where it was added to via gam.game and gam.lay.",
		"isfunc": true,
		"name": "CreateGame",
		"pNames": ["file", "orient"],
		"pTypes": ["str_pth", "str-Portrait|Landscape"],
		"shortDesc": "CreateGame",
		"subf": {
			"game": {
				"desc": "game",
				"isfunc": false,
				"name": "game",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "game"
			},
			"lay": {
				"desc": "lay",
				"isfunc": false,
				"name": "lay",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "lay"
			}
		}
	},
	"CreateGameView": {
		"abbrev": "gmv",
		"desc": "CreateGameView",
		"isfunc": true,
		"name": "CreateGameView",
		"pNames": ["width", "height", "options"],
		"pTypes": ["?", "?", "?"],
		"shortDesc": "CreateGameView",
		"subf": {
			"AdjustColor": "#1794786072",
			"ClearFocus": "#1362225380",
			"Execute": {
				"desc": "Execute",
				"isfunc": true,
				"name": "Execute",
				"pNames": ["js"],
				"pTypes": ["?"],
				"shortDesc": "Execute"
			},
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "GetType"
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"SetFile": "#0897234673",
			"SetFrameRate": {
				"desc": "SetFrameRate",
				"isfunc": true,
				"name": "SetFrameRate",
				"pNames": ["fps"],
				"pTypes": ["?"],
				"shortDesc": "SetFrameRate"
			},
			"SetMargins": "#1741900074",
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreateImage": {
		"abbrev": "img",
        "desc": "Image controls can be used to display images such like png, jpg or gif.\nJust pass the file path and your're done.\n%c\nWithout the **width** and **height** dimensions the image will be shown without any scaling.\n<sample Original Size>\nIf you specify one of them and leave the other _null_, _-1_ or blank, it will be scaled so that the aspect ratio is kept.\n<sample Maintain Aspect>\nAnd if you specify both parameters it will be scaled to your wishes.<sample Stretched>\n\nIf you want images to depress like buttons if touched you can use the _“Button”_ **option**.<sample Button>\n\n<h3>Drawing on Images</h3>\nImages are also useful for drawing basic shapes and other images on it and therefore for creating dynamic animations or even basic games. To create an empty image you can pass _null_ as file parameter.\n\nThis way you can also specify a fixed pixel size to the image you can use the _“fix”_ **option** and pass values for the **pxw** and **pxh** parameters.<js>img = app.CreateImage( null, 0.8, 0.5, “fix”, 20, 20 );\nimg.DrawLine( 0, 0, 1, 1 );</js>\nIf you dislike the anti-alias effect you can apply the _“alias”_ **option** on a higher resolution image and draw a low-resolution image on it:\n<js>img2 = app.CreateImage( null, .8, .5, “alias” );\nimg2.DrawImage( img, 0, 0, 1, 1, 0 );</js>\nThere are a whole bunch of drawing methods defined here. Some of the were already used above. You can draw lines, rectangles, circles and other images, just to name a few. You can even draw a transformed image using an [https://open.gl/transformations](transformation matrix). Check out the **Draw\\*** methods in the method list below to get more details about all drawing functions.\n<sample Draw Shapes>\n<h3>Drawing on Images _fast_</h3>\nIf you have many draw operations to perform at runtime (ie. for games) you might want to disable the automatic canvas update after each Draw* call using the **SetAutoUpdate** method. To force the rendering now, you have to call **Update**.\n\nAnother way to increase the animation speed is using the _NoDom_ configuration. This will disable html and js Dom elements in your app that consume a lot of resources, but app functions can still be used.\nFor animations you can then use the **Animate** function of the app object which calls a function for a given amount per second. Note that the canvas still needs some time to refresh - so going over 60 fps makes no sense at all.\n<sample Advanced Clock Animating>",
		"isfunc": true,
		"name": "CreateImage",
		"pNames": ["file", "width", "height", "options", "pxw", "pxh"],
		"pTypes": ["str_pth", "num", "num", "str-fix,alias,px:use pixel values for size,Button:causes image to depress like a button when touched,ScaleCenter,async,FontAwesome,Resize,TouchThrough,Icon:allows loading of app icons,wallpaper", "num_pxl", "num_pxl"],
		"retval": "Image",
		"shortDesc": "Returns a Image object.",
		"subf": {
			"AdjustColor": "#1794786072",
			"Clear": {
				"desc": "clear wimage contrastent",
				"isfunc": true,
				"name": "Clear",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"ClearFocus": "#1362225380",
			"Draw": {
				"desc": "?",
				"isfunc": true,
				"name": "Draw",
				"pNames": ["func", "p1", "p2", "p3", "p4", "p5", "p6", "p7"],
				"pTypes": ["?", "?", "?", "?", "?", "?", "?", "?"],
				"shortDesc": ""
			},
			"DrawArc": {
				"desc": "DrawArc",
				"isfunc": true,
				"name": "DrawArc",
				"pNames": ["x1", "y1", "x2", "y2", "start", "sweep"],
				"pTypes": ["num", "num", "num", "num", "num_deg", "num_deg"],
				"shortDesc": ""
			},
			"DrawCircle": {
				"desc": "DrawCircle",
				"isfunc": true,
				"name": "DrawCircle",
				"pNames": ["x", "y", "radius"],
				"pTypes": ["num", "num", "num_deg"],
				"shortDesc": ""
			},
			"DrawFrame": {
				"desc": "DrawFrame",
				"isfunc": true,
				"name": "DrawFrame",
				"pNames": ["ms"],
				"pTypes": ["num_mls"],
				"shortDesc": "DrawFrame"
			},
			"DrawImage": {
				"desc": "DrawImage",
				"isfunc": true,
				"name": "DrawImage",
				"pNames": ["image", "x", "y", "w", "h", "angle", "mode"],
				"pTypes": ["dso_img", "num", "num", "num", "num", "num_deg", "str"],
				"shortDesc": ""
			},
			"DrawImageMtx": {
				"desc": "draw image using format matrix (list[9])",
				"isfunc": true,
				"name": "DrawImageMtx",
				"pNames": ["image", "matrix"],
				"pTypes": ["dso_img", "lst"],
				"shortDesc": ""
			},
			"DrawLine": {
				"desc": "DrawLine",
				"isfunc": true,
				"name": "DrawLine",
				"pNames": ["x1", "y1", "x2", "y2"],
				"pTypes": ["num", "num", "num", "num"],
				"shortDesc": ""
			},
			"DrawPoint": {
				"desc": "draw single pixel",
				"isfunc": true,
				"name": "DrawPoint",
				"pNames": ["x", "y"],
				"pTypes": ["num", "num"],
				"shortDesc": ""
			},
			"DrawRectangle": {
				"desc": "DrawRectangle",
				"isfunc": true,
				"name": "DrawRectangle",
				"pNames": ["x1", "y1", "x2", "y2"],
				"pTypes": ["num", "num", "num", "num"],
				"shortDesc": ""
			},
			"DrawSamples": {
				"desc": "draws a graph in relation to the range",
				"isfunc": true,
				"name": "DrawSamples",
				"pNames": ["data", "range"],
				"pTypes": ["lst-[data:num]", "num"],
				"shortDesc": ""
			},
			"DrawText": {
				"desc": "DrawText",
				"isfunc": true,
				"name": "DrawText",
				"pNames": ["txt", "x", "y"],
				"pTypes": ["str", "num", "num"],
				"shortDesc": ""
			},
			"Flatten": {
				"desc": "?",
				"isfunc": true,
				"name": "Flatten",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetName": {
				"desc": "return name set via SetName",
				"isfunc": true,
				"name": "GetName",
				"pNames": [],
				"pTypes": [],
				"retval": "str-name",
				"shortDesc": ""
			},
			"GetParent": "#3557841648",
			"GetPixelColor": {
				"desc": "[r,g,b] values between 0 and 255",
				"isfunc": true,
				"name": "GetPixelColor",
				"pNames": ["x", "y"],
				"pTypes": ["num", "num"],
				"retval": "lst-[red:num_int,green:num_int,blue:num_int]",
				"shortDesc": ""
			},
			"GetPixelData": {
				"desc": "",
				"isfunc": true,
				"name": "GetPixelData",
				"pNames": ["format", "left", "top", "width", "height"],
				"pTypes": ["str-rawbase64|pngbase64|jpgbase64", "num_int", "num_int", "num_int", "num_int"],
				"retval": "str-data",
				"shortDesc": ""
			},
			"GetPosition": "#1605064214",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-Image",
				"shortDesc": "Returns the control class name."
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"MeasureText": {
				"desc": "MeasureText",
				"isfunc": true,
				"name": "MeasureText",
				"pNames": ["txt"],
				"pTypes": ["str"],
                "retval": "obj-{ width:orw, height:orh }",
				"shortDesc": "MeasureText"
			},
			"Method": "#1023663567",
			"Move": {
				"desc": "?",
				"isfunc": true,
				"name": "Move",
				"pNames": ["x", "y"],
				"pTypes": ["num", "num"],
				"shortDesc": ""
			},
			"Reset": {
				"desc": "?",
				"isfunc": true,
				"name": "Reset",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Rotate": {
				"desc": "rotate image contrastent",
				"isfunc": true,
				"name": "Rotate",
				"pNames": ["angle", "pivX", "pivY"],
				"pTypes": ["num_deg", "num", "num"],
				"shortDesc": ""
			},
			"Save": {
				"desc": "",
				"isfunc": true,
				"name": "Save",
				"pNames": ["fileName", "quality"],
				"pTypes": ["str_pth", "num_prc"],
				"shortDesc": ""
			},
			"Scale": {
				"desc": "scale image contrastent",
				"isfunc": true,
				"name": "Scale",
				"pNames": ["x", "y"],
				"pTypes": ["num_fac", "num_fac"],
				"shortDesc": ""
			},
			"SetAlpha": {
				"desc": "alpha value between 0 and 255",
				"isfunc": true,
				"name": "SetAlpha",
				"pNames": ["alpha"],
				"pTypes": ["num_int"],
				"shortDesc": ""
			},
			"SetAutoUpdate": {
				"desc": "en/disable updating image after drawing",
				"isfunc": true,
				"name": "SetAutoUpdate",
				"pNames": ["onoff"],
				"pTypes": ["bin"],
				"shortDesc": ""
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColor": {
				"desc": "Fill the image with a specific color.",
				"isfunc": true,
				"name": "SetColor",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": ""
			},
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"SetFontFile": "#0197498372",
			"SetImage": {
				"desc": "set image from file or other image object",
				"isfunc": true,
				"name": "SetImage",
				"pNames": ["image", "width", "height", "options"],
				"pTypes": ["str_pth||dso_img", "num_srw", "num_srh", "str-rescale"],
				"shortDesc": ""
			},
			"SetLineWidth": {
				"desc": "set stroke width in pixels",
				"isfunc": true,
				"name": "SetLineWidth",
				"pNames": ["width"],
				"pTypes": ["num_int"],
				"shortDesc": ""
			},
			"SetMargins": "#1741900074",
			"SetMaxRate": {
				"desc": "delay between two OnTouch events",
				"isfunc": true,
				"name": "SetMaxRate",
				"pNames": ["milliseconds"],
				"pTypes": ["num_mls"],
				"shortDesc": ""
			},
			"SetName": {
				"desc": "change name",
				"isfunc": true,
				"name": "SetName",
				"pNames": ["name"],
				"pTypes": ["str"],
				"shortDesc": ""
			},
			"SetOnLoad": {
				"desc": "?",
				"isfunc": true,
				"name": "SetOnLoad",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnLongTouch": {
				"desc": "callen when object long pressed",
				"isfunc": true,
				"name": "SetOnLongTouch",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["self"],
						"pTypes": ["dso"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnTouch": "#2088093920",
			"SetOnTouchDown": {
				"desc": "called when finger comes down",
				"isfunc": true,
				"name": "SetOnTouchDown",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["event"],
						"pTypes": ["_even"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnTouchMove": {
				"desc": "called when finger was moved over screen",
				"isfunc": true,
				"name": "SetOnTouchMove",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["event"],
						"pTypes": ["_even"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnTouchUp": {
				"desc": "called when finger leaves screen",
				"isfunc": true,
				"name": "SetOnTouchUp",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["event"],
						"pTypes": ["_even"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetPadding": "#1923105617",
			"SetPaintColor": {
				"desc": "SetPaintColor",
				"isfunc": true,
				"name": "SetPaintColor",
				"pNames": ["colour"],
				"pTypes": ["str_col"],
				"shortDesc": ""
			},
			"SetPaintStyle": {
				"desc": "SetPaintStyle",
				"isfunc": true,
				"name": "SetPaintStyle",
				"pNames": ["style"],
				"pTypes": ["str-Fill|Line"],
				"shortDesc": ""
			},
			"SetPixelData": {
				"desc": "SetPixelData",
				"isfunc": true,
				"name": "SetPixelData",
				"pNames": ["data", "width", "height", "options"],
				"pTypes": ["?", "num", "num", "?"],
				"shortDesc": ""
			},
			"SetPixelMode": {
				"desc": "SetPixelMode",
				"isfunc": true,
				"name": "SetPixelMode",
				"pNames": ["onoff"],
				"pTypes": ["bin"],
				"shortDesc": ""
			},
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetTextSize": {
				"desc": "SetTextSize",
				"isfunc": true,
				"name": "SetTextSize",
				"pNames": ["size"],
				"pTypes": ["num"],
				"shortDesc": ""
			},
			"SetTouchable": "#2562918782",
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Skew": {
				"desc": "?",
				"isfunc": true,
				"name": "Skew",
				"pNames": ["x", "y"],
				"pTypes": ["num", "num"],
				"shortDesc": ""
			},
			"Transform": {
				"desc": "?",
				"isfunc": true,
				"name": "Transform",
				"pNames": ["matrix"],
				"pTypes": ["lst"],
				"shortDesc": ""
			},
			"Tween": "#2114624769",
			"Update": {
				"desc": "neccessary when using SetAutoUpdate(false)",
				"isfunc": true,
				"name": "Update",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			}
		}
	},
	"CreateLayout": {
		"abbrev": "lay",
		"desc": "Layouts are container objects which are used to visually organize graphical objects (controls), such as text, buttons and images on the screen. There are 3 types of layout: _**“Linear”**_, _**“Absolute”**_ and _**“Frame”**_.\n\nLayouts are transparent by default but you can set a background image which can be tiled or stretched to fill the layout. You can also set a background color or background gradient.\n\nYou can add child objects to the Layout using the AddChild function:\n<js>lay.AddChild( object );</js>\nThe alignment of chlld objects within a layout can be set by adding the **options** _“Left”_, _“Right”_, _“Bottom”_ and _“VCenter”_, by default objects will be aligned _“Top,Center”_.\n<h3>Linear Layouts</h3>\nLinear layouts are probably the most useful type and are used to organize controls in either the default _“Vertical”_ or _“Horizontal”_ direction on screen.\n<sample Vertical>\n<sample Horizontal>\nBy default Layouts will auto-size to wrap their contents but you have 3 more options as to how a layout sizes within it's parent: “FillX”, “FillY” and “FillXY”.\n<sample Combined>\n<h3>Frame Layouts</h3>\nFrame layouts are used to display objects in front or behind each other. Every time the **AddChild** function is called on a Frame layout, the child object is placed in a new layer in front of the previously added object at the top left of the frame.\n\nFrame Layouts are useful if you wish to do **animated Flips** or **Slides** to reveal layers of objects or use **transparency**.\n<sample Image Swap>\n<h3>Absolute Layouts</h3>\nAbsolute layouts ignore all alignment options and allow the absolute positioning of controls by calling the **SetPosition** and **SetSize** functions of each of the child objects. However, you are encouraged use linear layouts for most of your programs, unless it is _absolute_ly necessary.",
		"isfunc": true,
		"name": "CreateLayout",
		"pNames": ["type", "options"],
		"pTypes": ["str-Linear|Absolute|Frame", "str-TouchThrough,TouchSpy:spies on touch events to all children,Left|Top|Right|Bottom|Center|VCenter,Wrap,Horizontal|Vertical,FillX,FillY,FillXY"],
		"retval": "Layout",
		"shortDesc": "Returns a Layout object.",
		"subf": {
			"AddChild": {
				"desc": "adds a DS control to the layout",
				"isfunc": true,
				"name": "AddChild",
				"pNames": ["child", "order"],
				"pTypes": ["dso", "?"],
				"shortDesc": ""
			},
			"AdjustColor": "#1794786072",
			"Animate": {
				"desc": "animates the layout",
				"isfunc": true,
				"name": "Animate",
				"pNames": ["type", "callback", "time"],
				"pTypes": ["str-Flip|FadeIn|FadeOut|CrossFade|SlideFromLeft|ScaleFromLeft|SlideToLeft|ScaleToLeft|SlideFromRight|ScaleFromRight|SlideToRight|ScaleToRight|SlideFromTop|ScaleFromTop|SlideToTop|ScaleToTop|SlideFromBottom|ScaleFromBottom|SlideToBottom|ScaleToBottom", {
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}, "num_mls"],
				"shortDesc": ""
			},
			"ChildToFront": {
				"desc": "brings a child to front before all other",
				"isfunc": true,
				"name": "ChildToFront",
				"pNames": ["child"],
				"pTypes": ["dso"],
				"shortDesc": ""
			},
			"ClearFocus": "#1362225380",
			"DestroyChild": {
				"desc": "DestroyChild",
				"isfunc": true,
				"name": "DestroyChild",
				"pNames": ["child"],
				"pTypes": ["dso"],
				"shortDesc": ""
			},
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetChildOrder": {
				"desc": "",
				"isfunc": true,
				"name": "GetChildOrder",
				"pNames": ["child"],
				"pTypes": ["dso"],
				"retval": "num_int",
				"shortDesc": ""
			},
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-Layout",
				"shortDesc": "Returns the control class name."
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"RemoveChild": {
				"desc": "RemoveChild",
				"isfunc": true,
				"name": "RemoveChild",
				"pNames": ["child"],
				"pTypes": ["dso"],
				"shortDesc": ""
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"SetGravity": {
				"desc": "?",
				"isfunc": true,
				"name": "SetGravity",
				"pNames": ["gravity"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetMargins": "#1741900074",
			"SetOnChildChange": {
				"desc": "?",
				"isfunc": true,
				"name": "SetOnChildChange",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnLongTouch": {
				"desc": "callen when object long pressed",
				"isfunc": true,
				"name": "SetOnLongTouch",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["self"],
						"pTypes": ["dso"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnTouch": "#2088093920",
			"SetOnTouchDown": {
				"desc": "called when finger comes down",
				"isfunc": true,
				"name": "SetOnTouchDown",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["event"],
						"pTypes": ["_even"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnTouchMove": {
				"desc": "called when finger was moved over screen",
				"isfunc": true,
				"name": "SetOnTouchMove",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["event"],
						"pTypes": ["_even"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnTouchUp": {
				"desc": "called when finger leaves screen",
				"isfunc": true,
				"name": "SetOnTouchUp",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["event"],
						"pTypes": ["_even"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOrientation": {
				"desc": "change layout orientation",
				"isfunc": true,
				"name": "SetOrientation",
				"pNames": ["orient"],
				"pTypes": ["str-Default|Portrait|Landscape"],
				"shortDesc": ""
			},
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetTouchable": "#2562918782",
			"SetTouchThrough": {
				"desc": "SetTouchThrough",
				"isfunc": true,
				"name": "SetTouchThrough",
				"pNames": ["through"],
				"pTypes": ["?"],
				"shortDesc": "SetTouchThrough"
			},
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreateList": {
		"abbrev": "lst",
		"desc": "If you want to display many dataset of the same structure you might consider using the **List** object.\n The List object supports multi-line list items and can show icons. Multi-line items are created by dividing each list item up using the _':'_ (colon) character. If you need to use a colon character in your item text then use this character sequence: _“^c^”_.\nYou can have one icon and some body text using the following formats:\n\n_“title : icon”\n“title : body : icon”\n“title : body : extra : icon”_\n\nAlternatively you can use the **AddItem** method which accepts _title_, _body_ and _icon_ as parameters to generically build up your list.\n\nYou can specify your own icon file for example “Img/MyIcon.png”, or one of the special built-in icons using the following key words: _“folder”_, _“audiofolder”_, _“photofolder”_, _“videofolder”_, _“audio”_, _“photo”_, _“video”_ and _“playlist”_.\n<sample Title + Icon>\n<sample Title + Body>\nYou can use the **SetOnTouch** and **SetOnLongTouch** methods to define a function you want to be called when a list item is selected. The selected item title, body, type and index are passed into your OnTouch callback function as parameters.\n<sample Simple>\nYou can change the look of a List using the **SetBackColor** and **SetTextColor** functions on the list object. You can also set a background image/pattern or background gradient for the List using the **SetBackground** and **SetBackGradient** functions.\n<sample Gray on White>\nYou can also create lists items that look like buttons by using one of the following options: “AlumButton”, “GreenButton”, “OrangeButton”.\n<sample Orange Buttons>\nOr create lists with Gradient backgrounds like this:<sample Gradient Background>",
		"isfunc": true,
		"name": "CreateList",
		"pNames": ["list", "width", "height", "options"],
		"pTypes": ["str", "num_srw", "num_srh", "str-Expand,Menu,html,FontAwesome,Normal,WhiteGrad|AlumButton|GreenButton|OrangeButton"],
		"retval": "List",
		"shortDesc": "Returns a List object.",
		"subf": {
			"AddItem": {
				"desc": "",
				"isfunc": true,
				"name": "AddItem",
				"pNames": ["title", "body", "image"],
				"pTypes": ["str", "str", "str_pth"],
				"shortDesc": ""
			},
			"AdjustColor": "#1794786072",
			"ClearFocus": "#1362225380",
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetHeight": "#2576212953",
			"GetItem": {
				"desc": "get item data by title",
				"isfunc": true,
				"name": "GetItem",
				"pNames": ["title"],
				"pTypes": ["str"],
				"retval": "?",
				"shortDesc": ""
			},
			"GetItemByIndex": {
				"desc": "GetItemByIndex",
				"isfunc": true,
				"name": "GetItemByIndex",
				"pNames": ["index"],
				"pTypes": ["num_int"],
				"retval": "?",
				"shortDesc": ""
			},
			"GetLeft": "#1237814406",
			"GetLength": {
				"desc": "GetLength",
				"isfunc": true,
				"name": "GetLength",
				"pNames": [],
				"pTypes": [],
				"retval": "num_int",
				"shortDesc": ""
			},
			"GetList": {
				"desc": "get full list data",
				"isfunc": true,
				"name": "GetList",
				"pNames": ["delim"],
				"pTypes": ["str"],
				"retval": "?",
				"shortDesc": ""
			},
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetTextSize": "#2530918945",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-List",
				"shortDesc": "Returns the control class name."
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"InsertItem": {
				"desc": "InsertItem",
				"isfunc": true,
				"name": "InsertItem",
				"pNames": ["index", "title", "body", "image"],
				"pTypes": ["num_int", "str", "str", "str_pth"],
				"shortDesc": ""
			},
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"RemoveAll": {
				"desc": "RemoveAll",
				"isfunc": true,
				"name": "RemoveAll",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"RemoveItem": {
				"desc": "RemoveItem",
				"isfunc": true,
				"name": "RemoveItem",
				"pNames": ["title"],
				"pTypes": ["str"],
				"shortDesc": ""
			},
			"RemoveItemByIndex": {
				"desc": "RemoveItemByIndex",
				"isfunc": true,
				"name": "RemoveItemByIndex",
				"pNames": ["index"],
				"pTypes": ["num_int"],
				"shortDesc": ""
			},
			"ScrollToItem": {
				"desc": "ScrollToItem",
				"isfunc": true,
				"name": "ScrollToItem",
				"pNames": ["title", "body"],
				"pTypes": ["str", "str"],
				"shortDesc": ""
			},
			"ScrollToItemByIndex": {
				"desc": "ScrollToItemByIndex",
				"isfunc": true,
				"name": "ScrollToItemByIndex",
				"pNames": ["index"],
				"pTypes": ["num_int"],
				"shortDesc": ""
			},
			"SelectItem": {
				"desc": "SelectItem",
				"isfunc": true,
				"name": "SelectItem",
				"pNames": ["title", "body", "scroll"],
				"pTypes": ["str", "str", "bin"],
				"shortDesc": ""
			},
			"SelectItemByIndex": {
				"desc": "SelectItemByIndex",
				"isfunc": true,
				"name": "SelectItemByIndex",
				"pNames": ["index", "scroll"],
				"pTypes": ["num_int", "bin"],
				"shortDesc": ""
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetColumnWidths": {
				"desc": "?",
				"isfunc": true,
				"name": "SetColumnWidths",
				"pNames": ["icon", "title", "body", "mode"],
				"pTypes": ["?", "str", "str", "?"],
				"shortDesc": ""
			},
			"SetDivider": {
				"desc": "",
				"isfunc": true,
				"name": "SetDivider",
				"pNames": ["height", "colour"],
				"pTypes": ["num_pxl", "str_col"],
				"shortDesc": ""
			},
			"SetEllipsize": "#0897234673",
			"SetEllipsize1": {
				"desc": "Will cause the element titles to be broken with ... at the start or the end if it cannot fit in the control.",
				"isfunc": true,
				"name": "SetEllipsize1",
				"pNames": ["mode"],
				"pTypes": ["str-start|end"],
				"shortDesc": "Auto-crop titles to fit in control."
			},
			"SetEllipsize2": {
				"desc": "Will cause the element bodys to be broken with ... at the start or the end if it cannot fit in the control.",
				"isfunc": true,
				"name": "SetEllipsize2",
				"pNames": ["mode"],
				"pTypes": ["str-start|end"],
				"shortDesc": "Auto-crop bodys to fit in control."
			},
			"SetEnabled": "#1602385882",
			"SetFontFile": "#0197498372",
			"SetHiTextColor1": {
				"desc": "?",
				"isfunc": true,
				"name": "SetHiTextColor1",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": ""
			},
			"SetHiTextColor2": {
				"desc": "?",
				"isfunc": true,
				"name": "SetHiTextColor2",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": ""
			},
			"SetIconMargins": {
				"desc": "icon borders",
				"isfunc": true,
				"name": "SetIconMargins",
				"pNames": ["left", "top", "right", "bottom", "mode"],
				"pTypes": ["num_srw", "num_srh", "num_srw", "num_srh", "?"],
				"shortDesc": ""
			},
			"SetIconSize": {
				"desc": "SetIconSize",
				"isfunc": true,
				"name": "SetIconSize",
				"pNames": ["size", "mode"],
				"pTypes": ["?", "?"],
				"shortDesc": ""
			},
			"SetItem": {
				"desc": "SetItem",
				"isfunc": true,
				"name": "SetItem",
				"pNames": ["title", "newTitle", "newBody", "newImage"],
				"pTypes": ["str", "str", "str", "str_pth"],
				"shortDesc": ""
			},
			"SetItemByIndex": {
				"desc": "SetItemByIndex",
				"isfunc": true,
				"name": "SetItemByIndex",
				"pNames": ["index", "newTitle", "newBody", "newImage"],
				"pTypes": ["num_int", "str", "str", "str_pth"],
				"shortDesc": ""
			},
			"SetList": {
				"desc": "SetList",
				"isfunc": true,
				"name": "SetList",
				"pNames": ["list", "delim"],
				"pTypes": ["str_com", "str"],
				"shortDesc": ""
			},
			"SetMargins": "#1741900074",
			"SetOnLongTouch": {
				"desc": "callen when object long pressed",
				"isfunc": true,
				"name": "SetOnLongTouch",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["self"],
						"pTypes": ["dso"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnTouch": "#2398750419",
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetTextColor": "#0175303923",
			"SetTextColor1": {
				"desc": "?",
				"isfunc": true,
				"name": "SetTextColor1",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": ""
			},
			"SetTextColor2": {
				"desc": "?",
				"isfunc": true,
				"name": "SetTextColor2",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": ""
			},
			"SetTextMargins": {
				"desc": "change position from current",
				"isfunc": true,
				"name": "SetTextMargins",
				"pNames": ["left", "top", "right", "bottom", "mode", "options"],
				"pTypes": ["num_srw", "num_srh", "num_srw", "num_srh", "?", "?"],
				"shortDesc": ""
			},
			"SetTextShadow": "#1093247031",
			"SetTextShadow1": {
				"desc": "?",
				"isfunc": true,
				"name": "SetTextShadow1",
				"pNames": ["radius", "dx", "dy", "color"],
				"pTypes": ["num_deg", "num_int", "num_int", "str_col"],
				"shortDesc": ""
			},
			"SetTextShadow2": {
				"desc": "?",
				"isfunc": true,
				"name": "SetTextShadow2",
				"pNames": ["radius", "dx", "dy", "color"],
				"pTypes": ["num_deg", "num_int", "num_int", "str_col"],
				"shortDesc": ""
			},
			"SetTextSize": "#5019790423",
			"SetTextSize1": {
				"desc": "?",
				"isfunc": true,
				"name": "SetTextSize1",
				"pNames": ["size", "mode"],
				"pTypes": ["num", "?"],
				"shortDesc": ""
			},
			"SetTextSize2": {
				"desc": "?",
				"isfunc": true,
				"name": "SetTextSize2",
				"pNames": ["size", "mode"],
				"pTypes": ["num", "str"],
				"shortDesc": ""
			},
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreateListDialog": {
		"abbrev": "ldg",
		"desc": "If you want a quick way to let the user select one or even multiple items of a given dataset you can use the ListDialog.\nUse the **SetOnTouch** method of the ListDialog object to set the name of a function you want to be called every times a list item is selected. The selected item is passed that function as parameter.\n<sample Basic>\nou can use the _“Multi”_ **option** to create a ListDialog with check boxes against each item. This allows multiple list items to be selected. An extra parameter isChecked is passed to the OnTouch callback function when a check box is checked or unchecked.<Example Multi>",
		"isfunc": true,
		"name": "CreateListDialog",
		"pNames": ["title", "list", "options"],
		"pTypes": ["str", "str", "str-Multi|?"],
		"retval": "ListDialog",
		"shortDesc": "Returns a ListDialog object.",
		"subf": {
			"AdjustColor": "#1794786072",
			"Dismiss": {
				"desc": "hide dialog",
				"isfunc": true,
				"name": "Dismiss",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-ListDialog",
				"shortDesc": "Returns the control class name."
			},
			"Hide": "#5372805812",
			"Method": "#1023663567",
			"SetBackColor": "#3857861627",
			"SetBackground": "#1239127541",
			"SetOnTouch": {
				"desc": "Define a callback function that is called when the user touches a list item.",
				"isfunc": true,
				"name": "SetOnTouch",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["title", "checked"],
						"pTypes": ["str", "bin"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": "Define a callback function for touch events."
			},
			"SetSize": "#1296070870",
			"SetTextColor": "#0175303923",
			"SetTitle": {
				"desc": "change dialog title",
				"isfunc": true,
				"name": "SetTitle",
				"pNames": ["title"],
				"pTypes": ["str"],
				"shortDesc": ""
			},
			"Show": "#1243391562"
		}
	},
	"CreateListView": {
		"abbrev": "lvw",
		"desc": "This method creates a full screen list dialog",
		"isfunc": true,
		"name": "CreateListView",
		"pNames": ["list", "title"],
		"pTypes": ["str", "str"],
		"retval": "ListView",
		"shortDesc": "Returns a ListView object.",
		"subf": {
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-ListView",
				"shortDesc": "Returns the control class name."
			},
			"Method": "#1023663567",
			"SetOnTouch": {
				"desc": "Define a callback function that is called when the user touches the control.",
				"isfunc": true,
				"name": "SetOnTouch",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["title"],
						"pTypes": ["str"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": "Define a callback function for touch events."
			},
			"Show": "#1243391562"
		}
	},
	"CreateLocator": {
		"abbrev": "loc",
		"desc": "The Locator component can be used to find your whereabouts on the planet using either your device's GPS or information from your network. The provider specifies where the locator should retreive its information from . “Network” means get the location from the cell network and wifi, “GPS” tells the locator to use the device's GPS\n\nTo Start the locator use the **Start** method. You can also stop it with **Stop**.\nTo get regulat updates about your current positino use the **SetOnChange** function.",
		"isfunc": true,
		"name": "CreateLocator",
		"pNames": ["type", "options"],
		"pTypes": ["str-GPS,Network", "?"],
		"retval": "Locator",
		"shortDesc": "Returns a Locator object.",
		"subf": {
			"GetBearingTo": {
				"desc": "Returns the approximate initial bearing in degrees East of true North when traveling along the shortest path between this location and the given location. ",
				"isfunc": true,
				"name": "GetBearingTo",
				"pNames": ["latitude", "longitude"],
				"pTypes": ["num", "num"],
				"retval": "num",
				"shortDesc": "Calculate bearing between current and given position."
			},
			"GetDistanceTo": {
				"desc": "Returns the approximate distance in meters between this location and the given location. ",
				"isfunc": true,
				"name": "GetDistanceTo",
				"pNames": ["latitude", "longitude"],
				"pTypes": ["num", "num"],
				"retval": "num",
				"shortDesc": "Calculate distance between current and given position in meters."
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-Locator",
				"shortDesc": "Returns the control class name."
			},
			"Method": "#1023663567",
			"SetOnChange": {
				"desc": "Define a function called when some of the values changed.",
				"isfunc": true,
				"name": "SetOnChange",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["data"],
						"pTypes": ["obj-{ provider:str, latitude:num, longitude:num, speed:num, bearing:num, altitude:num, accuracy:num_met }"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetRate": {
				"desc": "Set Locator update frequency in seconds",
				"isfunc": true,
				"name": "SetRate",
				"pNames": ["rate"],
				"pTypes": ["num_sec"],
				"shortDesc": "Locator update frequency in seconds."
			},
			"Start": {
				"desc": "Start the locator.",
				"isfunc": true,
				"name": "Start",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "Start locator."
			},
			"Stop": {
				"desc": "Stop the locator.",
				"isfunc": true,
				"name": "Stop",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "Stop locator."
			}
		}
	},
	"CreateMediaPlayer": {
		"abbrev": "ply",
		"desc": "The MediaPlayer object can be used to play sound files from the phone or tablet.\nUse the SetFile method of the MediaPlayer object to set the sound file to play. Supported sound file types include .ogg and .mp3.\n\nWhen the sound file is ready for playback, the **OnReady** callback function will be called. Then you can start playing using the **Start** method.\nIf the sundtrack has finished playing, the **OnComplete** callback fill be called. All together you code could look like that:\n<sample Playing Audio>\nThe SeekTo method can be used to adjust the playback position by passing in the time in seconds. Passing in 0 will set the playback position to the beginning of the sound file.\n<js>player.SeekTo( 0 );</js>",
		"isfunc": true,
		"name": "CreateMediaPlayer",
		"pNames": [],
		"pTypes": [],
		"retval": "MediaPlayer",
		"shortDesc": "Returns a MediaPlayer object.",
		"subf": {
			"Close": {
				"desc": "",
				"isfunc": true,
				"name": "Close",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"GetDuration": {
				"desc": "",
				"isfunc": true,
				"name": "GetDuration",
				"pNames": [],
				"pTypes": [],
				"retval": "?",
				"shortDesc": ""
			},
			"GetPosition": "#1605064214",
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-MediaPlayer",
				"shortDesc": "Returns the control class name."
			},
			"IsLooping": {
				"desc": "",
				"isfunc": true,
				"name": "IsLooping",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"IsPlaying": {
				"desc": "",
				"isfunc": true,
				"name": "IsPlaying",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"IsReady": {
				"desc": "",
				"isfunc": true,
				"name": "IsReady",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Method": "#1023663567",
			"Pause": {
				"desc": "",
				"isfunc": true,
				"name": "Pause",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Play": {
				"desc": "Play given time in in seconds",
				"isfunc": true,
				"name": "Play",
				"pNames": ["from"],
				"pTypes": ["num_sec"],
				"shortDesc": ""
			},
			"SeekTo": {
				"desc": "SeekTo given time in seconds",
				"isfunc": true,
				"name": "SeekTo",
				"pNames": ["time"],
				"pTypes": ["num_flt"],
				"shortDesc": ""
			},
			"SetFile": {
				"desc": "SetFile",
				"isfunc": true,
				"name": "SetFile",
				"pNames": ["file"],
				"pTypes": ["str_pth"],
				"shortDesc": ""
			},
			"SetLooping": {
				"desc": "SetLooping mode",
				"isfunc": true,
				"name": "SetLooping",
				"pNames": ["loop"],
				"pTypes": ["bin"],
				"shortDesc": ""
			},
			"SetOnComplete": {
				"desc": "called when",
				"isfunc": true,
				"name": "SetOnComplete",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnReady": {
				"desc": "called when playing file finished",
				"isfunc": true,
				"name": "SetOnReady",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnSeekDone": {
				"desc": "?",
				"isfunc": true,
				"name": "SetOnSeekDone",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetVolume": {
				"desc": "SetVolume",
				"isfunc": true,
				"name": "SetVolume",
				"pNames": ["left", "right"],
				"pTypes": ["num_prc", "num_prc"],
				"shortDesc": ""
			},
			"Stop": {
				"desc": "",
				"isfunc": true,
				"name": "Stop",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			}
		}
	},
	"CreateMediaStore": {
		"abbrev": "med",
		"desc": "Returns a MediaStore object.",
		"isfunc": true,
		"name": "CreateMediaStore",
		"pNames": [],
		"pTypes": [],
		"retval": "MediaStore",
		"shortDesc": "Returns a MediaStore object.",
		"subf": {
			"GetAlbumArt": {
				"desc": "?",
				"isfunc": true,
				"name": "GetAlbumArt",
				"pNames": ["image", "id", "options"],
				"pTypes": ["?", "num_int", "?"],
				"retval": "?",
				"shortDesc": ""
			},
			"GetSongArt": {
				"desc": "?",
				"isfunc": true,
				"name": "GetSongArt",
				"pNames": ["image", "id", "options"],
				"pTypes": ["?", "num_int", "?"],
				"retval": "?",
				"shortDesc": ""
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-MediaStore",
				"shortDesc": "Returns the control class name."
			},
			"Method": "#1023663567",
			"QueryAlbums": {
				"desc": "?",
				"isfunc": true,
				"name": "QueryAlbums",
				"pNames": ["filter", "sort", "options"],
				"pTypes": ["str_sql", "?", "str-external", "?"],
				"shortDesc": ""
			},
			"QueryArtists": {
				"desc": "?",
				"isfunc": true,
				"name": "QueryArtists",
				"pNames": ["filter", "sort", "options"],
				"pTypes": ["str_sql", "?", "str-external", "?"],
				"shortDesc": ""
			},
			"QueryMedia": {
				"desc": "?",
				"isfunc": true,
				"name": "QueryMedia",
				"pNames": ["filter", "sort", "options"],
				"pTypes": ["str_sql", "str-artist|album|?", "str-external|?"],
				"shortDesc": ""
			},
			"SetOnAlbumsResult": {
				"desc": "?",
				"isfunc": true,
				"name": "SetOnAlbumsResult",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["result"],
						"pTypes": ["obj-[{id:num_int,album:str,artist:str,numSongs:num_int}]"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnArtistsResult": {
				"desc": "?",
				"isfunc": true,
				"name": "SetOnArtistsResult",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["result"],
						"pTypes": ["obj-[{id:num_int,artist:str,numAlbums:num_int,numTracks:num_int}]"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnMediaResult": {
				"desc": "?",
				"isfunc": true,
				"name": "SetOnMediaResult",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["result"],
						"pTypes": ["obj-[{title:str,album:str,albumID:num_int,artistId:num_int,artist:str,artistId:num_int,duration:num_mls,size:num_int-bytes,uri:str}]"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			}
		}
	},
	"CreateNetClient": {
		"abbrev": "net",
		"desc": "Returns a NetClient object.",
		"isfunc": true,
		"name": "CreateNetClient",
		"pNames": ["type"],
		"pTypes": ["str-TCP|Raw"],
		"retval": "NetClient",
		"shortDesc": "Returns a NetClient object.",
		"subf": {
			"AutoReceive": {
				"desc": "receive data automatically",
				"isfunc": true,
				"name": "AutoReceive",
				"pNames": ["server", "port", "mode"],
				"pTypes": ["str_url", "num_int", "?"],
				"shortDesc": ""
			},
			"Close": {
				"desc": "Close",
				"isfunc": true,
				"name": "Close",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "Close"
			},
			"Connect": {
				"desc": "Connect NetClient",
				"isfunc": true,
				"name": "Connect",
				"pNames": ["address", "port"],
				"pTypes": ["str_url", "num_int"],
				"shortDesc": ""
			},
			"Disconnect": {
				"desc": "Disconnect netClient",
				"isfunc": true,
				"name": "Disconnect",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"DownloadFile": {
				"desc": "?",
				"isfunc": true,
				"name": "DownloadFile",
				"pNames": ["file"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"GetBroadcastAddress": {
				"desc": "GetBroadcastAddress",
				"isfunc": true,
				"name": "GetBroadcastAddress",
				"pNames": [],
				"pTypes": [],
				"retval": "str",
				"shortDesc": ""
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-NetClient",
				"shortDesc": "Returns the control class name."
			},
			"IsConnected": {
				"desc": "return whether netClient is connected",
				"isfunc": true,
				"name": "IsConnected",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"IsEnabled": "#1744802827",
			"Method": "#1023663567",
			"ReceiveBytes": {
				"desc": "receive data",
				"isfunc": true,
				"name": "ReceiveBytes",
				"pNames": ["mode"],
				"pTypes": ["str-Int|Hex|?"],
				"retval": "str-data",
				"shortDesc": ""
			},
			"ReceiveDatagram": {
				"desc": "ReceiveDatagram",
				"isfunc": true,
				"name": "ReceiveDatagram",
				"pNames": ["mode", "port", "timeout"],
				"pTypes": ["str-Int|Hex|?", "num_int", "num"],
				"retval": "?",
				"shortDesc": ""
			},
			"ReceiveDatagrams": {
				"desc": "ReceiveDatagrams",
				"isfunc": true,
				"name": "ReceiveDatagrams",
				"pNames": ["port", "mode"],
				"pTypes": ["?", "?"],
				"shortDesc": "ReceiveDatagrams"
			},
			"ReceiveFile": {
				"desc": "ReceiveFile",
				"isfunc": true,
				"name": "ReceiveFile",
				"pNames": ["file", "wait"],
				"pTypes": ["str", "num"],
				"shortDesc": ""
			},
			"ReceiveText": {
				"desc": "ReceiveText",
				"isfunc": true,
				"name": "ReceiveText",
				"pNames": ["mode"],
				"pTypes": ["str-UTF-8|?"],
				"retval": "?",
				"shortDesc": ""
			},
			"SendBytes": {
				"desc": "SendBytes",
				"isfunc": true,
				"name": "SendBytes",
				"pNames": ["data", "mode"],
				"pTypes": ["str", "str-Int|Hex|?"],
				"shortDesc": ""
			},
			"SendDatagram": {
				"desc": "",
				"isfunc": true,
				"name": "SendDatagram",
				"pNames": ["data", "mode", "address", "port", "options"],
				"pTypes": ["?", "?", "?", "?", "?"],
				"shortDesc": ""
			},
			"SendText": {
				"desc": "SendText",
				"isfunc": true,
				"name": "SendText",
				"pNames": ["text", "mode"],
				"pTypes": ["str", "str-UTF-8|?"],
				"shortDesc": ""
			},
			"SetOnConnect": {
				"desc": "",
				"isfunc": true,
				"name": "SetOnConnect",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["connected"],
						"pTypes": ["bin"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnDownload": {
				"desc": "?",
				"isfunc": true,
				"name": "SetOnDownload",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnReceive": {
				"desc": "called when receivend some data",
				"isfunc": true,
				"name": "SetOnReceive",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetTimeout": {
				"desc": "set notification display. ticker display upon active, title on notification, sub text below title",
				"isfunc": true,
				"name": "SetTimeout",
				"pNames": ["seconds"],
				"pTypes": ["num_sec"],
				"shortDesc": ""
			},
			"WakeOnLan": {
				"desc": "WakeOnLan",
				"isfunc": true,
				"name": "WakeOnLan",
				"pNames": ["ip", "mac"],
				"pTypes": ["?", "?"],
				"shortDesc": "WakeOnLan"
			}
		}
	},
	"CreateNotification": {
		"abbrev": "ntf",
        "desc": "The Notification object can be used to put messages in the notification drawer. The _“AutoCancel”_ **option** will automatically dismiss the notificatin if the user touches it. _“FullScreen”_ tries to create a larger notification on the screen. And _“OnGoing”_ makes the Notification closeable by your app only.\n\nUse the SetMessage method to tell the object what to display\n<js>notify.SetMessage( ticker, title, text );</js>\nThe Notify method tells it to send the notification:\n<js>notify.Notify( id );</js>\nWhen the user touches your notification, your app will come to the front, even if it was not running.\n\nIf you use more than one notification, **app.GetNotifyId** can be used to check which notification was pressed by the user.",
		"isfunc": true,
		"name": "CreateNotification",
		"pNames": ["options"],
		"pTypes": ["str-Ongoing,AutoCancel,FullScreen"],
		"retval": "Notification",
		"shortDesc": "Returns a Notification object.",
		"subf": {
			"Cancel": {
				"desc": "Cancel a notification with a specific id.",
				"isfunc": true,
				"name": "Cancel",
				"pNames": ["id"],
				"pTypes": ["str"],
				"shortDesc": "Cancel a notification."
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-Notification",
				"shortDesc": "Returns the control class name."
			},
			"Method": "#1023663567",
			"Notify": {
				"desc": "Send the notification to the user.",
				"isfunc": true,
				"name": "Notify",
				"pNames": ["id"],
				"pTypes": ["str"],
				"shortDesc": "Send the notification."
			},
			"SetLargeImage": {
				"desc": "Set an image which will be displayed bigger than usual.",
				"isfunc": true,
				"name": "SetLargeImage",
				"pNames": ["image"],
				"pTypes": ["str_pth"],
				"shortDesc": "Set a large image in the notification."
			},
			"SetLights": {
				"desc": "Activate the device notification LEDs.",
				"isfunc": true,
				"name": "SetLights",
				"pNames": ["colour", "onMs", "offMs"],
				"pTypes": ["str_col", "num_mls", "num_mls"],
				"shortDesc": "Activate device notification LEDs."
			},
			"SetMessage": {
				"desc": "Set notification texts.",
				"isfunc": true,
				"name": "SetMessage",
				"pNames": ["ticker", "title", "text"],
				"pTypes": ["str", "str", "str"],
				"shortDesc": "Set notification texts."
			},
			"SetSmallImage": {
				"desc": "Set a small image in your notification.",
				"isfunc": true,
				"name": "SetSmallImage",
				"pNames": ["image"],
				"pTypes": ["str_pth"],
				"shortDesc": "Set a small image icon."
			}
		}
	},
	"CreateNxt": {
		"abbrev": "nxt",
		"desc": "Returns a Nxt object.",
		"isfunc": true,
		"name": "nxt",
		"pNames": [],
		"pTypes": [],
		"retval": "Nxt",
		"shortDesc": "Returns a Nxt object.",
		"subf": {
			"Beep": {
				"desc": "play tone with given frequency for a given time in milliseconds",
				"isfunc": true,
				"name": "Beep",
				"pNames": ["frequency", "duration"],
				"pTypes": ["num_hrz", "num_mls"],
				"shortDesc": ""
			},
			"Brake": {
				"desc": "stop feeding motors with power",
				"isfunc": true,
				"name": "Brake",
				"pNames": ["motors"],
				"pTypes": ["str-A|B|C"],
				"shortDesc": ""
			},
			"CheckConnection": {
				"desc": "check whether phone/tablet wa connected to the NXT",
				"isfunc": true,
				"name": "CheckConnection",
				"pNames": [],
				"pTypes": [],
				"retval": "bin",
				"shortDesc": ""
			},
			"Connect": {
				"desc": "Connects to the Bluetooth device",
				"isfunc": true,
				"name": "Connect",
				"pNames": ["name"],
				"pTypes": ["str"],
				"shortDesc": ""
			},
			"Disconnect": {
				"desc": "Disconnect NXT from Phone/Tablet",
				"isfunc": true,
				"name": "Disconnect",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Drive": {
				"desc": "commands NXT to drive motors",
				"isfunc": true,
				"name": "Drive",
				"pNames": ["motors", "power", "rotations", "options"],
				"pTypes": ["str-A|B|C", "num_prc", "num_flt", "?"],
				"shortDesc": ""
			},
			"FileFindFirst": {
				"desc": "?",
				"isfunc": true,
				"name": "FileFindFirst",
				"pNames": ["pattern"],
				"pTypes": ["?"],
				"retval": "?",
				"shortDesc": ""
			},
			"FileFindNext": {
				"desc": "?",
				"isfunc": true,
				"name": "FileFindNext",
				"pNames": ["handle"],
				"pTypes": ["?"],
				"retval": "?",
				"shortDesc": ""
			},
			"GetBtAddress": {
				"desc": "Returns Bluetooth address of connected NXT brick",
				"isfunc": true,
				"name": "GetBtAddress",
				"pNames": [],
				"pTypes": [],
				"retval": "str",
				"shortDesc": ""
			},
			"GetBtName": {
				"desc": "Returns Bluetooth name of connected NXT",
				"isfunc": true,
				"name": "GetBtName",
				"pNames": [],
				"pTypes": [],
				"retval": "str",
				"shortDesc": ""
			},
			"GetCurrentProgram": {
				"desc": "returns current running program name",
				"isfunc": true,
				"name": "GetCurrentProgram",
				"pNames": [],
				"pTypes": [],
				"retval": "str",
				"shortDesc": ""
			},
			"GetRotationCount": {
				"desc": "GetRotationCount",
				"isfunc": true,
				"name": "GetRotationCount",
				"pNames": ["motor"],
				"pTypes": ["str-A|B|C"],
				"retval": "num_int",
				"shortDesc": ""
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-Nxt",
				"shortDesc": "Returns the control class name."
			},
			"IsBluetoothEnabled": {
				"desc": "IsBluetoothEnabled",
				"isfunc": true,
				"name": "IsBluetoothEnabled",
				"pNames": [],
				"pTypes": [],
				"retval": "bin",
				"shortDesc": ""
			},
			"IsConnected": {
				"desc": "IsConnected",
				"isfunc": true,
				"name": "IsConnected",
				"pNames": [],
				"pTypes": [],
				"retval": "bin",
				"shortDesc": ""
			},
			"IsEnabled": "#1744802827",
			"IsMotorIdle": {
				"desc": "Checks if a motor is currently powered",
				"isfunc": true,
				"name": "IsMotorIdle",
				"pNames": ["motor"],
				"pTypes": ["str-A|B|C"],
				"shortDesc": ""
			},
			"IsPaired": {
				"desc": "",
				"isfunc": true,
				"name": "IsPaired",
				"pNames": ["name"],
				"pTypes": ["str"],
				"retval": "bin",
				"shortDesc": ""
			},
			"Method": "#1023663567",
			"PlaySoundFile": {
				"desc": "PlaySoundFile for given times",
				"isfunc": true,
				"name": "PlaySoundFile",
				"pNames": ["file", "repeat"],
				"pTypes": ["str_pth", "num_int"],
				"shortDesc": ""
			},
			"ReadColorSensor": {
				"desc": "ReadColorSensor with option: intensity value between 0 and 1023,without options: 1:black,2:blue,3:green,4:yellow,5:red,6:white",
				"isfunc": true,
				"name": "ReadColorSensor",
				"pNames": ["input", "mode"],
				"pTypes": ["num_int-1..4", "str-ColorDetect|LightSense|RedSense|GreenSense|BlueSense"],
				"retval": "num_int-1..6",
				"shortDesc": ""
			},
			"ReadDistanceSensor": {
				"desc": "ReadDistanceSensor in centimeters",
				"isfunc": true,
				"name": "ReadDistanceSensor",
				"pNames": ["input"],
				"pTypes": ["num_int-1..4"],
				"retval": "num_flt",
				"shortDesc": ""
			},
			"ReadLightSensor": {
				"desc": "ReadLightSensor -> value between 0 and 100",
				"isfunc": true,
				"name": "ReadLightSensor",
				"pNames": ["input", "active"],
				"pTypes": ["num_int-1..4", "bin"],
				"retval": "num_int",
				"shortDesc": ""
			},
			"ReadMail": {
				"desc": "ReadMail",
				"isfunc": true,
				"name": "ReadMail",
				"pNames": ["mailbox", "type", "remove"],
				"pTypes": ["num_int-1..10", "str-Text|Number|Logic", "bin"],
				"retval": "str",
				"shortDesc": ""
			},
			"ReadSoundSensor": {
				"desc": "ReadSoundSensor",
				"isfunc": true,
				"name": "ReadSoundSensor",
				"pNames": ["input", "mode"],
				"pTypes": ["num_int-1..4", "str-DB|DbA"],
				"retval": "num_flt",
				"shortDesc": ""
			},
			"ReadTouchSensor": {
				"desc": "ReadTouchSensor",
				"isfunc": true,
				"name": "ReadTouchSensor",
				"pNames": ["input"],
				"pTypes": ["num_int-1..4"],
				"retval": "bin",
				"shortDesc": ""
			},
			"RequestEnable": {
				"desc": "show enable bluetooth dialog when bluetooth disabled",
				"isfunc": true,
				"name": "RequestEnable",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Reset": {
				"desc": "Reset motors",
				"isfunc": true,
				"name": "Reset",
				"pNames": ["motors"],
				"pTypes": ["str-A|B|C"],
				"shortDesc": ""
			},
			"SendMail": {
				"desc": "SendMail",
				"isfunc": true,
				"name": "SendMail",
				"pNames": ["mailbox", "type", "message"],
				"pTypes": ["num_int-1..10", "str-Text|Number|Logic", "str||num_int"],
				"shortDesc": ""
			},
			"SetInvert": {
				"desc": "inverts direction of motor commands",
				"isfunc": true,
				"name": "SetInvert",
				"pNames": ["invert"],
				"pTypes": ["bin"],
				"shortDesc": ""
			},
			"SetLampColor": {
				"desc": "?",
				"isfunc": true,
				"name": "SetLampColor",
				"pNames": ["input", "colour"],
				"pTypes": ["num_int-1..4", "str_col"],
				"shortDesc": ""
			},
			"SetOnConnect": {
				"desc": "called when NXT has successfully connected via Bluetooth",
				"isfunc": true,
				"name": "SetOnConnect",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnConnected": {
				"desc": "called when NXT has successfully connected via Bluetooth",
				"isfunc": true,
				"name": "SetOnConnected",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnConnectEx": {
				"desc": "called when NXT has successfully connected via Bluetooth",
				"isfunc": true,
				"name": "SetOnConnectEx",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"ShowDevices": {
				"desc": "show paired NXT list to connect to one via bluetooth",
				"isfunc": true,
				"name": "ShowDevices",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"StartProgram": {
				"desc": "StartProgram",
				"isfunc": true,
				"name": "StartProgram",
				"pNames": ["name"],
				"pTypes": ["str_pth"],
				"shortDesc": ""
			},
			"Stop": {
				"desc": "Stop",
				"isfunc": true,
				"name": "Stop",
				"pNames": ["motors"],
				"pTypes": ["str-A|B|C"],
				"shortDesc": ""
			},
			"StopProgram": {
				"desc": "StopProgram",
				"isfunc": true,
				"name": "StopProgram",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"ToColorName": {
				"desc": "convert color integer got via ReadColorSensor to color name",
				"isfunc": true,
				"name": "ToColorName",
				"pNames": ["val"],
				"pTypes": ["num_int-1..6"],
				"retval": "str-black|blue|green|yellow|red|white",
				"shortDesc": ""
			}
		}
	},
	"CreateNxtRemote": {
		"abbrev": "nxtr",
		"desc": "Returns a NxtRemote object.",
		"isfunc": true,
		"name": "CreateNxtRemote",
		"pNames": [],
		"pTypes": [],
		"retval": "NxtRemote",
		"shortDesc": "Returns a NxtRemote object.",
		"subf": {
			"Beep": {
				"desc": "play tone with given frequency for a given time in milliseconds",
				"isfunc": true,
				"name": "Beep",
				"pNames": ["frequency", "duration"],
				"pTypes": ["num_hrz", "num_mls"],
				"shortDesc": ""
			},
			"Brake": {
				"desc": "stop feeding motors with power",
				"isfunc": true,
				"name": "Brake",
				"pNames": ["motors"],
				"pTypes": ["str-A|B|C"],
				"shortDesc": ""
			},
			"CheckConnection": {
				"desc": "check whether phone/tablet wa connected to the NXT",
				"isfunc": true,
				"name": "CheckConnection",
				"pNames": [],
				"pTypes": [],
				"retval": "bin",
				"shortDesc": ""
			},
			"Connect": {
				"desc": "Connects to the Bluetooth device",
				"isfunc": true,
				"name": "Connect",
				"pNames": ["name"],
				"pTypes": ["str"],
				"shortDesc": ""
			},
			"Disconnect": {
				"desc": "Disconnect NXT from Phone/Tablet",
				"isfunc": true,
				"name": "Disconnect",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Drive": {
				"desc": "commands NXT to drive motors",
				"isfunc": true,
				"name": "Drive",
				"pNames": ["motors", "power", "rotations", "options"],
				"pTypes": ["str-A|B|C", "num_prc", "num_flt", "?"],
				"shortDesc": ""
			},
			"FileFindFirst": {
				"desc": "?",
				"isfunc": true,
				"name": "FileFindFirst",
				"pNames": ["pattern"],
				"pTypes": ["?"],
				"retval": "?",
				"shortDesc": ""
			},
			"FileFindNext": {
				"desc": "?",
				"isfunc": true,
				"name": "FileFindNext",
				"pNames": ["handle"],
				"pTypes": ["?"],
				"retval": "?",
				"shortDesc": ""
			},
			"GetBtAddress": {
				"desc": "Returns Bluetooth address of connected NXT brick",
				"isfunc": true,
				"name": "GetBtAddress",
				"pNames": [],
				"pTypes": [],
				"retval": "str",
				"shortDesc": ""
			},
			"GetBtName": {
				"desc": "Returns Bluetooth name of connected NXT",
				"isfunc": true,
				"name": "GetBtName",
				"pNames": [],
				"pTypes": [],
				"retval": "str",
				"shortDesc": ""
			},
			"GetCurrentProgram": {
				"desc": "returns current running program name",
				"isfunc": true,
				"name": "GetCurrentProgram",
				"pNames": [],
				"pTypes": [],
				"retval": "str",
				"shortDesc": ""
			},
			"GetRotationCount": {
				"desc": "GetRotationCount",
				"isfunc": true,
				"name": "GetRotationCount",
				"pNames": ["motor"],
				"pTypes": ["str-A|B|C"],
				"retval": "num_int",
				"shortDesc": ""
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-Nxt",
				"shortDesc": "Returns the control class name."
			},
			"IsBluetoothEnabled": {
				"desc": "IsBluetoothEnabled",
				"isfunc": true,
				"name": "IsBluetoothEnabled",
				"pNames": [],
				"pTypes": [],
				"retval": "bin",
				"shortDesc": ""
			},
			"IsConnected": {
				"desc": "IsConnected",
				"isfunc": true,
				"name": "IsConnected",
				"pNames": [],
				"pTypes": [],
				"retval": "bin",
				"shortDesc": ""
			},
			"IsEnabled": "#1744802827",
			"IsMotorIdle": {
				"desc": "Checks if a motor is currently powered",
				"isfunc": true,
				"name": "IsMotorIdle",
				"pNames": ["motor"],
				"pTypes": ["str-A|B|C"],
				"shortDesc": ""
			},
			"IsPaired": {
				"desc": "",
				"isfunc": true,
				"name": "IsPaired",
				"pNames": ["name"],
				"pTypes": ["str"],
				"retval": "bin",
				"shortDesc": ""
			},
			"Method": "#1023663567",
			"PlaySoundFile": {
				"desc": "PlaySoundFile for given times",
				"isfunc": true,
				"name": "PlaySoundFile",
				"pNames": ["file", "repeat"],
				"pTypes": ["str_pth", "num_int"],
				"shortDesc": ""
			},
			"ReadColorSensor": {
				"desc": "ReadColorSensor with option: intensity value between 0 and 1023,without options: 1:black,2:blue,3:green,4:yellow,5:red,6:white",
				"isfunc": true,
				"name": "ReadColorSensor",
				"pNames": ["input", "mode"],
				"pTypes": ["num_int-1..4", "str-ColorDetect|LightSense|RedSense|GreenSense|BlueSense"],
				"retval": "num_int-1..6",
				"shortDesc": ""
			},
			"ReadDistanceSensor": {
				"desc": "ReadDistanceSensor in centimeters",
				"isfunc": true,
				"name": "ReadDistanceSensor",
				"pNames": ["input"],
				"pTypes": ["num_int-1..4"],
				"retval": "num_flt",
				"shortDesc": ""
			},
			"ReadLightSensor": {
				"desc": "ReadLightSensor -> value between 0 and 100",
				"isfunc": true,
				"name": "ReadLightSensor",
				"pNames": ["input", "active"],
				"pTypes": ["num_int-1..4", "bin"],
				"retval": "num_int",
				"shortDesc": ""
			},
			"ReadMail": {
				"desc": "ReadMail",
				"isfunc": true,
				"name": "ReadMail",
				"pNames": ["mailbox", "type", "remove"],
				"pTypes": ["num_int-1..10", "str-Text|Number|Logic", "bin"],
				"retval": "str|num",
				"shortDesc": ""
			},
			"ReadSoundSensor": {
				"desc": "ReadSoundSensor",
				"isfunc": true,
				"name": "ReadSoundSensor",
				"pNames": ["input", "mode"],
				"pTypes": ["num_int-1..4", "str-DB|DbA"],
				"retval": "num_flt",
				"shortDesc": ""
			},
			"ReadTouchSensor": {
				"desc": "ReadTouchSensor",
				"isfunc": true,
				"name": "ReadTouchSensor",
				"pNames": ["input"],
				"pTypes": ["num_int-1..4"],
				"retval": "bin",
				"shortDesc": ""
			},
			"RequestEnable": {
				"desc": "show enable bluetooth dialog when bluetooth disabled",
				"isfunc": true,
				"name": "RequestEnable",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Reset": {
				"desc": "Reset motors",
				"isfunc": true,
				"name": "Reset",
				"pNames": ["motors"],
				"pTypes": ["str-A|B|C"],
				"shortDesc": ""
			},
			"SendMail": {
				"desc": "SendMail",
				"isfunc": true,
				"name": "SendMail",
				"pNames": ["mailbox", "type", "message"],
				"pTypes": ["num_int-1..10", "str-Text|Number|Logic", "str||num_int"],
				"shortDesc": ""
			},
			"SetInvert": {
				"desc": "inverts direction of motor commands",
				"isfunc": true,
				"name": "SetInvert",
				"pNames": ["invert"],
				"pTypes": ["bin"],
				"shortDesc": ""
			},
			"SetLampColor": {
				"desc": "?",
				"isfunc": true,
				"name": "SetLampColor",
				"pNames": ["input", "color"],
				"pTypes": ["num_int-1..4", "str_col"],
				"shortDesc": ""
			},
			"SetOnConnect": {
				"desc": "called when NXT has successfully connected via Bluetooth",
				"isfunc": true,
				"name": "SetOnConnect",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnConnected": {
				"desc": "called when NXT has successfully connected via Bluetooth",
				"isfunc": true,
				"name": "SetOnConnected",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnConnectEx": {
				"desc": "called when NXT has successfully connected via Bluetooth",
				"isfunc": true,
				"name": "SetOnConnectEx",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"ShowDevices": {
				"desc": "show paired NXT list to connect to one via bluetooth",
				"isfunc": true,
				"name": "ShowDevices",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"StartProgram": {
				"desc": "StartProgram",
				"isfunc": true,
				"name": "StartProgram",
				"pNames": ["name"],
				"pTypes": ["str_pth"],
				"shortDesc": ""
			},
			"Stop": {
				"desc": "Stop",
				"isfunc": true,
				"name": "Stop",
				"pNames": ["motors"],
				"pTypes": ["str-A|B|C"],
				"shortDesc": ""
			},
			"StopProgram": {
				"desc": "StopProgram",
				"isfunc": true,
				"name": "StopProgram",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"ToColorName": {
				"desc": "convert color integer got via ReadColorSensor to color name",
				"isfunc": true,
				"name": "ToColorName",
				"pNames": ["val"],
				"pTypes": ["num_int-1..6"],
				"retval": "str-black|blue|green|yellow|red|white",
				"shortDesc": ""
			}
		}
	},
	"CreateOverlay": {
		"abbrev": "ovl",
		"desc": "CreateOverlay",
		"isfunc": true,
		"name": "CreateOverlay",
		"pNames": ["options"],
		"pTypes": ["?"],
		"shortDesc": "CreateOverlay",
		"subf": {
			"AddLayout": {
				"desc": "AddLayout",
				"isfunc": true,
				"name": "AddLayout",
				"pNames": ["layout", "left", "top", "options"],
				"pTypes": ["?", "?", "?", "?"],
				"shortDesc": "AddLayout"
			},
			"AdjustColor": "#1794786072",
			"ClearFocus": "#1362225380",
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "GetType"
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"RemoveLayout": {
				"desc": "RemoveLayout",
				"isfunc": true,
				"name": "RemoveLayout",
				"pNames": ["layout"],
				"pTypes": ["?"],
				"shortDesc": "RemoveLayout"
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"SetMargins": "#1741900074",
			"SetPadding": "#1923105617",
			"SetPosition": {
				"desc": "SetPosition",
				"isfunc": true,
				"name": "SetPosition",
				"pNames": ["layout", "left", "top", "options"],
				"pTypes": ["?", "?", "?", "?"],
				"shortDesc": "SetPosition"
			},
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreatePhoneState": {
		"abbrev": "pst",
		"desc": "?",
		"isfunc": true,
		"name": "CreatePhoneState",
		"pNames": ["types"],
		"pTypes": ["?"],
		"retval": "PhoneState",
		"shortDesc": "Returns a PhoneState object.",
		"subf": {
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-PhoneState",
				"shortDesc": "Returns the control class name."
			},
			"Method": "#1023663567",
			"SetOnChange": "#2137502353",
			"Start": {
				"desc": "",
				"isfunc": true,
				"name": "Start",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Stop": {
				"desc": "",
				"isfunc": true,
				"name": "Stop",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			}
		}
	},
	"CreatePlayStore": {
		"abbrev": "pls",
		"desc": "?",
		"isfunc": true,
		"name": "CreatePlayStore",
		"pNames": [],
		"pTypes": [],
		"retval": "PlayStore",
		"shortDesc": "Returns a PlayStore object.",
		"subf": {
			"GetBillingInfo": {
				"desc": "",
				"isfunc": true,
				"name": "GetBillingInfo",
				"pNames": ["prodIDs", "callback", "options"],
				"pTypes": ["str", {
                    "abbrev": "",
                    "desc": "callback function",
                    "isfunc": true,
                    "name": "callback",
                    "pNames": [],
                    "pTypes": [],
                    "shortDesc": "callback",
                    "subf": {}
                }, "str-SUBS"],
				"retval": "?",
				"shortDesc": ""
			},
			"GetPurchases": {
				"desc": "",
				"isfunc": true,
				"name": "GetPurchases",
				"pNames": ["callback", "options"],
				"pTypes": [{
                    "abbrev": "",
                    "desc": "callback function",
                    "isfunc": true,
                    "name": "callback",
                    "pNames": [],
                    "pTypes": [],
                    "shortDesc": "callback",
                    "subf": {}
                }, "str-SUBS"],
				"retval": "?",
				"shortDesc": ""
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-PlayStore",
				"shortDesc": "Returns the control class name."
			},
			"Method": "#1023663567",
			"Purchase": {
				"desc": "?",
				"isfunc": true,
				"name": "Purchase",
				"pNames": ["prodID", "token", "callback", "options"],
				"pTypes": ["str", "str", {
                    "abbrev": "",
                    "desc": "callback function",
                    "isfunc": true,
                    "name": "callback",
                    "pNames": [],
                    "pTypes": [],
                    "shortDesc": "callback",
                    "subf": {}
                }, "str-SUBS"],
				"shortDesc": ""
			}
		}
	},
	"CreateScroller": {
		"abbrev": "scr",
		"desc": "If you have much data to display which does not fit in the area you have availabe or want to use, you probably want using a **Scroller**. The options for the Scroller are the same as the LinearLayout fill options, which set how a Scroller sizes within it's parent:- “FillX”, “FillY” and “FillXY”. By default Scrollers will auto-size to wrap their contents.\n\nTo add other controls to your scroller you need to put them in a scroller [CreateLayout.htm](layout) first, which you can then add to the scroller object.",
		"isfunc": true,
		"name": "CreateScroller",
		"pNames": ["width", "height", "options"],
		"pTypes": ["num_srw", "num_srh", "str-FillX|FillY|FillXY,Horizontal|Vertical,NoScrollBar,ScrollFade"],
		"retval": "Scroller",
		"shortDesc": "Returns a Scroller object.",
		"subf": {
			"AddChild": {
				"desc": "Add a layout to the scroller.",
				"isfunc": true,
				"name": "AddChild",
				"pNames": ["layout"],
				"pTypes": ["dso_lay"],
				"shortDesc": "Add a (layout) control."
			},
			"AdjustColor": "#1794786072",
			"ClearFocus": "#1362225380",
			"DestroyChild": {
				"desc": "Removes and releases a child object.",
				"isfunc": true,
				"name": "DestroyChild",
				"pNames": ["layout"],
				"pTypes": ["dso_lay"],
				"shortDesc": "Remove a child and destroy the world. Why even trying to create something new."
			},
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetScrollX": {
				"desc": "Get horizontal scroll bar position.",
				"isfunc": true,
				"name": "GetScrollX",
				"pNames": [],
				"pTypes": [],
				"retval": "num_orw",
				"shortDesc": "Get horizontal scroll bar position."
			},
			"GetScrollY": {
				"desc": "Get vertical scroll bar position.",
				"isfunc": true,
				"name": "GetScrollY",
				"pNames": [],
				"pTypes": [],
				"retval": "num_orh",
				"shortDesc": "Get vertical scroll bar position."
			},
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-Scroller",
				"shortDesc": "Returns the control class name."
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"RemoveChild": {
				"desc": "Remove a scroller layout.",
				"isfunc": true,
				"name": "RemoveChild",
				"pNames": ["child"],
				"pTypes": ["dso"],
				"shortDesc": "Remove a scroller layout."
			},
			"ScrollBy": {
				"desc": "Scrolls relatively to the current scroll bar positions.",
				"isfunc": true,
				"name": "ScrollBy",
				"pNames": ["x", "y"],
				"pTypes": ["num_orw", "num_orw"],
				"shortDesc": "Scroll relative to the current scroll position."
			},
			"ScrollTo": {
				"desc": "Scrolls to a given fixed position.",
				"isfunc": true,
				"name": "ScrollTo",
				"pNames": ["x", "y"],
				"pTypes": ["num_orw", "num_orw"],
				"shortDesc": "Scrolls to a given fixed position."
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"SetMargins": "#1741900074",
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreateSeekBar": {
		"abbrev": "skb",
		"desc": "SeekBars are bars with a moveable pointer which let the user select a value in a given range.\nThe **SetRange** method of the SeekBar object to sets the value range of the SeekBar and the **SetValue** method sets the current value.\nUse the SetOnChange method to define a function you want to be called when the SeekBar value has changed. You can read the _value_ parameter in your callback function to get the current SeekBar value.",
		"isfunc": true,
		"name": "CreateSeekBar",
		"pNames": ["width", "height", "options"],
		"pTypes": ["num_srw", "num_srh", "?"],
		"retval": "SeekBar",
		"shortDesc": "Returns a SeekBar object.",
		"subf": {
			"AdjustColor": "#1794786072",
			"ClearFocus": "#1362225380",
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-SeekBar",
				"shortDesc": "Returns the control class name."
			},
			"GetValue": {
				"desc": "returns current value",
				"isfunc": true,
				"name": "GetValue",
				"pNames": [],
				"pTypes": [],
				"retval": "?",
				"shortDesc": ""
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"SetMargins": "#1741900074",
			"SetMaxRate": {
				"desc": "SetMaxRate",
				"isfunc": true,
				"name": "SetMaxRate",
				"pNames": ["rate"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetOnChange": "#2137502353",
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetRange": {
				"desc": "SetRange",
				"isfunc": true,
				"name": "SetRange",
				"pNames": ["range"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetValue": {
				"desc": "SetValue",
				"isfunc": true,
				"name": "SetValue",
				"pNames": ["val"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreateSensor": {
		"abbrev": "sns",
		"desc": "The sensor object can be used to access numerous sensors of your device. You can use the **SetOnChange** function of the Sensor to set the name of a function you want to be called when a the changes occur.\n\nChange the rate that a sensor checks for changes by adding one the options “Fastest”, “Fast”, “Medium” or “Slow”. “Slow” is the default.",
		"isfunc": true,
		"name": "CreateSensor",
		"pNames": ["type", "options"],
		"pTypes": ["str-Accelerometer|MagneticField|Orientation|Light|Proximity|Temperature|GameRotation|GeomagneticRotation|Gravity|Gyroscope|HeartRate|Acceleration|Pressure|Humidity|RotationMotion|StepCounter|StepDetector", "str-Slow|Medium|Fast|Fastest"],
		"retval": "Sensor",
		"shortDesc": "Returns a Sensor object.",
		"subf": {
			"GetAzimuth": {
				"desc": "",
				"isfunc": true,
				"name": "GetAzimuth",
				"pNames": [],
				"pTypes": [],
				"retval": "?",
				"shortDesc": ""
			},
			"GetNames": {
				"desc": "Returns a list of builtin sensors in your device.",
				"isfunc": true,
				"name": "GetNames",
				"pNames": [],
				"pTypes": [],
				"retval": "str_com",
				"shortDesc": "Returns a list of builtin sensors."
			},
			"GetPitch": {
				"desc": "",
				"isfunc": true,
				"name": "GetPitch",
				"pNames": [],
				"pTypes": [],
				"retval": "?",
				"shortDesc": ""
			},
			"GetRoll": {
				"desc": "",
				"isfunc": true,
				"name": "GetRoll",
				"pNames": [],
				"pTypes": [],
				"retval": "?",
				"shortDesc": ""
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-Sensor",
				"shortDesc": "Returns the control class name."
			},
			"GetValues": {
				"desc": "",
				"isfunc": true,
				"name": "GetValues",
				"pNames": [],
				"pTypes": [],
				"retval": "?",
				"shortDesc": ""
			},
			"Method": "#1023663567",
			"SetMaxRate": {
				"desc": "",
				"isfunc": true,
				"name": "SetMaxRate",
				"pNames": ["rate"],
				"pTypes": ["num_int"],
				"shortDesc": ""
			},
			"SetMinChange": {
				"desc": "",
				"isfunc": true,
				"name": "SetMinChange",
				"pNames": ["min"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetOnChange": {
				"desc": "",
				"isfunc": true,
				"name": "SetOnChange",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"Start": {
				"desc": "",
				"isfunc": true,
				"name": "Start",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Stop": {
				"desc": "",
				"isfunc": true,
				"name": "Stop",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			}
		}
	},
	"CreateService": {
		"abbrev": "srv",
		"desc": "Services run in the background and can be used to monitor online databases, local communication ports or changes in data on the file system. They can also trigger notifications to the user and launch apps when changes or timeouts occur.\n\nDroidScript Services run in a separate process and can take advantage of multi-CPU devices, this allows CPU intensive calculations or slow procedures to be done in the background without slowing down or interfering with the main application.\n\nAny file in your project with the filename _“Service.js”_ will run as a hidden background service.\n\nA service can be created and started using the **CreateService** method of the app object in your main application file:\n%c\nUse “this” for the _packageName_ and _className_ parameters.\n\nYour service will start running when it's created and a foreground app must exist to manage the service and this foreground app must be run at least one time by the user.\n\nYou can set the service to start automatically when the device is booted if required; with the **SetAutoBoot** method of the **app** object.\n<js>app.SetAutoBoot( “Service” );</js>Stop a service using the Stop method.\n<js>svc.Stop();</js>\nMessages can be sent from your app to the service using the SendMessage method on the service object:\n<js>svc.SendMessage( msg );</js>\nYou will need to provide a message handler to receive and process the messages (see example below).\n\nSend messages from the service to the main app by using the SendMessage method of the app object:\n<js>app.SendMessage( msg );</js>\nThis will also need a message handler on the application (see example below).\n\nAdding services to your application is best done working with the WiFi editor (browser IDE) because you will need to edit more than one file and also see debug message from the service. Debug and error messages are shown in gray on the debug tab of the WiFi editor. Pressing the stop button in this IDE will stop both the service and the app, but pressing the back button on your device will stop the app but leave the service running.\n<sample Services>\nInspect the debug console and see the log messages from the service in gray.",
		"isfunc": true,
		"name": "CreateService",
		"pNames": ["packageName", "className", "callback", "options"],
		"pTypes": ["str-this|?", "str-this|?", {
				"desc": "Callback",
				"isfunc": true,
				"name": "callback",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "callback"
			}, "str-Persist:attempts to force restart if service killed"],
		"retval": "Service",
		"shortDesc": "Returns a Service object.",
		"subf": {
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-Service",
				"shortDesc": "Returns the control class name."
			},
			"Method": "#1023663567",
			"SendMessage": {
				"desc": "SendMessage to the service",
				"isfunc": true,
				"name": "SendMessage",
				"pNames": ["message"],
				"pTypes": ["str"],
				"shortDesc": ""
			},
			"SetInBackground": {
				"desc": "SetInBackground",
				"isfunc": true,
				"name": "SetInBackground",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "SetInBackground"
			},
			"SetInForeground": {
				"desc": "SetInForeground",
				"isfunc": true,
				"name": "SetInForeground",
				"pNames": ["title", "text", "largeIcon", "smallIcon", "importance"],
				"pTypes": ["?", "?", "?", "?", "?"],
				"shortDesc": "SetInForeground"
			},
			"SetOnMessage": {
				"desc": "callback called when message arrived",
				"isfunc": true,
				"name": "SetOnMessage",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["message"],
						"pTypes": ["str"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"Stop": {
				"desc": "Stop service",
				"isfunc": true,
				"name": "Stop",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			}
		}
	},
	"CreateShortcut": {
		"desc": "This method creates a shortcut of an app on your home screen - referencing to a js file runnable with DS",
		"isfunc": true,
		"name": "CreateShortcut",
		"pNames": ["name", "iconFile", "file", "options"],
		"pTypes": ["str", "str_pth", "str_pth", "?"],
		"shortDesc": "CreateShortcut"
	},
	"CreateSmartWatch": {
		"abbrev": "smw",
		"desc": "Returns a SmartWatch object.",
		"isfunc": true,
		"name": "CreateSmartWatch",
		"pNames": ["type"],
		"pTypes": ["?"],
		"retval": "SmartWatch",
		"shortDesc": "Returns a SmartWatch object.",
		"subf": {
			"AddLayout": {
				"desc": "?",
				"isfunc": true,
				"name": "AddLayout",
				"pNames": ["layout"],
				"pTypes": ["obj-SWlay"],
				"shortDesc": ""
			},
			"CreateImage": {
				"desc": "?",
				"isfunc": true,
				"name": "CreateImage",
				"pNames": ["image", "width", "height", "options", "pxwidth", "pxheight"],
				"pTypes": ["str_pth", "num_srw", "num_srw", "?", "num_int", "num_int"],
				"shortDesc": ""
			},
			"CreateLayout": {
				"desc": "?",
				"isfunc": true,
				"name": "CreateLayout",
				"pNames": ["type", "options"],
				"pTypes": ["str-Linear|Absolute|Frame", "?"],
				"shortDesc": ""
			},
			"CreateSensor": {
				"desc": "?",
				"isfunc": true,
				"name": "CreateSensor",
				"pNames": ["name", "options"],
				"pTypes": ["?", "?"],
				"shortDesc": ""
			},
			"CreateText": {
				"desc": "?",
				"isfunc": true,
				"name": "CreateText",
				"pNames": ["text", "width", "height", "options"],
				"pTypes": ["str", "num_srw", "num_srh", "str-x1:scale html images,x2:scale html images,x3:scale html images,x4:scale html images"],
				"shortDesc": ""
			},
			"GetVersion": {
				"desc": "GetVersion",
				"isfunc": true,
				"name": "GetVersion",
				"pNames": [],
				"pTypes": [],
				"retval": "str",
				"shortDesc": ""
			},
			"RemoveLayout": {
				"desc": "removes SmartWatch layout",
				"isfunc": true,
				"name": "RemoveLayout",
				"pNames": ["lay"],
				"pTypes": ["obj-SWlay"],
				"shortDesc": ""
			},
			"SetMenu": {
				"desc": "define menu list",
				"isfunc": true,
				"name": "SetMenu",
				"pNames": ["p1", "p2"],
				"pTypes": ["str_com", "?"],
				"shortDesc": ""
			},
			"SetOnBack": {
				"desc": "called when pressed back button",
				"isfunc": true,
				"name": "SetOnBack",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnHide": {
				"desc": "called when smartwatch app hidden",
				"isfunc": true,
				"name": "SetOnHide",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnMenu": {
				"desc": "called when pressed menu button",
				"isfunc": true,
				"name": "SetOnMenu",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnShow": {
				"desc": "called when smartwatch app sow",
				"isfunc": true,
				"name": "SetOnShow",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnStart": {
				"desc": "called when smartwatch app started",
				"isfunc": true,
				"name": "SetOnStart",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnStop": {
				"desc": "called when smartwatch app stopped",
				"isfunc": true,
				"name": "SetOnStop",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnSwipe": {
				"desc": "called when swiped over smartwatch",
				"isfunc": true,
				"name": "SetOnSwipe",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnTouch": {
				"desc": "called when smartwatch touched",
				"isfunc": true,
				"name": "SetOnTouch",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetScreenState": {
				"desc": "?",
				"isfunc": true,
				"name": "SetScreenState",
				"pNames": ["p1"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"ShowLayout": {
				"desc": "?",
				"isfunc": true,
				"name": "ShowLayout",
				"pNames": ["layout", "x", "y"],
				"pTypes": ["obj-SWlay", "num_srw", "num_srh"],
				"shortDesc": ""
			},
			"ShowMessage": {
				"desc": "?",
				"isfunc": true,
				"name": "ShowMessage",
				"pNames": ["message"],
				"pTypes": ["str"],
				"shortDesc": ""
			},
			"StopApp": {
				"desc": "StopApp",
				"isfunc": true,
				"name": "StopApp",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Vibrate": {
				"desc": "Vibrates smartwatch",
				"isfunc": true,
				"name": "Vibrate",
				"pNames": ["p1", "p2", "p3"],
				"pTypes": ["?", "?", "?"],
				"shortDesc": ""
			}
		}
	},
	"CreateSMS": {
		"abbrev": "sms",
		"desc": "Returns a SMS object.",
		"isfunc": true,
		"name": "CreateSMS",
		"pNames": [],
		"pTypes": [],
		"retval": "SMS",
		"shortDesc": "Returns a SMS object.",
		"subf": {
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-SMS",
				"shortDesc": "Returns the control class name."
			},
			"Method": "#1023663567",
			"Send": {
				"desc": "send device SMS message",
				"isfunc": true,
				"name": "Send",
				"pNames": ["number", "message", "options"],
				"pTypes": ["str", "str", "?"],
				"shortDesc": ""
			},
			"SetOnMessage": {
				"desc": "received SMS message callback",
				"isfunc": true,
				"name": "SetOnMessage",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["message"],
						"pTypes": ["str"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnStatus": {
				"desc": "?",
				"isfunc": true,
				"name": "SetOnStatus",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["status"],
						"pTypes": ["str"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			}
		}
	},
	"CreateSpeechRec": {
		"abbrev": "spr",
		"desc": "The **SpeechRec** object can be used to listen for and recognize speech.\nUse the **Recognize** method of the SpeechRec object to tell it to start listening:\n<js>speech.Recognize();</js>\nWhen the SpeechRec object has started listening, the **OnReady** callback function will be called. Use the **SetOnReady** method to set the name of your OnReady callback function.\n\nIf the SpeechRec object recognizes speech, the **OnResult** callback function will be called. The results are passed to the OnResult callback function as an array, with the most probable result at the front. Use the **SetOnResult** method to set the name of your OnResult callback function.\n\nIf the SpeechRec object does not recognize anything, the **OnError** callback function will be called. Use the **SetOnError** method to set the name of your OnError callback function.",
		"isfunc": true,
		"name": "CreateSpeechRec",
		"pNames": ["options"],
		"pTypes": ["str-NoBeep,Partial"],
		"retval": "SpeechRec",
		"shortDesc": "Returns a SpeechRec object.",
		"subf": {
			"Cancel": {
				"desc": "stop recognision",
				"isfunc": true,
				"name": "Cancel",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"GetRMS": {
				"desc": "?",
				"isfunc": true,
				"name": "GetRMS",
				"pNames": [],
				"pTypes": [],
				"retval": "num_flt",
				"shortDesc": ""
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-SpeechRec",
				"shortDesc": "Returns the control class name."
			},
			"IsListening": {
				"desc": "returns whether speechRec is listening",
				"isfunc": true,
				"name": "IsListening",
				"pNames": [],
				"pTypes": [],
				"retval": "bin",
				"shortDesc": ""
			},
			"Method": "#1023663567",
			"Recognize": {
				"desc": "start speech recognizion",
				"isfunc": true,
				"name": "Recognize",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"SetOnError": {
				"desc": "",
				"isfunc": true,
				"name": "SetOnError",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["error"],
						"pTypes": ["str"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnReady": {
				"desc": "",
				"isfunc": true,
				"name": "SetOnReady",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnResult": {
				"desc": "",
				"isfunc": true,
				"name": "SetOnResult",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["result"],
						"pTypes": ["str"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"Stop": {
				"desc": "Stop speech recognizion",
				"isfunc": true,
				"name": "Stop",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			}
		}
	},
	"CreateSpinner": {
		"abbrev": "spn",
		"desc": "Create Spinners using the CreateSpinner method of the app object.\nYou can allow the Spinner to auto-size by leaving out the dimensions or you can specify a **width** and/or **height** as decimal fractions of the screen's width and height.\n\nUse the **SetOnChange** method of your spinner to set the name of a function you want to be called when the user selects an item.\n\nYou can get the current selection of the Spinner button at any time using the **GetText** method and replace the option list at any time by using the **SetList** method.\n\nUse the **SelectItem** method to select a particular item in code.",
		"isfunc": true,
		"name": "CreateSpinner",
		"pNames": ["list", "width", "height", "options"],
		"pTypes": ["?", "?", "?", "?"],
		"retval": "Spinner",
		"shortDesc": "Returns a Spinner object.",
		"subf": {
			"AdjustColor": "#1794786072",
			"ClearFocus": "#1362225380",
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetText": "#2387569276",
			"GetTextSize": "#2530918945",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-Spinner",
				"shortDesc": "Returns the control class name."
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"SelectItem": {
				"desc": "SelectItem",
				"isfunc": true,
				"name": "SelectItem",
				"pNames": ["item"],
				"pTypes": ["str"],
				"shortDesc": ""
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"SetList": {
				"desc": "override list",
				"isfunc": true,
				"name": "SetList",
				"pNames": ["list", "delim"],
				"pTypes": ["str_com", "str"],
				"shortDesc": ""
			},
			"SetMargins": "#1741900074",
			"SetOnChange": "#2137502353",
			"SetOnTouch": "#2088093920",
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetText": "#8207502354",
			"SetTextColor": "#0175303923",
			"SetTextSize": "#5019790423",
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreateSynth": {
		"abbrev": "syn",
		"desc": "Returns a Synth object.",
		"isfunc": true,
		"name": "CreateSynth",
		"pNames": ["type"],
		"pTypes": ["?"],
		"retval": "Synth",
		"shortDesc": "Returns a Synth object.",
		"subf": {
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-Synth",
				"shortDesc": "Returns the control class name."
			},
			"Method": "#1023663567",
			"PlayMidiTune": {
				"desc": "",
				"isfunc": true,
				"name": "PlayMidiTune",
				"pNames": ["tune"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"PlayNote": {
				"desc": "",
				"isfunc": true,
				"name": "PlayNote",
				"pNames": ["note"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"PlayTone": {
				"desc": "",
				"isfunc": true,
				"name": "PlayTone",
				"pNames": ["frequency", "duration"],
				"pTypes": ["?", "?"],
				"shortDesc": ""
			},
			"SetDelay": {
				"desc": "",
				"isfunc": true,
				"name": "SetDelay",
				"pNames": ["milliseconds"],
				"pTypes": ["num_mls"],
				"shortDesc": ""
			},
			"SetDelayEnabled": {
				"desc": "SetDelayEnabled",
				"isfunc": true,
				"name": "SetDelayEnabled",
				"pNames": ["enable"],
				"pTypes": ["bin"],
				"shortDesc": ""
			},
			"SetFeedback": {
				"desc": "",
				"isfunc": true,
				"name": "SetFeedback",
				"pNames": ["feedback"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetFrequency": {
				"desc": "",
				"isfunc": true,
				"name": "SetFrequency",
				"pNames": ["frequency"],
				"pTypes": ["num"],
				"shortDesc": ""
			},
			"SetNoteLength": {
				"desc": "",
				"isfunc": true,
				"name": "SetNoteLength",
				"pNames": ["duration"],
				"pTypes": ["num_mls"],
				"shortDesc": ""
			},
			"SetPhaser": {
				"desc": "",
				"isfunc": true,
				"name": "SetPhaser",
				"pNames": ["drywet", "rate", "range", "feedback"],
				"pTypes": ["bin", "num", "num", "?"],
				"shortDesc": ""
			},
			"SetPhaserDryWet": {
				"desc": "",
				"isfunc": true,
				"name": "SetPhaserDryWet",
				"pNames": ["drywet"],
				"pTypes": ["bin"],
				"shortDesc": ""
			},
			"SetPhaserEnabled": {
				"desc": "SetPhaserEnabled",
				"isfunc": true,
				"name": "SetPhaserEnabled",
				"pNames": ["enable"],
				"pTypes": ["bin"],
				"shortDesc": ""
			},
			"SetPhaserFeedback": {
				"desc": "",
				"isfunc": true,
				"name": "SetPhaserFeedback",
				"pNames": ["feedback"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetPhaserRange": {
				"desc": "",
				"isfunc": true,
				"name": "SetPhaserRange",
				"pNames": ["range"],
				"pTypes": ["num"],
				"shortDesc": ""
			},
			"SetPhaserRate": {
				"desc": "",
				"isfunc": true,
				"name": "SetPhaserRate",
				"pNames": ["rate"],
				"pTypes": ["num"],
				"shortDesc": ""
			},
			"SetVca": {
				"desc": "",
				"isfunc": true,
				"name": "SetVca",
				"pNames": ["attack", "decay", "sustain", "release"],
				"pTypes": ["?", "?", "?", "?"],
				"shortDesc": ""
			},
			"SetVcaAttack": {
				"desc": "",
				"isfunc": true,
				"name": "SetVcaAttack",
				"pNames": ["attack"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetVcaDecay": {
				"desc": "",
				"isfunc": true,
				"name": "SetVcaDecay",
				"pNames": ["decay"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetVcaEnabled": {
				"desc": "SetVcaEnabled",
				"isfunc": true,
				"name": "SetVcaEnabled",
				"pNames": ["enable"],
				"pTypes": ["bin"],
				"shortDesc": ""
			},
			"SetVcaRelease": {
				"desc": "",
				"isfunc": true,
				"name": "SetVcaRelease",
				"pNames": ["release"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetVcaSustain": {
				"desc": "",
				"isfunc": true,
				"name": "SetVcaSustain",
				"pNames": ["sustain"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetVcf": {
				"desc": "",
				"isfunc": true,
				"name": "SetVcf",
				"pNames": ["attack", "decay", "sustain", "release", "cuttoff", "resonance", "depth"],
				"pTypes": ["?", "?", "?", "?", "?", "?", "?"],
				"shortDesc": ""
			},
			"SetVcfAttack": {
				"desc": "",
				"isfunc": true,
				"name": "SetVcfAttack",
				"pNames": ["attack"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetVcfCutoff": {
				"desc": "",
				"isfunc": true,
				"name": "SetVcfCutoff",
				"pNames": ["cuttoff"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetVcfDecay": {
				"desc": "",
				"isfunc": true,
				"name": "SetVcfDecay",
				"pNames": ["decay"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetVcfDepth": {
				"desc": "",
				"isfunc": true,
				"name": "SetVcfDepth",
				"pNames": ["depth"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetVcfEnabled": {
				"desc": "SetVcfEnabled",
				"isfunc": true,
				"name": "SetVcfEnabled",
				"pNames": ["enable"],
				"pTypes": ["bin"],
				"shortDesc": ""
			},
			"SetVcfRelease": {
				"desc": "",
				"isfunc": true,
				"name": "SetVcfRelease",
				"pNames": ["release"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetVcfResonance": {
				"desc": "",
				"isfunc": true,
				"name": "SetVcfResonance",
				"pNames": ["resonance"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetVcfSustain": {
				"desc": "",
				"isfunc": true,
				"name": "SetVcfSustain",
				"pNames": ["sustain"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetVolume": {
				"desc": "",
				"isfunc": true,
				"name": "SetVolume",
				"pNames": ["left", "right"],
				"pTypes": ["num_prc", "num_prc"],
				"shortDesc": ""
			},
			"SetWaveShape": {
				"desc": "",
				"isfunc": true,
				"name": "SetWaveShape",
				"pNames": ["shape"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"Start": {
				"desc": "",
				"isfunc": true,
				"name": "Start",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Stop": {
				"desc": "",
				"isfunc": true,
				"name": "Stop",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			}
		}
	},
	"CreateSysProc": {
		"abbrev": "sys",
		"desc": "Returns a SysProc object.",
		"isfunc": true,
		"name": "CreateSysProc",
		"pNames": ["cmd", "env", "dir", "options"],
		"pTypes": ["str_pip", "str", "str_pth", "str-combine:combines stdout and stderr|builder:force use of proc builder"],
		"retval": "SysProc",
		"shortDesc": "Returns a SysProc object.",
		"subf": {
			"Err": {
				"desc": "",
				"isfunc": true,
				"name": "Err",
				"pNames": ["maxLines", "options"],
				"pTypes": ["?", "?"],
				"shortDesc": ""
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-SysProc",
				"shortDesc": "Returns the control class name."
			},
			"In": {
				"desc": "",
				"isfunc": true,
				"name": "In",
				"pNames": ["maxLines", "options"],
				"pTypes": ["?", "?"],
				"shortDesc": ""
			},
			"Method": "#1023663567",
			"Out": {
				"desc": "",
				"isfunc": true,
				"name": "Out",
				"pNames": ["command"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"ReadFileAsByte": {
				"desc": "",
				"isfunc": true,
				"name": "ReadFileAsByte",
				"pNames": ["file"],
				"pTypes": ["str_pth"],
				"shortDesc": ""
			},
			"SetOnError": {
				"desc": "SetOnError",
				"isfunc": true,
				"name": "SetOnError",
				"pNames": ["callback"],
				"pTypes": ["?"],
				"shortDesc": "SetOnError"
			},
			"SetOnInput": {
				"desc": "SetOnInput",
				"isfunc": true,
				"name": "SetOnInput",
				"pNames": ["callback"],
				"pTypes": ["?"],
				"shortDesc": "SetOnInput"
			},
			"WriteToFile": {
				"desc": "",
				"isfunc": true,
				"name": "WriteToFile",
				"pNames": ["file", "data"],
				"pTypes": ["str_pth", "str"],
				"shortDesc": ""
			}
		}
	},
	"CreateTabs": {
		"abbrev": "tab",
		"desc": "Returns a Tabs object.",
		"isfunc": true,
		"name": "CreateTabs",
		"pNames": ["list", "width", "height", "options"],
		"pTypes": ["str_com", "num_srw", "num_srw", "?"],
		"retval": "Tabs",
		"shortDesc": "Returns a Tabs object.",
		"subf": {
			"AddChild": {
				"desc": "",
				"isfunc": true,
				"name": "AddChild",
				"pNames": ["child", "order"],
				"pTypes": ["dso", "?"],
				"shortDesc": ""
			},
			"AdjustColor": "#1794786072",
			"Animate": {
				"desc": "",
				"isfunc": true,
				"name": "Animate",
				"pNames": ["type", "callback", "time"],
				"pTypes": ["?", {
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}, "num_mls"],
				"shortDesc": ""
			},
			"ChildToFront": {
				"desc": "",
				"isfunc": true,
				"name": "ChildToFront",
				"pNames": ["child"],
				"pTypes": ["dso"],
				"shortDesc": ""
			},
			"ClearFocus": "#1362225380",
			"DestroyChild": {
				"desc": "",
				"isfunc": true,
				"name": "DestroyChild",
				"pNames": ["child"],
				"pTypes": ["dso"],
				"shortDesc": ""
			},
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetChildOrder": {
				"desc": "",
				"isfunc": true,
				"name": "GetChildOrder",
				"pNames": ["child"],
				"pTypes": ["dso"],
				"retval": "?",
				"shortDesc": ""
			},
			"GetHeight": "#2576212953",
			"GetLayout": {
				"desc": "",
				"isfunc": true,
				"name": "GetLayout",
				"pNames": ["name"],
				"pTypes": ["str"],
				"retval": "dso_lay",
				"shortDesc": ""
			},
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-Tabs",
				"shortDesc": "Returns the control class name."
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": {
				"desc": "",
				"isfunc": true,
				"name": "IsOverlap",
				"pNames": ["obj", "depth"],
				"pTypes": ["dso", "?"],
				"retval": "?",
				"shortDesc": ""
			},
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"parent": {
				"desc": "parent",
				"isfunc": false,
				"name": "parent",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "parent"
			},
			"RemoveChild": {
				"desc": "",
				"isfunc": true,
				"name": "RemoveChild",
				"pNames": ["child"],
				"pTypes": ["dso"],
				"shortDesc": ""
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"SetGravity": {
				"desc": "",
				"isfunc": true,
				"name": "SetGravity",
				"pNames": ["gravity"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetMargins": "#1741900074",
			"SetOnChange": {
				"desc": "",
				"isfunc": true,
				"name": "SetOnChange",
				"pNames": ["cb"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetOnChildChange": {
				"desc": "",
				"isfunc": true,
				"name": "SetOnChildChange",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnLongTouch": {
				"desc": "callen when object long pressed",
				"isfunc": true,
				"name": "SetOnLongTouch",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["self"],
						"pTypes": ["dso"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnTouch": "#2088093920",
			"SetOnTouchDown": {
				"desc": "called when finger comes down",
				"isfunc": true,
				"name": "SetOnTouchDown",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["event"],
						"pTypes": ["_even"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnTouchMove": {
				"desc": "called when finger was moved over screen",
				"isfunc": true,
				"name": "SetOnTouchMove",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["event"],
						"pTypes": ["_even"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnTouchUp": {
				"desc": "called when finger leaves screen",
				"isfunc": true,
				"name": "SetOnTouchUp",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["event"],
						"pTypes": ["_even"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOrientation": {
				"desc": "",
				"isfunc": true,
				"name": "SetOrientation",
				"pNames": ["orient"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetTouchable": "#2562918782",
			"SetTouchThrough": {
				"desc": "SetTouchThrough",
				"isfunc": true,
				"name": "SetTouchThrough",
				"pNames": ["through"],
				"pTypes": ["?"],
				"shortDesc": "SetTouchThrough"
			},
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"ShowTab": {
				"desc": "",
				"isfunc": true,
				"name": "ShowTab",
				"pNames": ["name"],
				"pTypes": ["str"],
				"shortDesc": ""
			},
			"Tween": "#2114624769"
		}
	},
	"CreateText": {
		"abbrev": "txt",
		"desc": "If you want to display text in your app you can use the Text object. You can use the _“Multiline”_ **option** to allow multi-line text and the _“Left”_ or _“Right”_ options to align the text. The default is single line centered text.\nOther options you will see used in the samples include _“AutoScale”_, _“Bold”_, _“Html”_ and _“FontAwesome”_.\nUse the **SetText** and **GetText** functions of the Text object to set and get it's text.\n<sample Single line>\nYou can change the look of a Text using the **SetBackColor** and **SetTextColor** functions on the Text object.\n<sample Multi line>\nText can be shortened using ellipsis (...) when the size of the control is too small to show all the text. Use the **SetEllipsize** to control where the ellipsis is placed. Available modes are _“start”_, _“middle”_, _“end”_ and _“marq”_.\n<sample Ellipsize>\nYou can also set a background image/pattern or background gradient for the Text using the **SetBackground** and **SetBackGradient** functions. See [CreateLayout.htm](Layouts) for examples of how to use these functions.",
		"isfunc": true,
		"name": "CreateText",
		"pNames": ["text", "width", "height", "options"],
		"pTypes": ["str", "num_srw", "num_srh", "str-Multiline,Left|Right,Html,Bold,Monospace,AutoSize,NoWrap,Log"],
		"retval": "Text",
		"shortDesc": "Returns a Text object.",
		"subf": {
			"AdjustColor": "#1794786072",
			"ClearFocus": "#1362225380",
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetHeight": "#2576212953",
			"GetHtml": {
				"desc": "return text formatted with html tags",
				"isfunc": true,
				"name": "GetHtml",
				"pNames": [],
				"pTypes": [],
				"retval": "str_htm",
				"shortDesc": ""
			},
			"GetLeft": "#1237814406",
			"GetLineCount": {
				"desc": "GetLineCount",
				"isfunc": true,
				"name": "GetLineCount",
				"pNames": [],
				"pTypes": [],
				"retval": "num_int",
				"shortDesc": ""
			},
			"GetLineStart": {
				"desc": "return number of character where a given line starts",
				"isfunc": true,
				"name": "GetLineStart",
				"pNames": ["line"],
				"pTypes": ["num_int"],
				"retval": "num_int",
				"shortDesc": ""
			},
			"GetLineTop": {
				"desc": "?",
				"isfunc": true,
				"name": "GetLineTop",
				"pNames": ["line"],
				"pTypes": ["num_int"],
				"retval": "?",
				"shortDesc": ""
			},
			"GetMaxLines": {
				"desc": "GetMaxLines",
				"isfunc": true,
				"name": "GetMaxLines",
				"pNames": [],
				"pTypes": [],
				"retval": "num_int",
				"shortDesc": ""
			},
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetText": "#2387569276",
			"GetTextSize": "#2530918945",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-Text",
				"shortDesc": "Returns the control class name."
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Log": {
				"desc": "append text with line break",
				"isfunc": true,
				"name": "Log",
				"pNames": ["message", "options"],
				"pTypes": ["?", "?"],
				"shortDesc": ""
			},
			"Method": "#1023663567",
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetEllipsize": "#0897234673",
			"SetEnabled": "#1602385882",
			"SetFontFile": "#0197498372",
			"SetHtml": "#8753208754",
			"SetLog": {
				"desc": "SetLog",
				"isfunc": true,
				"name": "SetLog",
				"pNames": ["maxLines"],
				"pTypes": ["num_int"],
				"shortDesc": ""
			},
			"SetMargins": "#1741900074",
			"SetOnLongTouch": {
				"desc": "callen when object long pressed",
				"isfunc": true,
				"name": "SetOnLongTouch",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["self"],
						"pTypes": ["dso"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnTouch": "#2088093920",
			"SetOnTouchDown": {
				"desc": "called when finger comes down",
				"isfunc": true,
				"name": "SetOnTouchDown",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["event"],
						"pTypes": ["_even"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnTouchMove": {
				"desc": "called when finger was moved over screen",
				"isfunc": true,
				"name": "SetOnTouchMove",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["event"],
						"pTypes": ["_even"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnTouchUp": {
				"desc": "called when finger leaves screen",
				"isfunc": true,
				"name": "SetOnTouchUp",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["event"],
						"pTypes": ["_even"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetText": "#8207502354",
			"SetTextColor": "#1093247031",
			"SetTextShadow": "#1093247031",
			"SetTextSize": "#5019790423",
			"SetTouchable": "#2562918782",
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreateTextEdit": {
		"abbrev": "edt",
		"desc": "If you want the user to enter custom data you probably need the **TextEdit** control. For number input only you can apply the _“numbers”_ **option**.\n\nYou can use the **SetOnChange** method of the TextEdit to set the name of a function you want to be called when a the text is changed.\n\nUse the **SetText** and **GetText** functions to set and get the text in the TextEdit.\n<sample Using OnChange>\nYou can change the look of a TextEdit using the **SetBackColor** and **SetTextColor** functions on the TextEdit object.<sample Blue on White>\nYou can also set a background image/pattern or background gradient for the List using the **SetBackground** and **SetBackGradient** functions. See [CreateLayout.htm](Layouts) for examples of how to use these functions.",
		"isfunc": true,
		"name": "CreateTextEdit",
		"pNames": ["text", "width", "height", "options"],
		"pTypes": ["str", "num_srw", "num_srh", "str-AutoSelect:Select all Text if user enter the Textedit,AutoSize:Expand or shrink the control automatically so the text fits in the Textedit,Bold:Write bold text,Extract:enables full screen keyboard in landscape mode,Left:Justify the text to the left|Center:Justify the text in the middle|Right:Justify the text to the right|Monospace,NoSpell:Disable the spell-checker,NoKeyboard:Shows no Keyboard|Numbers,ReadOnly:The user cant change the Text,SingleLine:Dont break text for long lines"],
		"retval": "TextEdit",
		"shortDesc": "Returns a TextEdit object.",
		"subf": {
			"AdjustColor": "#1794786072",
			"ClearFocus": "#1362225380",
			"ClearHistory": {
				"desc": "ClearHistory for undo or redo",
				"isfunc": true,
				"name": "ClearHistory",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetCursorLine": {
				"desc": "GetCursorLine",
				"isfunc": true,
				"name": "GetCursorLine",
				"pNames": [],
				"pTypes": [],
				"retval": "num_int",
				"shortDesc": ""
			},
			"GetCursorPos": {
				"desc": "GetCursorPos",
				"isfunc": true,
				"name": "GetCursorPos",
				"pNames": [],
				"pTypes": [],
				"retval": "num_int",
				"shortDesc": ""
			},
			"GetHeight": "#2576212953",
			"GetHtml": {
				"desc": "returns text formatted with html tags",
				"isfunc": true,
				"name": "GetHtml",
				"pNames": [],
				"pTypes": [],
				"retval": "str_htm",
				"shortDesc": ""
			},
			"GetLeft": "#1237814406",
			"GetLineCount": {
				"desc": "GetLineCount",
				"isfunc": true,
				"name": "GetLineCount",
				"pNames": [],
				"pTypes": [],
				"retval": "num_int",
				"shortDesc": ""
			},
			"GetLineStart": {
				"desc": "returns position where given line starts",
				"isfunc": true,
				"name": "GetLineStart",
				"pNames": ["line"],
				"pTypes": ["num_int"],
				"retval": "num_int",
				"shortDesc": ""
			},
			"GetLineTop": {
				"desc": "",
				"isfunc": true,
				"name": "GetLineTop",
				"pNames": ["line"],
				"pTypes": ["num_int"],
				"retval": "?",
				"shortDesc": ""
			},
			"GetMaxLines": {
				"desc": "GetMaxLines",
				"isfunc": true,
				"name": "GetMaxLines",
				"pNames": [],
				"pTypes": [],
				"retval": "num_int",
				"shortDesc": ""
			},
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetSelectedText": {
				"desc": "GetSelectedText",
				"isfunc": true,
				"name": "GetSelectedText",
				"pNames": [],
				"pTypes": [],
				"retval": "str",
				"shortDesc": ""
			},
			"GetSelectionEnd": {
				"desc": "GetSelectionEnd",
				"isfunc": true,
				"name": "GetSelectionEnd",
				"pNames": [],
				"pTypes": [],
				"retval": "num_int",
				"shortDesc": ""
			},
			"GetSelectionStart": {
				"desc": "GetSelectionStart",
				"isfunc": true,
				"name": "GetSelectionStart",
				"pNames": [],
				"pTypes": [],
				"retval": "num_int",
				"shortDesc": ""
			},
			"GetText": "#2387569276",
			"GetTextSize": "#2530918945",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-TextEdit",
				"shortDesc": "Returns the control class name."
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"InsertText": {
				"desc": "",
				"isfunc": true,
				"name": "InsertText",
				"pNames": ["text", "start", "end"],
				"pTypes": ["str", "num_int", "num_int"],
				"shortDesc": ""
			},
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"Redo": {
				"desc": "Redo action",
				"isfunc": true,
				"name": "Redo",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"ReplaceText": {
				"desc": "ReplaceText",
				"isfunc": true,
				"name": "ReplaceText",
				"pNames": ["text", "start", "end"],
				"pTypes": ["str", "num_int", "num_int"],
				"shortDesc": ""
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetCursorColor": {
				"desc": "SetCursorColor",
				"isfunc": true,
				"name": "SetCursorColor",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": ""
			},
			"SetCursorPos": {
				"desc": "SetCursorPos",
				"isfunc": true,
				"name": "SetCursorPos",
				"pNames": ["position"],
				"pTypes": ["num_int"],
				"shortDesc": ""
			},
			"SetEnabled": "#1602385882",
			"SetHint": {
				"desc": "set grey default text which cannot be edited",
				"isfunc": true,
				"name": "SetHint",
				"pNames": ["text"],
				"pTypes": ["str"],
				"shortDesc": ""
			},
			"SetHtml": "#8753208754",
			"SetMargins": "#1741900074",
			"SetOnChange": "#2137502353",
			"SetOnEnter": {
				"desc": "called when pressedstr-Done key(disables line break enter key)",
				"isfunc": true,
				"name": "SetOnEnter",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnFocus": {
				"desc": "SetOnFocus",
				"isfunc": true,
				"name": "SetOnFocus",
				"pNames": ["callback"],
				"pTypes": ["?"],
				"shortDesc": "SetOnFocus"
			},
			"SetOnTouch": "#2088093920",
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSelection": {
				"desc": "SetSelection",
				"isfunc": true,
				"name": "SetSelection",
				"pNames": ["start", "stop"],
				"pTypes": ["num_int", "num_int"],
				"shortDesc": ""
			},
			"SetSize": "#1296070870",
			"SetText": "#8207502354",
			"SetTextColor": "#1093247031",
			"SetTextSize": "#5019790423",
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769",
			"Undo": {
				"desc": "Undo action",
				"isfunc": true,
				"name": "Undo",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			}
		}
	},
	"CreateTheme": {
		"abbrev": "thm",
		"desc": "Returns a Theme object.",
		"isfunc": true,
		"name": "CreateTheme",
		"pNames": ["baseTheme"],
		"pTypes": ["?"],
		"retval": "Theme",
		"shortDesc": "Returns a Theme object.",
		"subf": {
			"AdjustColor": "#1794786072",
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-Theme",
				"shortDesc": "Returns the control class name."
			},
			"Method": "#1023663567",
			"SetBackColor": "#3857861627",
			"SetBackground": "#1239127541",
			"SetBtnTextColor": {
				"desc": "",
				"isfunc": true,
				"name": "SetBtnTextColor",
				"pNames": ["color"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetButtonOptions": {
				"desc": "",
				"isfunc": true,
				"name": "SetButtonOptions",
				"pNames": ["options"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetButtonStyle": {
				"desc": "",
				"isfunc": true,
				"name": "SetButtonStyle",
				"pNames": ["color1", "color2", "radius", "strokeClr", "strokeWidth", "shadow", "checkClr"],
				"pTypes": ["?", "?", "?", "?", "?", "?", "?"],
				"shortDesc": ""
			},
			"SetCheckBoxOptions": {
				"desc": "",
				"isfunc": true,
				"name": "SetCheckBoxOptions",
				"pNames": ["options"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetDialogBtnColor": {
				"desc": "",
				"isfunc": true,
				"name": "SetDialogBtnColor",
				"pNames": ["color"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetDialogBtnTxtColor": {
				"desc": "",
				"isfunc": true,
				"name": "SetDialogBtnTxtColor",
				"pNames": ["color"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetDialogColor": {
				"desc": "",
				"isfunc": true,
				"name": "SetDialogColor",
				"pNames": ["color"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetDimBehind": {
				"desc": "",
				"isfunc": true,
				"name": "SetDimBehind",
				"pNames": ["dim"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetProgressBackColor": {
				"desc": "",
				"isfunc": true,
				"name": "SetProgressBackColor",
				"pNames": ["color"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetProgressBarOptions": {
				"desc": "",
				"isfunc": true,
				"name": "SetProgressBarOptions",
				"pNames": ["options"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetProgressTextColor": {
				"desc": "",
				"isfunc": true,
				"name": "SetProgressTextColor",
				"pNames": ["color"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetTextColor": "#0175303923",
			"SetTextEditOptions": {
				"desc": "",
				"isfunc": true,
				"name": "SetTextEditOptions",
				"pNames": ["options"],
				"pTypes": ["str-underline"],
				"shortDesc": ""
			},
			"SetTitleColor": {
				"desc": "",
				"isfunc": true,
				"name": "SetTitleColor",
				"pNames": ["color"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetTitleDividerColor": {
				"desc": "",
				"isfunc": true,
				"name": "SetTitleDividerColor",
				"pNames": ["color"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetTitleHeight": {
				"desc": "",
				"isfunc": true,
				"name": "SetTitleHeight",
				"pNames": ["height", "options"],
				"pTypes": ["?", "?"],
				"shortDesc": ""
			}
		}
	},
	"CreateToggle": {
		"abbrev": "tgl",
		"desc": "Toggle buttons are basically [CreateButton.htm](Buttons) with a light indicating if it is activated or not. The user can toggle this state by pressing on it.\n%c\n You can allow the toggle button to auto-size by leaving out the dimensions or you can specify a **width** and **height** as decimal fractions of the screen's width and height.\n\nUse the **SetOnTouch** method of your button object to set the name of a function you want to be called when the button is touched.\n\nYou can get the state of the toggle button at any time using the **GetChecked** method of the button. The button state is also passed into your OnTouch callback function as a parameter every time the button is touched.",
		"isfunc": true,
		"name": "CreateToggle",
		"pNames": ["text", "width", "height", "options"],
		"pTypes": ["str", "num_srw", "num_srh", "str-FontAwesome,Custom,NoPad"],
		"retval": "Toggle",
		"shortDesc": "Returns a Toggle object.",
		"subf": {
			"AdjustColor": "#1794786072",
			"ClearFocus": "#1362225380",
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetChecked": {
				"desc": "GetChecked",
				"isfunc": true,
				"name": "GetChecked",
				"pNames": [],
				"pTypes": [],
				"retval": "bin",
				"shortDesc": ""
			},
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetText": "#2387569276",
			"GetTextSize": "#2530918945",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-Toggle",
				"shortDesc": "Returns the control class name."
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetChecked": {
				"desc": "SetChecked",
				"isfunc": true,
				"name": "SetChecked",
				"pNames": ["checked"],
				"pTypes": ["bin"],
				"shortDesc": ""
			},
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"SetMargins": "#1741900074",
			"SetOnTouch": "#2088093920",
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetStyle": {
				"desc": "",
				"isfunc": true,
				"name": "SetStyle",
				"pNames": ["color1", "color2", "radius", "strokeClr", "strokeWidth", "shadow", "checkClr"],
				"pTypes": ["str_col", "str_col", "num_srw", "str_col", "num_int", "bin", "?"],
				"shortDesc": ""
			},
			"SetText": "#8207502354",
			"SetTextColor": "#0175303923",
			"SetTextSize": "#5019790423",
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreateUSBSerial": {
		"abbrev": "usb",
		"desc": "Returns a USBSerial object.",
		"isfunc": true,
		"name": "CreateUSBSerial",
		"pNames": ["baudRate", "dataBits", "stopBits", "parity", "device"],
		"pTypes": ["?", "?", "?", "?", "?"],
		"retval": "USBSerial",
		"shortDesc": "Returns a USBSerial object.",
		"subf": {
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-USBSerial",
				"shortDesc": "Returns the control class name."
			},
			"IsConnected": {
				"desc": "returns whether a USB serial device was connected",
				"isfunc": true,
				"name": "IsConnected",
				"pNames": [],
				"pTypes": [],
				"retval": "bin",
				"shortDesc": ""
			},
			"Method": "#1023663567",
			"SetDataMode": {
				"desc": "?",
				"isfunc": true,
				"name": "SetDataMode",
				"pNames": ["mode"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetDTR": {
				"desc": "?",
				"isfunc": true,
				"name": "SetDTR",
				"pNames": ["onOff"],
				"pTypes": ["bin"],
				"shortDesc": ""
			},
			"SetMaxRead": {
				"desc": "define how many bytes you want to receive maximum",
				"isfunc": true,
				"name": "SetMaxRead",
				"pNames": ["bytes"],
				"pTypes": ["num_int"],
				"shortDesc": ""
			},
			"SetMaxWrite": {
				"desc": "define how many bytes you want to send maximum",
				"isfunc": true,
				"name": "SetMaxWrite",
				"pNames": ["bytes"],
				"pTypes": ["num_int"],
				"shortDesc": ""
			},
			"SetOnReceive": {
				"desc": "called when received data via USB",
				"isfunc": true,
				"name": "SetOnReceive",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetRTS": {
				"desc": "?",
				"isfunc": true,
				"name": "SetRTS",
				"pNames": ["onOff"],
				"pTypes": ["bin"],
				"shortDesc": ""
			},
			"SetSplitMode": {
				"desc": "?",
				"isfunc": true,
				"name": "SetSplitMode",
				"pNames": ["mode", "p2", "p3"],
				"pTypes": ["?", "?", "?"],
				"shortDesc": ""
			},
			"SetTimeout": {
				"desc": "",
				"isfunc": true,
				"name": "SetTimeout",
				"pNames": ["ms"],
				"pTypes": ["num_mls"],
				"shortDesc": ""
			},
			"Start": {
				"desc": "Start USB serial",
				"isfunc": true,
				"name": "Start",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Stop": {
				"desc": "Stop USB serial",
				"isfunc": true,
				"name": "Stop",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Write": {
				"desc": "send data to USB serial device",
				"isfunc": true,
				"name": "Write",
				"pNames": ["text", "encoding"],
				"pTypes": ["str", "str-UTF-8|US-ASCII"],
				"shortDesc": ""
			}
		}
	},
	"CreateVideoView": {
		"abbrev": "vid",
		"desc": "The **VideoView** can be used to play local video files from the filesystem or video streams from remote sources.\nUse **SetFile** to set the video file or video stream address.\n<js>player.SetFile( “https://file-examples.com/wp-content/uploads/2017/04/file_example_MP4_640_3MG.mp4” );</js>\nWhen the video is ready to play, the **OnReady** callback function will be called, you can then use **Play** to start playing the video.\n\nIf the video cannot be played, the OnError callback function will be called. Use **SetOnReady** and **SetOnError** to set the names of your **OnReady** and OnError callback functions.",
		"isfunc": true,
		"name": "CreateVideoView",
		"pNames": ["width", "height", "options"],
		"pTypes": ["num_srw", "num_srh", "?"],
		"retval": "VideoView",
		"shortDesc": "returns a VideoView object.",
		"subf": {
			"AdjustColor": "#1794786072",
			"ClearFocus": "#1362225380",
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetDuration": {
				"desc": "GetDuration in minutes",
				"isfunc": true,
				"name": "GetDuration",
				"pNames": [],
				"pTypes": [],
				"retval": "num_flt",
				"shortDesc": ""
			},
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-VideoView",
				"shortDesc": "Returns the control class name."
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsPlaying": {
				"desc": "returns whether video is currently playing",
				"isfunc": true,
				"name": "IsPlaying",
				"pNames": [],
				"pTypes": [],
				"retval": "bin",
				"shortDesc": ""
			},
			"IsReady": {
				"desc": "",
				"isfunc": true,
				"name": "IsReady",
				"pNames": [],
				"pTypes": [],
				"retval": "bin",
				"shortDesc": ""
			},
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"Pause": {
				"desc": "Pause video",
				"isfunc": true,
				"name": "Pause",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Play": {
				"desc": "Play video",
				"isfunc": true,
				"name": "Play",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"SeekTo": {
				"desc": "SeekTo given time in seconds",
				"isfunc": true,
				"name": "SeekTo",
				"pNames": ["seconds"],
				"pTypes": ["num_int"],
				"shortDesc": ""
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"SetFile": {
				"desc": "SetFile",
				"isfunc": true,
				"name": "SetFile",
				"pNames": ["file"],
				"pTypes": ["str_pth"],
				"shortDesc": ""
			},
			"SetMargins": "#1741900074",
			"SetOnComplete": {
				"desc": "? called when",
				"isfunc": true,
				"name": "SetOnComplete",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnError": {
				"desc": "called when an error appeared",
				"isfunc": true,
				"name": "SetOnError",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["error"],
						"pTypes": ["str"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnReady": {
				"desc": "called when playing video finished",
				"isfunc": true,
				"name": "SetOnReady",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnSubtitle": {
				"desc": "SetOnSubtitle",
				"isfunc": true,
				"name": "SetOnSubtitle",
				"pNames": ["callback"],
				"pTypes": ["?"],
				"shortDesc": "SetOnSubtitle"
			},
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetSubtitles": {
				"desc": "SetSubtitles",
				"isfunc": true,
				"name": "SetSubtitles",
				"pNames": ["file"],
				"pTypes": ["?"],
				"shortDesc": "SetSubtitles"
			},
			"SetVisibility": "#1004824195",
			"SetVolume": {
				"desc": "SetVolume",
				"isfunc": true,
				"name": "SetVolume",
				"pNames": ["left", "right"],
				"pTypes": ["num_prc", "num_prc"],
				"shortDesc": ""
			},
			"Show": "#1243391562",
			"Stop": {
				"desc": "Stop video",
				"isfunc": true,
				"name": "Stop",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Tween": "#2114624769"
		}
	},
	"CreateWallpaper": {
		"abbrev": "wlp",
		"desc": "CreateWallpaper",
		"isfunc": true,
		"name": "CreateWallpaper",
		"pNames": ["options"],
		"pTypes": ["?"],
		"shortDesc": "CreateWallpaper",
		"subf": {
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "GetType"
			},
			"IsVisible": "#1814300863",
			"Method": "#1023663567"
		}
	},
	"CreateWebServer": {
		"abbrev": "sock",
		"desc": "Web servers form the foundation of the web, especially the Internet of Things (IoT). Turning your phone or tablet into a web server or creating a network of interconnected devices is very simple with DroidScript. Set a document root for the server using the SetFolder method of the WebServer object. This is the folder location on your device that your web pages will be served from.\n<js>wbs.SetFolder( path );</js>\nStart the server using the Start method.\n<js> wbs.Start();</js>\nAnd stop it using the Stop method.\n<js>wbs.Stop();</js>\nThe following example shows how to create a basic webserver for serving pages over WiFi from your device. It will serve a built in demo page.\n\nFor simplicity some of the features in the demo page will not work in this first example. Try them and you will see how the server presents errors. The next example shows how to handle all the features of the demo page.\n<sample Basic>\nThe second example shows how to accept file upload and permit directory listings by including permissions in the options parameter of the app.CreateWebServer method.\n\nIt also adds a servlet to respond to messsages from the web client. A servelet can be used to process data supplied by a user via form elements or it can handle requests made from the client application.\n\nTo get a better understanding of how client - server messaging works you can view the source of the served demo page and the network view in the developer tools of your favorite browser to see how the simple GET request is sent from the client browser to the servlet for processing by the OnServlet function when the Send Message button is clicked.\n<sample File Uploads>\nWeb sockets are faster than servlets and can be used for both client - server applications or peer-to-peer systems where each connected node is both a client and a server without a centralized server.\n\nThis makes web sockets very useful for datasharing in multiplayer games.\n\nAll requests sent to the same servlet will queue up behind each other and are processed in order. The server application is said to be blocking all other requests whilst a servlet completes each task synchronously.\n\nWeb sockets recieve the request and then start a process to handle the request. When the task is complete any data or messages to be returned will be sent back to the relevant connected clients. In this case the server application is said to be non-blocking or asynchronous.\n\nWeb sockets can be used for broadcast purposes, for example sending the same message to all connected clients. They can also be used to send different direct messages to a specific one device using the IP address.\n\nThe following example demonstrates web sockets being used to receive messages from and broadcasting messages to connected devices.\n<sample Send and Receive messages>",
		"isfunc": true,
		"name": "CreateWebServer",
		"pNames": ["port", "options"],
		"pTypes": ["num_int", "str-ListDir:Show files in folder|Upload:Allow file uploads|NoWelcome:Ignore index.html|Reflect:Reflect web socket messages back to all clients"],
		"retval": "WebServer",
		"shortDesc": "Returns a WebServer object.",
		"subf": {
			"AddRedirect": {
				"desc": "",
				"isfunc": true,
				"name": "AddRedirect",
				"pNames": ["pattern", "location"],
				"pTypes": ["?", "?"],
				"shortDesc": ""
			},
			"AddServlet": {
				"desc": "",
				"isfunc": true,
				"name": "AddServlet",
				"pNames": ["path", "callback"],
				"pTypes": ["?", "?"],
				"shortDesc": ""
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-WebServer",
				"shortDesc": "Returns the control class name."
			},
			"GetWebSockClients": {
				"desc": "",
				"isfunc": true,
				"name": "GetWebSockClients",
				"pNames": [],
				"pTypes": [],
				"retval": "?",
				"shortDesc": ""
			},
			"Method": "#1023663567",
			"SendText": {
				"desc": "",
				"isfunc": true,
				"name": "SendText",
				"pNames": ["txt", "ip"],
				"pTypes": ["?", "?"],
				"shortDesc": ""
			},
			"SetFolder": {
				"desc": "",
				"isfunc": true,
				"name": "SetFolder",
				"pNames": ["folder"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetOnReceive": {
				"desc": "",
				"isfunc": true,
				"name": "SetOnReceive",
				"pNames": ["callback"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetOnUpload": {
				"desc": "SetOnUpload",
				"isfunc": true,
				"name": "SetOnUpload",
				"pNames": ["callback"],
				"pTypes": ["?"],
				"shortDesc": "SetOnUpload"
			},
			"SetResponse": {
				"desc": "",
				"isfunc": true,
				"name": "SetResponse",
				"pNames": ["text"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetUploadFolder": {
				"desc": "",
				"isfunc": true,
				"name": "SetUploadFolder",
				"pNames": ["folder"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"Start": {
				"desc": "",
				"isfunc": true,
				"name": "Start",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Stop": {
				"desc": "",
				"isfunc": true,
				"name": "Stop",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			}
		}
	},
	"CreateWebSocket": {
		"abbrev": "wbs",
		"desc": "?",
		"isfunc": true,
		"name": "CreateWebSocket",
		"pNames": ["id", "ip", "port", "options"],
		"pTypes": ["?", "?", "?", "?"],
		"retval": "WebSocket",
		"shortDesc": "Returns a WebSocket object.",
		"subf": {
			"Close": {
				"desc": "close web socket",
				"isfunc": true,
				"name": "Close",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"GetSocket": {
				"desc": "",
				"isfunc": true,
				"name": "GetSocket",
				"pNames": [],
				"pTypes": [],
				"retval": "?",
				"shortDesc": ""
			},
			"IsOpen": {
				"desc": "return whether WS was opened",
				"isfunc": true,
				"name": "IsOpen",
				"pNames": [],
				"pTypes": [],
				"retval": "bin",
				"shortDesc": ""
			},
			"Send": {
				"desc": "send text over the WS",
				"isfunc": true,
				"name": "Send",
				"pNames": ["message"],
				"pTypes": ["str"],
				"shortDesc": ""
			},
			"SetOnClose": {
				"desc": "called when WS closed",
				"isfunc": true,
				"name": "SetOnClose",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnMessage": {
				"desc": "called when recived text",
				"isfunc": true,
				"name": "SetOnMessage",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["message"],
						"pTypes": ["str"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnOpen": {
				"desc": "called when WS loaded/opened",
				"isfunc": true,
				"name": "SetOnOpen",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			}
		}
	},
	"CreateWebView": {
		"abbrev": "web",
		"desc": "You can create a control to display local or remote web pages in your App using the **CreateWebView** method.\nIf you are loading remote web pages, then you might want to use the **SetOnProgress** method to set the name of a callback function that you want called to report the progress of loading the page.\n\nYou can use the **LoadUrl** method to load an internal or external web page or the **LoadHtml** method to load text directly from within your App.\n<js>web.LoadUrl( url, options );</js>\n<js> web.LoadHtml( html, baseFolder, options );</js>\n\nIf you need to, you can use the **Execute** method to execute JavaScript code within the WebView.\n<js>web.Execute( text );</js>",
		"isfunc": true,
		"name": "CreateWebView",
		"pNames": ["width", "height", "options", "zoom"],
		"pTypes": ["?", "?", "str-NoActionBar:prevents copy/paste popup|NoPause|NoApp|AllowCapture:enable use of camera and microphone (and WebRTC),UseBasicInput:makes softkeyboard useful for html code editors,Overview,NoScrollBars,ScrollFade", "?"],
		"retval": "WebView",
		"shortDesc": "Returns a WebView object.",
		"subf": {
			"AdjustColor": "#1794786072",
			"Back": {
				"desc": "load previous page if possible",
				"isfunc": true,
				"name": "Back",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"CanGoBack": {
				"desc": "returns whether there is a previous page",
				"isfunc": true,
				"name": "CanGoBack",
				"pNames": [],
				"pTypes": [],
				"retval": "bin",
				"shortDesc": ""
			},
			"CanGoForward": {
				"desc": "returns whether there is a following page",
				"isfunc": true,
				"name": "CanGoForward",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Capture": {
				"desc": "? screenshot?",
				"isfunc": true,
				"name": "Capture",
				"pNames": ["file"],
				"pTypes": ["str_pth"],
				"shortDesc": ""
			},
			"ClearFocus": "#1362225380",
			"ClearHistory": {
				"desc": "ClearHistory for Back() and Forward()",
				"isfunc": true,
				"name": "ClearHistory",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Execute": {
				"desc": "",
				"isfunc": true,
				"name": "Execute",
				"pNames": ["code", "callback"],
				"pTypes": ["?", "?"],
				"shortDesc": ""
			},
			"Focus": "#7324472769",
			"Forward": {
				"desc": "losd next page",
				"isfunc": true,
				"name": "Forward",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-WebView",
				"shortDesc": "Returns the control class name."
			},
			"GetUrl": {
				"desc": "returns current website url",
				"isfunc": true,
				"name": "GetUrl",
				"pNames": [],
				"pTypes": [],
				"retval": "str_url",
				"shortDesc": ""
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"LoadHtml": {
				"desc": "",
				"isfunc": true,
				"name": "LoadHtml",
				"pNames": ["html", "baseFolder", "options"],
				"pTypes": ["str_htm", "str_pth", "str-allowzoom:support zooming gestures,autozoom:zoom out the content to fit the WebView by width,wide:support the viewport meta tag, a wide viewport is used if the viewport meta tag is missing,nolongtouch:WebView will not react to long touches"],
				"shortDesc": ""
			},
			"LoadUrl": {
				"desc": "LoadUrl",
				"isfunc": true,
				"name": "LoadUrl",
				"pNames": ["url", "options"],
				"pTypes": ["str_url", "str-allowzoom:support zooming gestures,autozoom:zoom out the content to fit the WebView by width,wide:support the viewport meta tag, a wide viewport is used if the viewport meta tag is missing,nolongtouch:WebView will not react to long touches"],
				"shortDesc": ""
			},
			"Method": "#1023663567",
			"Print": {
				"desc": "Print current page",
				"isfunc": true,
				"name": "Print",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Reload": {
				"desc": "Reload current page",
				"isfunc": true,
				"name": "Reload",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"SetMargins": "#1741900074",
			"SetOnConsole": {
				"desc": "SetOnConsole",
				"isfunc": true,
				"name": "SetOnConsole",
				"pNames": ["callback"],
				"pTypes": ["?"],
				"shortDesc": "SetOnConsole"
			},
			"SetOnError": {
				"desc": "called when error appeared",
				"isfunc": true,
				"name": "SetOnError",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["error"],
						"pTypes": ["str"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnProgress": {
				"desc": "?",
				"isfunc": true,
				"name": "SetOnProgress",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": [],
						"pTypes": [],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetOnTouch": "#2088093920",
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetRedirect": {
				"desc": "?",
				"isfunc": true,
				"name": "SetRedirect",
				"pNames": ["urlFrom", "urlTo"],
				"pTypes": ["str_url", "str_url"],
				"shortDesc": ""
			},
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetTouchMode": {
				"desc": "SetTouchMode",
				"isfunc": true,
				"name": "SetTouchMode",
				"pNames": ["mode"],
				"pTypes": ["?"],
				"shortDesc": "SetTouchMode"
			},
			"SetUserAgent": {
				"desc": "?",
				"isfunc": true,
				"name": "SetUserAgent",
				"pNames": ["agent"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"SetUserCreds": {
				"desc": "?",
				"isfunc": true,
				"name": "SetUserCreds",
				"pNames": ["name", "password"],
				"pTypes": ["str", "?"],
				"shortDesc": ""
			},
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"SimulateKey": {
				"desc": "?",
				"isfunc": true,
				"name": "SimulateKey",
				"pNames": ["keyName", "modifiers", "pause"],
				"pTypes": ["?", "?", "?"],
				"shortDesc": ""
			},
			"Tween": "#2114624769"
		}
	},
	"CreateWizard": {
		"abbrev": "wiz",
		"desc": "CreateWizard",
		"isfunc": true,
		"name": "CreateWizard",
		"pNames": ["title", "width", "height", "callback"],
		"pTypes": ["?", "?", "?", "?"],
		"shortDesc": "CreateWizard",
		"subf": {
			"Dismiss": {
				"desc": "Dismiss",
				"isfunc": true,
				"name": "Dismiss",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "Dismiss"
			},
			"Finish": {
				"desc": "Finish",
				"isfunc": true,
				"name": "Finish",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "Finish"
			},
			"GetButtons": {
				"desc": "GetButtons",
				"isfunc": true,
				"name": "GetButtons",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "GetButtons"
			},
			"GetDialog": {
				"desc": "GetDialog",
				"isfunc": true,
				"name": "GetDialog",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "GetDialog"
			},
			"GetLayout": {
				"desc": "GetLayout",
				"isfunc": true,
				"name": "GetLayout",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "GetLayout"
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "GetType"
			},
			"Hide": "#5372805812",
			"IsVisible": "#1814300863",
			"Show": "#1243391562"
		}
	},
	"CreateYesNoDialog": {
		"abbrev": "ynd",
		"desc": "Returns a YesNoDialog object.",
		"isfunc": true,
		"name": "CreateYesNoDialog",
		"pNames": ["message", "options"],
		"pTypes": ["?", "str-TouchModal"],
		"retval": "YesNoDialog",
		"shortDesc": "Returns a YesNoDialog object.",
		"subf": {
			"AdjustColor": "#1794786072",
			"Dismiss": {
				"desc": "hide dialog",
				"isfunc": true,
				"name": "Dismiss",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-YesNoDialog",
				"shortDesc": "Returns the control class name."
			},
			"Hide": "#5372805812",
			"Method": "#1023663567",
			"SetBackColor": "#3857861627",
			"SetBackground": "#1239127541",
			"SetButtonText": {
				"desc": "changes text of the two buttons",
				"isfunc": true,
				"name": "SetButtonText",
				"pNames": ["yes", "no"],
				"pTypes": ["str", "str"],
				"shortDesc": ""
			},
			"SetOnTouch": {
				"desc": "called when user touches object with pressed button text as parameter",
				"isfunc": true,
				"name": "SetOnTouch",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"isfunc": true,
						"name": "callback",
						"pNames": ["result"],
						"pTypes": ["str"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": ""
			},
			"SetSize": "#1296070870",
			"Show": "#1243391562"
		}
	},
	"CreateZipUtil": {
		"abbrev": "zip",
		"desc": "Returns a ZipUtil object.",
		"isfunc": true,
		"name": "CreateZipUtil",
		"pNames": ["mode"],
		"pTypes": ["?"],
		"retval": "ZipUtil",
		"shortDesc": "Returns a ZipUtil object.",
		"subf": {
			"AddFile": {
				"desc": "AddFile",
				"isfunc": true,
				"name": "AddFile",
				"pNames": ["name", "file"],
				"pTypes": ["str", "str_pth"],
				"shortDesc": ""
			},
			"AddText": {
				"desc": "?",
				"isfunc": true,
				"name": "AddText",
				"pNames": ["name", "text"],
				"pTypes": ["str", "str"],
				"shortDesc": ""
			},
			"Close": {
				"desc": "Close zip util",
				"isfunc": true,
				"name": "Close",
				"pNames": [],
				"pTypes": [],
				"shortDesc": ""
			},
			"Create": {
				"desc": "Create new zip file",
				"isfunc": true,
				"name": "Create",
				"pNames": ["file"],
				"pTypes": ["str_pth"],
				"shortDesc": ""
			},
			"CreateDebugKey": {
				"desc": "",
				"isfunc": true,
				"name": "CreateDebugKey",
				"pNames": ["file"],
				"pTypes": ["?"],
				"shortDesc": ""
			},
			"CreateKey": {
				"desc": "",
				"isfunc": true,
				"name": "CreateKey",
				"pNames": ["file", "password", "name", "org"],
				"pTypes": ["?", "?", "?", "?"],
				"shortDesc": ""
			},
			"Extract": {
				"desc": "Extract zip file",
				"isfunc": true,
				"name": "Extract",
				"pNames": ["name", "file"],
				"pTypes": ["str", "str_pth"],
				"shortDesc": ""
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"retval": "str-ZipUtil",
				"shortDesc": "Returns the control class name."
			},
			"List": {
				"desc": "List zip directory",
				"isfunc": true,
				"name": "List",
				"pNames": ["path"],
				"pTypes": ["str_pth"],
				"shortDesc": ""
			},
			"Method": "#1023663567",
			"Open": {
				"desc": "? read file inside zip?",
				"isfunc": true,
				"name": "Open",
				"pNames": ["file"],
				"pTypes": ["str_pth"],
				"shortDesc": ""
			},
			"Sign": {
				"desc": "",
				"isfunc": true,
				"name": "Sign",
				"pNames": ["fileIn", "fileOut", "keyStore", "password"],
				"pTypes": ["?", "?", "?", "?"],
				"shortDesc": ""
			},
			"UpdateManifest": {
				"desc": "",
				"isfunc": true,
				"name": "UpdateManifest",
				"pNames": ["fileIn", "fileOut", "packageName", "appName", "permissions", "options"],
				"pTypes": ["?", "?", "?", "?", "?", "?"],
				"shortDesc": ""
			}
		}
	},
	"Debug": {
		"desc": "This function is an app equivalent to console.log(msg) which writes text into a console visible in debug mode “true” or “console”.",
		"isfunc": true,
		"name": "Debug",
		"pNames": ["message"],
		"pTypes": ["str"],
		"shortDesc": "Debug messages to the console."
	},
	"DeleteDatabase": {
		"desc": "DeleteDatabase removes a specific database",
		"isfunc": true,
		"name": "DeleteDatabase",
		"pNames": ["name"],
		"pTypes": ["str"],
		"shortDesc": "Deletes a database."
	},
	"DeleteFile": {
		"desc": "DeleteFile deletes a given file from the filesystem. This makes it hard to restore it!",
		"isfunc": true,
		"name": "DeleteFile",
		"pNames": ["file"],
		"pTypes": ["str_pth"],
		"shortDesc": "Deletes a file"
	},
	"DeleteFolder": {
		"desc": "DeleteFolder does the same as DeleteFile but with folders. It recursively removes all files and folders of the given folder and finally deletes it.",
		"isfunc": true,
		"name": "DeleteFolder",
		"pNames": ["folder"],
		"pTypes": ["str_pth"],
		"shortDesc": "Delete a folder."
	},
	"DestroyLayout": {
		"desc": "DestroyLayout destroys a layout and all its contents so it can't be used any more. As a result, all memory occupied by these objects will be released.",
		"isfunc": true,
		"name": "DestroyLayout",
		"pNames": ["layout"],
		"pTypes": ["dso_lay"],
		"shortDesc": "Destroy a layout."
	},
	"DisableKeys": {
		"desc": "DisableKeys prevents the default behavior of several hard, soft or keyboard keys.\nThis way you can apply a custom action for them using @SetOnKey.\n\nYou can find the complete list of keycodes on the [https://developer.android.com/reference/android/view/KeyEvent#summary](Android Developer Page)",
		"isfunc": true,
		"name": "DisableKeys",
		"pNames": ["keyList"],
		"pTypes": ["str_com-VOLUME_DOWN,VOLUME_UP,FORWARD,BACK,MENU,ENTER,..."],
		"shortDesc": "Disable specific device keys."
	},
	"DisableTouch": {
		"desc": "Use this method to prevent any user interaction with the app.\nYou could use this for a safe mode for a slideshow.",
		"isfunc": true,
		"name": "DisableTouch",
		"pNames": ["disable"],
		"pTypes": ["bin"],
		"shortDesc": "Suppress all touch events."
	},
	"DiscoverBtDevices": {
		"desc": "Use DiscoverBtDevices to search for other bluetooth devices which are not paired with the current device. If any was found it will be forwarded directly to the **onFound** callback. If the search has finished **onComplete** function will be called.",
		"isfunc": true,
		"name": "DiscoverBtDevices",
		"pNames": ["filter", "onFound", "onComplete"],
		"pTypes": ["str", {
				"desc": "Callback",
				"isfunc": true,
				"name": "callback",
				"pNames": ["name", "address"],
				"pTypes": ["str", "str"],
				"shortDesc": "callback"
			}, {
				"desc": "Callback",
				"isfunc": true,
				"name": "callback",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "callback"
			}],
		"shortDesc": "Search for nearby bluetooth devices."
	},
	"DownloadFile": {
		"desc": "Downloads a file using the Android's built-in download manager which creates a notification with the current download status and a custom title and description.\n\nIn some cases there seems to appear a dialog - you can prevent that using the _NoDialog_ option.\n\nWith this methof you won't be able to get a OnComplete callback - if you need that check out @CreateDownloader.",
		"isfunc": true,
		"name": "DownloadFile",
		"pNames": ["source", "destination", "title", "description", "options"],
		"pTypes": ["str", "str_pth", "str", "str", "str-NoDialog"],
		"shortDesc": "Download a file with Androids download manager."
	},
	"EnableBackKey": {
		"desc": "Allows to en- or disable the devices back key. When it is disabled the app event _OnBack()_ will called when the user presses the back button - otherwise the app exits.\n\nYou can use this method to create a custom _BACK_ command that allows you to navigate between your layouts.\n\n",
		"isfunc": true,
		"name": "EnableBackKey",
		"pNames": ["enable"],
		"pTypes": ["bin"],
		"shortDesc": "EnableBackKey"
	},
	"Error": {
		"desc": "Shows a detailed error message with message, file and line in an asynchroneous dialog. You can also set it to quit the app after the user dismisses the dialog.",
		"isfunc": true,
		"name": "Error",
		"pNames": ["message", "line", "file", "quit"],
		"pTypes": ["str", "num_int", "str_pth", "bin"],
		"shortDesc": "Show an error message."
	},
	"Execute": {
		"desc": "Executes a piece of code asynchroneously to your program. It is designed for interacting with your main app from within a [CreateWebView.htm](WebView).",
		"isfunc": true,
		"name": "Execute",
		"pNames": ["js"],
		"pTypes": ["str_jsc"],
		"shortDesc": "Execute js code from your app or a WebWiew."
	},
	"Exit": {
		"desc": "With Exit you can cancel and completely stop the app. You can also forcefully **kill** the app by passing true as first argument.",
		"isfunc": true,
		"name": "Exit",
		"pNames": ["kill"],
		"pTypes": ["bin"],
		"shortDesc": "Close and stop the app."
	},
	"ExtExec": {
		"desc": "ExtExec allows you to execute Linux shell commands in the powerful Linux environment provided by the free app called Termux.\nThe Termux app runs as a service and there's almost no limit to what you can achieve with a full blown Linux machine running on your Android device!\n\nHow about installing git, or nodejs or using ssh or gzip.\nTry typing 'busybox' at the terminal prompt to see what built-in commands are already available to you.\n<h3>Enable Termux</h3>\nTo **enable termux** support you have to install [https://play.google.com/store/apps/details?id=com.termux](Termux) and the [https://play.google.com/store/apps/details?id=com.termux.tasker](Tasker) Plugin from PlayStore first.\n\nThen give termux **sdcard permissions** in the Android settings under apps/termux.\n\nAfter that create a symbolic link from the tasker plugin folder to your home directory:\n<bash>mkdir -p .termux /sdcard/termux/scripts\nln -s /sdcard/termux/scripts .termux/tasker</bash>Finally you can run a termux shell script from inside DroidScript:",
		"isfunc": true,
		"name": "ExtExec",
		"pNames": ["name", "file", "args", "options"],
		"pTypes": ["str-termux", "str_pth", "str", "str-hide"],
		"shortDesc": "Execute a bash script using Termux."
	},
	"ExtractAssets": {
		"desc": "ExtractAssets allows to extract folders and files from your compiled APK to the local storage. But it works for local DroidScript projects as well. When override is false, already existant files will be kept and not overridden.",
		"isfunc": true,
		"name": "ExtractAssets",
		"pNames": ["source", "destination", "overwrite"],
		"pTypes": ["str_pth", "str_pth", "bin"],
		"shortDesc": "Extract app assets to a local directory."
	},
	"ExtractPlugins": {
		"desc": "ExtractPlugins overrides old plugin versions in the app's private folder with newer versions shipped with the APK.\n\nThis function is for debug purposes to forcefully update the plugins of an app even if the APK version did not change.",
		"isfunc": true,
		"name": "ExtractPlugins",
		"pNames": [],
		"pTypes": [],
		"shortDesc": "Forcefully update your plugins."
	},
	"FileExists": {
		"desc": "FileExists returns a boolean indicating whether a given file exists in your filesystem or not.",
		"isfunc": true,
		"name": "FileExists",
		"pNames": ["file"],
		"pTypes": ["str_pth"],
		"retval": "bin",
		"shortDesc": "Returns whether the file exists."
	},
	"FolderExists": {
		"desc": "Returns a boolean indicating whether a given folder exits or not.",
		"isfunc": true,
		"name": "FolderExists",
		"pNames": ["folder"],
		"pTypes": ["str_pth"],
		"retval": "bin",
		"shortDesc": "Returns whether the folder exists."
	},
	"GA": {
		"desc": "With **G**oogle **A**nalytics implemented via analytics.js you can track the use of your apps in real-time and watch as people are using it all over the planet and see what city they are in. You can get lots of usage statistics including what version of your app they are using, what version of Android, the time of day they are using your app, what device they are using and even which parts of the app people are using the most.\n\nYou can find more informations on the [https://developers.google.com/analytics/devguides/collection/analyticsjs/command-queue-reference](Google Developers page).",
		"isfunc": true,
		"name": "GA",
		"pNames": ["command", "[...fields]", "options"],
		"pTypes": ["str-create|send|set|require|provide|remove", "str", "obj"],
		"shortDesc": "Google Analytics"
	},
	"GetAccounts": {
		"desc": "Returns a string of all known account names on the device separated with comma ','.",
		"isfunc": true,
		"name": "GetAccounts",
		"pNames": [],
		"pTypes": [],
		"retval": "str_com",
		"shortDesc": "GetAccounts"
	},
	"GetActivities": {
		"desc": "GetActivities returns a list of object of currently running activities.",
		"isfunc": true,
		"name": "GetActivities",
		"pNames": [],
		"pTypes": [],
		"retval": "lst-[{ label:str, packageName:str, className: str }]",
		"shortDesc": "GetActivities"
	},
	"GetAppName": {
		"desc": "Returns the name of the current app.",
		"isfunc": true,
		"name": "GetAppName",
		"pNames": [],
		"pTypes": [],
		"retval": "str",
		"shortDesc": "Get current app name."
	},
	"GetAppPath": {
		"desc": "Returns the path to the app assets folder. If it's a DroidScript project the path should be “/sdcard/DroidScript/appname” - If it is an apk it is “/Assets”",
		"isfunc": true,
		"name": "GetAppPath",
		"pNames": [],
		"pTypes": [],
		"retval": "str_pth",
		"shortDesc": "Get path to app assets"
	},
	"GetBatteryLevel": {
		"desc": "Returns the current battery level of the device in percent.",
		"isfunc": true,
		"name": "GetBatteryLevel",
		"pNames": [],
		"pTypes": [],
		"retval": "num_prc",
		"shortDesc": "Get current battery level."
	},
	"GetBluetoothAddress": {
		"desc": "Returns the hexadecimal Bluetooth address of the device, following the pattern “00:00:00:00:00:00”.",
		"isfunc": true,
		"name": "GetBluetoothAddress",
		"pNames": [],
		"pTypes": [],
		"retval": "str",
		"shortDesc": "Get the bluetooth address."
	},
	"GetBluetoothName": {
		"desc": "Returns the Bluetooth name of the device",
		"isfunc": true,
		"name": "GetBluetoothName",
		"pNames": [],
		"pTypes": [],
		"retval": "str",
		"shortDesc": "Get the bluetooth name"
	},
	"GetBtProfileState": {
		"desc": "Returns the Bluetooth State of a given Bt connection type.",
		"isfunc": true,
		"name": "GetBtProfileState",
		"pNames": ["type"],
		"pTypes": ["str-a2dp|headset|gatt|health"],
		"retval": "str-Connected|Disconnected",
		"shortDesc": "Returns Bluetooth type connected state."
	},
	"GetBuildNum": {
		"desc": "GetBuildNum returns the build number of an APK.",
		"isfunc": true,
		"name": "GetBuildNum",
		"pNames": [],
		"pTypes": [],
		"retval": "num_int",
		"shortDesc": "Get APK build number."
	},
	"GetChargeType": {
		"desc": "Returns the current charge type. If the device isn't charging the result is “None”.",
		"isfunc": true,
		"name": "GetChargeType",
		"pNames": [],
		"pTypes": [],
		"retval": "str-AC|USB|Wireless|None",
		"shortDesc": "Get current charge type."
	},
	"GetClipboardText": {
		"desc": "GetClipboardText returns text that was last copied to the clipboard.",
		"isfunc": true,
		"name": "GetClipboardText",
		"pNames": [],
		"pTypes": [],
		"retval": "str",
		"shortDesc": "Get latest clipboard text."
	},
	"GetCountry": {
		"desc": "Returns the name of the device country (ie. “United Kingdom” or “Deutschland”)",
		"isfunc": true,
		"name": "GetCountry",
		"pNames": [],
		"pTypes": [],
		"retval": "str",
		"shortDesc": "Get user country name."
	},
	"GetCountryCode": {
		"desc": "Returns the code of the device country (ie. “GB” or “DE”)",
		"isfunc": true,
		"name": "GetCountryCode",
		"pNames": [],
		"pTypes": [],
		"retval": "str",
		"shortDesc": "Get users country code."
	},
	"GetData": {
		"desc": "Returns data stored via app.SetData(key, value). All data will be lost when the app is closed.",
		"isfunc": true,
		"name": "GetData",
		"pNames": ["name"],
		"pTypes": ["str"],
		"retval": "str",
		"shortDesc": "Retreive saved data."
	},
	"GetDatabaseFolder": {
		"desc": "Returns the path to the database folder of the app. An example pattern is “/data/data/packageName/databases”.",
		"isfunc": true,
		"name": "GetDatabaseFolder",
		"pNames": [],
		"pTypes": [],
		"retval": "str_pth",
		"shortDesc": "Get apps database folder."
	},
	"GetDefaultOrientation": {
		"desc": "Returns the default Orientation of the device. The result modes can be _“Portrait”_ if the device width is smaller than the device height, or _“Landscape”_ vice versa.",
		"isfunc": true,
		"name": "GetDefaultOrientation",
		"pNames": [],
		"pTypes": [],
		"retval": "str-Portrait|Landscape",
		"shortDesc": "Get devces default orientation."
	},
	"GetDeviceId": {
		"desc": "Returns the alphanumeric ID of the device which is different for each device",
		"isfunc": true,
		"name": "GetDeviceId",
		"pNames": [],
		"pTypes": [],
		"retval": "str",
		"shortDesc": "Get device ID."
	},
	"GetDisplayHeight": {
		"desc": "Get the display height of the app in pixels. Therefore the android status bar and virtual buttons won't be included to the value.",
		"isfunc": true,
		"name": "GetDisplayHeight",
		"pNames": [],
		"pTypes": [],
		"retval": "num_pxl",
		"shortDesc": "Get apps display height."
	},
	"GetDisplayWidth": {
		"desc": "Get the display width of the app in pixels. Therefore virtual buttons won't be included to the value.",
		"isfunc": true,
		"name": "GetDisplayWidth",
		"pNames": [],
		"pTypes": [],
		"retval": "num_pxl",
		"shortDesc": "Get apps display width."
	},
	"GetDrawerState": {
		"desc": "GetDrawerState",
		"isfunc": true,
		"name": "GetDrawerState",
		"pNames": ["side"],
		"pTypes": ["?"],
		"shortDesc": "GetDrawerState"
	},
	"GetDSVersion": {
		"desc": "Returns the current DroidScript version number in the format 0.00.",
		"isfunc": true,
		"name": "GetDSVersion",
		"pNames": [],
		"pTypes": [],
		"retval": "num_flt",
		"shortDesc": "Get current DS version."
	},
	"GetEnv": {
		"desc": "Returns the value of an environment variable defined on the device.",
		"isfunc": true,
		"name": "GetEnv",
		"pNames": ["name"],
		"pTypes": ["str-PATH|..."],
		"retval": "str",
		"shortDesc": "Get environment variable."
	},
	"GetExternalFolder": {
		"desc": "GetExternalFolder returns the path to the external micro sdcard of the device. Normally it is smth like “/storage/extsd” or “/storage/extSdCard”",
		"isfunc": true,
		"name": "GetExternalFolder",
		"pNames": [],
		"pTypes": [],
		"retval": "str_pth",
		"shortDesc": "Get external sdcard folder."
	},
	"GetFileDate": {
		"desc": "GetFileDate returns a Date object containing the last modified date of a file or folder.",
		"isfunc": true,
		"name": "GetFileDate",
		"pNames": ["file"],
		"pTypes": ["str_pth"],
		"retval": "str",
		"shortDesc": "Get last modified date of a file or folder."
	},
	"GetFileSize": {
		"desc": "GetFileSize returns the size of a file or folder in bytes",
		"isfunc": true,
		"name": "GetFileSize",
		"pNames": ["file"],
		"pTypes": ["str"],
		"retval": "num_flt",
		"shortDesc": "Get the size of a file or folder."
	},
	"GetFreeSpace": {
		"desc": "Returns the free space of the internal or external storage in GigaBytes.",
		"isfunc": true,
		"name": "GetFreeSpace",
		"pNames": ["mode"],
		"pTypes": ["str-internal|external"],
		"retval": "num_gbt",
		"shortDesc": "Get remaining storage size."
	},
	"GetInstalledApps": {
		"desc": "Returns a list of objects containing informations about installed apps.",
		"isfunc": true,
		"name": "GetInstalledApps",
		"pNames": [],
		"pTypes": [],
		"retval": "lst-[{ packageName:str, className:str, uid:num_int, targetSdkVersion:num_int, dataDir:str_pth, sourceDir:str_pth, publicSourceDir:str_pth, nativeLibraryDir:str_pth }]",
		"shortDesc": "Get data about installed apps."
	},
	"GetIntent": {
		"desc": "Returns an intent object sent to the app.",
		"isfunc": true,
		"name": "GetIntent",
		"pNames": [],
		"pTypes": [],
		"retval": "obj-{ action:str, type:str, data:str, flags:num_int, extras: { app_intent:str, app_file:str_pth, app_options:str } }",
		"shortDesc": "Get received intent data."
	},
	"GetInternalFolder": {
		"desc": "Get devices internal “/sdcard/” path. Normally it should be “/storage/emulated/legacy”.",
		"isfunc": true,
		"name": "GetInternalFolder",
		"pNames": [],
		"pTypes": [],
		"retval": "str_pth",
		"shortDesc": "Get internal storage path."
	},
	"GetIPAddress": {
        "desc": "GetIPAddress returns the current network ip address. It should look like “0.0.0.0” which is the default value for disabled internet connection. The individual numbers can have values between 0 and 255.",
		"isfunc": true,
		"name": "GetIPAddress",
		"pNames": [],
		"pTypes": [],
		"retval": "str",
		"shortDesc": "Get network IP address"
	},
	"GetJoystickName": {
		"desc": "Returns the name of a conected joystick.",
		"isfunc": true,
		"name": "GetJoystickName",
		"pNames": ["id"],
		"pTypes": ["num_int"],
		"retval": "?",
		"shortDesc": "GetJoystickName"
	},
	"GetJoystickState": {
		"desc": "Returns the state of a connected joystick. The key can have many values depending on the used controller. The axis-n keys are for different joystick x/y/z axes or the D-Pad - you will best try which key stands for which button with the attached example.",
		"isfunc": true,
		"name": "GetJoystickState",
		"pNames": ["id", "key"],
		"pTypes": ["num_int", "str-A|B|C|X|Y|Z|R1|L1|Left|Right|Up|Down|Start|ThumbLeft|ThumbRight|axis-0..9"],
		"retval": "num",
		"shortDesc": "GetJoystickState"
	},
	"GetKeyboardHeight": {
		"desc": "Returns the height of the device keyboard in pixels. Returns _0_ if the keyboard is hidden.",
		"isfunc": true,
		"name": "GetKeyboardHeight",
		"pNames": [],
		"pTypes": [],
		"retval": "str_pxl",
		"shortDesc": "Get current keyboard height."
	},
	"GetLanguage": {
		"desc": "GetLanguage returns the name of the devices language (ie. “English” or “Deutsch”)",
		"isfunc": true,
		"name": "GetLanguage",
		"pNames": [],
		"pTypes": [],
		"retval": "str",
		"shortDesc": "GetLanguage"
	},
	"GetLanguageCode": {
		"desc": "GetLanguageCode returns the user language code (ie. “en” or “de”)",
		"isfunc": true,
		"name": "GetLanguageCode",
		"pNames": [],
		"pTypes": [],
		"retval": "str",
		"shortDesc": "Get user language code."
	},
	"GetLastButton": {
		"desc": "Returns the last button which was pressed",
		"isfunc": true,
		"name": "GetLastButton",
		"pNames": [],
		"pTypes": [],
		"retval": "dso",
		"shortDesc": "GetLastButton"
	},
	"GetLastCheckBox": {
		"desc": "Returns the last check box which was pressed",
		"isfunc": true,
		"name": "GetLastCheckBox",
		"pNames": [],
		"pTypes": [],
		"retval": "dso",
		"shortDesc": "GetLastCheckBox"
	},
	"GetLastImage": {
		"desc": "Returns the last image which was pressed",
		"isfunc": true,
		"name": "GetLastImage",
		"pNames": [],
		"pTypes": [],
		"retval": "dso",
		"shortDesc": "GetLastImage"
	},
	"GetLastToggle": {
		"desc": "Returns the last toggle which was pressed",
		"isfunc": true,
		"name": "GetLastToggle",
		"pNames": [],
		"pTypes": [],
		"retval": "dso",
		"shortDesc": "GetLastToggle"
	},
	"GetMacAddress": {
		"desc": "Returns the alphanumeric **M**edia-**A**ccess-**C**ontrol address of the device. Style should be “00:00:00:00:00:00”. The individual numbers can have hexadecimal values between 00 and FF.",
		"isfunc": true,
		"name": "GetMacAddress",
		"pNames": [],
		"pTypes": [],
		"retval": "str",
		"shortDesc": "Get devices MAC address."
	},
	"GetMediaFile": {
		"desc": "Returns a path to an unambiguous media file be like “/storage/emulated/0/Pictures/appName/YYYYMMDD_hhmmSSsss[ext]”. The folder to that file will be created automatically.",
		"isfunc": true,
		"name": "GetMediaFile",
		"pNames": ["appName", "ext"],
		"pTypes": ["str", "str"],
		"retval": "str_pth",
		"shortDesc": "Get a path to an unambiguous media file."
	},
	"GetMemoryInfo": {
		"desc": "Returns an object containing informations about the RAM memory.",
		"isfunc": true,
		"name": "GetMemoryInfo",
		"pNames": [],
		"pTypes": [],
		"retval": "obj-{ avail:num_byt, low:bin, threshold:num_byt, total:num_byt }",
		"shortDesc": "Get RAM memory information."
	},
	"GetMetadata": {
		"desc": "Returns a string list of metadata values contained in an audio file.",
		"isfunc": true,
		"name": "GetMetadata",
		"pNames": ["file", "keys"],
		"pTypes": ["str_pth", "str_com-album,artist,genre,title,composer,author,duration,bitrate,width,height"],
		"retval": "str_com",
		"shortDesc": "GetMetadata"
	},
	"GetModel": {
		"desc": "Returns the model name of the device.",
		"isfunc": true,
		"name": "GetModel",
		"pNames": [],
		"pTypes": [],
		"retval": "str",
		"shortDesc": "Get device model name."
	},
	"GetName": {
		"desc": "Returns the name of the APK application. meaning if your app runs in DroidScript, the name will be “DroidScript” as well.",
		"isfunc": true,
		"name": "GetName",
		"pNames": [],
		"pTypes": [],
		"retval": "str",
		"shortDesc": "Get APK name."
	},
	"GetNotifyId": {
		"desc": "If the app was started by a notification, this function will return the id of that notification.",
		"isfunc": true,
		"name": "GetNotifyId",
		"pNames": [],
		"pTypes": [],
		"retval": "str",
		"shortDesc": "Get the caller notification id."
	},
	"GetObjects": {
		"desc": "Returns a map of DroidScript control objects with their id as key.",
		"isfunc": true,
		"name": "GetObjects",
		"pNames": [],
		"pTypes": [],
		"retval": "lst-[ id:str_oid: control:dso ]",
		"shortDesc": "Get map of created DroidScript objects."
	},
	"GetOptions": {
		"desc": "Returns all current app objects. If ran from inside DroidScript, “remote” is the default value. ",
		"isfunc": true,
		"name": "GetOptions",
		"pNames": [],
		"pTypes": [],
		"retval": "str_com-Portrait,Landscape,NoDom,Game,Remote,Transparent",
		"shortDesc": "Get app options."
	},
	"GetOrientation": {
		"desc": "Returns the current device orientation. The result modes can be _“Portrait”_ if the device width is smaller than the device height, or _“Landscape”_ vice versa.",
		"isfunc": true,
		"name": "GetOrientation",
		"pNames": [],
		"pTypes": [],
		"retval": "str-Portrait|Landscape",
		"shortDesc": "Get current screen orientation."
	},
	"GetOSVersion": {
		"desc": "GetOSVersion returns the API target level  of the android version.",
		"isfunc": true,
		"name": "GetOSVersion",
		"pNames": [],
		"pTypes": [],
		"retval": "num_int",
		"shortDesc": "Get API target level."
	},
	"GetPackageName": {
		"desc": "Returns the package name of the APK.",
		"isfunc": true,
		"name": "GetPackageName",
		"pNames": [],
		"pTypes": [],
		"retval": "str",
		"shortDesc": "Get APK package name."
	},
	"GetPairedBtDevices": {
		"desc": "Returns a list of objects containing the name and bluetooth address of paired devices. Note that Bluetooth must be turned on to receive this information.",
		"isfunc": true,
		"name": "GetPairedBtDevices",
		"pNames": [],
		"pTypes": [],
		"retval": "lst_obj-{ name:str, address:str }",
		"shortDesc": "Get list of paired bluetooth devices."
	},
	"GetPath": {
		"desc": "Returns the path to the local storage folder of the APK.",
		"isfunc": true,
		"name": "GetPath",
		"pNames": [],
		"pTypes": [],
		"retval": "str_pth",
		"shortDesc": "Get APK's local storage path."
	},
	"GetPermission": {
		"desc": "GetPermission accepts a list of 'dangerus' classified permissions and returns a list of ungranted permissions in the **callback** function, or in case of only _“ExtSDCard”_ the path URI of the user-selected folder.",
		"isfunc": true,
		"name": "GetPermission",
		"pNames": ["type", "callback"],
		"pTypes": ["str_lst-Camera|ExtSDcard|Network|Storage|Overlay|SMS", {
	        "desc": "callback function",
	        "isfunc": true,
	        "name": "callback",
	        "pNames": ["ungranted"],
	        "pTypes": ["str_lst|str_uri"],
	        "shortDesc": "callback"
        }],
		"shortDesc": "GetPermission"
	},
	"GetPrivateFolder": {
		"desc": "Returns the path to a folder located in the apps private space which is normally not accessible by other apps or the user himself.",
		"isfunc": true,
		"name": "GetPrivateFolder",
		"pNames": ["name"],
		"pTypes": ["str"],
		"retval": "str_pth",
		"shortDesc": "Get path to a private folder."
	},
	"GetResourceId": {
		"desc": "Returns the id of a resource.",
		"isfunc": true,
		"name": "GetResourceId",
		"pNames": ["name", "options"],
		"pTypes": ["str", "str-android"],
		"retval": "str",
		"shortDesc": "Get ID of a resource."
	},
	"GetRingerMode": {
		"desc": "Returns the current ringer mode of the device. which can be _“Normal”_, _“Vibrate”_ or _“Silent”_.",
		"isfunc": true,
		"name": "GetRingerMode",
		"pNames": [],
		"pTypes": [],
		"retval": "str-Normal|Vibrate|Silent",
		"shortDesc": "Get current device ringer mode."
	},
	"GetRotation": {
		"desc": "Returns the current rotation of the device around it's Z-Axis in 90 degree steps. The values are relative to the initial orientation of the device on startup.",
		"isfunc": true,
		"name": "GetRotation",
		"pNames": [],
		"pTypes": [],
		"retval": "num_deg-0|90|180|270",
		"shortDesc": "Get device rotation."
	},
	"GetRSSI": {
		"desc": "Returns the current _**R**eceived **S**ignal **S**trength **I**ndication_ which is a measurement of the power present in a received WiFi signal in dBm (decibel milliwatt).\n\n</p><h3>Understanding RSSI</h3><table><thead align='left'><tr><th width=\"15%\">Signal Strength</th><th width=\"10%\">TL;DR</th><th width=\"20%\">Required for</th></tr></thead><tbody><tr><td>-30 dBm</td><td>Amazing</td><td>N/A</td></tr><tr><td>-67 dBm</td><td>Very Good</td><td>VoIP/VoWiFi, streaming video</td></tr><tr><td>-70 dBm</td><td>Okay</td><td>Email, web</td></tr><tr><td>-80 dBm</td><td>Not Good</td><td>N/A</td></tr><tr><td>-90 dBm</td><td>Unusable</td><td>N/A</td></tr><tr><td>-127 dBm</td><td>Disabled</td><td>N/A</td></tr></tbody></table><p>source: [https://www.metageek.com/training/resources/understanding-rssi.html](metageek.com)",
		"isfunc": true,
		"name": "GetRSSI",
		"pNames": [],
		"pTypes": [],
		"retval": "num_int--127..-30",
		"shortDesc": "Get RSSI in dBm"
	},
	"GetRunningApps": {
		"desc": "Returns a list of objects containing info about all currently running apps in the fore- or background.",
		"isfunc": true,
		"name": "GetRunningApps",
		"pNames": [],
		"pTypes": [],
		"retval": "lst_obj-{ user:num_int, pid:num_bin, name:str, foreground:bin }",
		"shortDesc": "Get list of running apps."
	},
	"GetRunningServices": {
		"desc": "Returns a list of objects containing info about all currently running services in the background.",
		"isfunc": true,
		"name": "GetRunningServices",
		"pNames": [],
		"pTypes": [],
		"retval": "lst_obj-{ user:num_int, pid:num_bin, name:str }",
		"shortDesc": "Get list of running services."
	},
	"GetScreenDensity": {
		"desc": "Returns the density of the device's screen.",
		"isfunc": true,
		"name": "GetScreenDensity",
		"pNames": [],
		"pTypes": [],
		"retval": "num_int",
		"shortDesc": "Get the screen density."
	},
	"GetScreenHeight": {
		"desc": "Returns the total screen height of the device in pixels. With the 'Real' **option** softkeys will be included in the value.",
		"isfunc": true,
		"name": "GetScreenHeight",
		"pNames": ["options"],
		"pTypes": ["str-Real"],
		"retval": "num_pxl",
		"shortDesc": "Get width of device screen."
	},
	"GetScreenWidth": {
		"desc": "Returns the total screen width of the device in pixels. With the 'Real' **option** softkeys will be included in the value.",
		"isfunc": true,
		"name": "GetScreenWidth",
		"pNames": ["options"],
		"pTypes": ["str-Real"],
		"retval": "num_pxl",
		"shortDesc": "Get height of device screen."
	},
	"GetSharedFiles": {
		"desc": "Returns a path list of files shared with the app. If the results were retreived they can't be read an other time, unless they will be shared again.",
		"isfunc": true,
		"name": "GetSharedFiles",
		"pNames": [],
		"pTypes": [],
		"retval": "lst-[ path:str_pth ]",
		"shortDesc": "Get list of shared files."
	},
	"GetSharedText": {
		"desc": "Returns the value of a shared text. If the result is returned, it cannot be read another time unless it is shared again.",
		"isfunc": true,
		"name": "GetSharedText",
		"pNames": [],
		"pTypes": [],
		"retval": "str",
		"shortDesc": "Get value of shared text."
	},
	"GetSpeakerPhone": {
		"desc": "Returns a boolean indicating whether the speaker is enabled for phone calls. Returns false if no call is active.",
		"isfunc": true,
		"name": "GetSpeakerPhone",
		"pNames": [],
		"pTypes": [],
		"retval": "bin",
		"shortDesc": "Returns whether the speaker is enabled."
	},
	"GetSpecialFolder": {
		"desc": "Returns the full path to a special folder commonly used for images, videos, music etc.",
		"isfunc": true,
		"name": "GetSpecialFolder",
		"pNames": ["name"],
		"pTypes": ["str-DCIM|Pictures|Movies|Downloads|Music"],
		"retval": "str_pth",
		"shortDesc": "Get full path to a special media folder."
	},
	"GetSSID": {
		"desc": "Returns the name (SSID) of the current network the user is connected with. If WiFi is disabled “<unknown ssid>” is returned.",
		"isfunc": true,
		"name": "GetSSID",
		"pNames": [],
		"pTypes": [],
		"retval": "str",
		"shortDesc": "Get WiFi network SSID (name)."
	},
	"GetThumbnail": {
		"desc": "Creates a downscaled copy of an existing image. Pass -1 as width or height to keep the aspect ratio.",
		"isfunc": true,
		"name": "GetThumbnail",
		"pNames": ["source", "destination", "width", "height"],
		"pTypes": ["str_pth", "str_pth", "num_pxl", "num_pxl"],
		"shortDesc": "Create downscaled copy of an image."
	},
	"GetTop": {
		"desc": "Returns the upper border distance from the app display to the device screen as height relative float or in pixels with the **px** option.",
		"isfunc": true,
		"name": "GetTop",
		"pNames": ["options"],
		"pTypes": ["str-px"],
		"retval": "num_srh",
		"shortDesc": "GetTop"
	},
	"GetType": {
		"desc": "Returns the object class name.",
		"isfunc": true,
		"name": "GetType",
		"pNames": [],
		"pTypes": [],
		"retval": "str-App",
		"shortDesc": "GetType"
	},
	"GetUser": {
		"desc": "Returns the email-address of the currently active user account.",
		"isfunc": true,
		"name": "GetUser",
		"pNames": [],
		"pTypes": [],
		"retval": "str_acc",
		"shortDesc": "Get current user email."
	},
	"GetVersion": {
		"desc": "Returns the app version number of the currently running apk.",
		"isfunc": true,
		"name": "GetVersion",
		"pNames": [],
		"pTypes": [],
		"retval": "str",
		"shortDesc": "Get apk version number."
	},
	"GetVolume": {
		"desc": "Returns the level of a given volume type as a number between 0 and 1. By default the system volume is returned.",
		"isfunc": true,
		"name": "GetVolume",
		"pNames": ["stream"],
		"pTypes": ["str-alarm|dtmf|music|notification|ring|system|voicecall"],
		"retval": "num_flt-0..1",
		"shortDesc": "Get level of a given volume type."
	},
	"GoToSleep": {
		"desc": "Forces the screen to turn off and puts the device to sleep. (This has the same effect as pressing the power button)",
		"isfunc": true,
		"name": "GoToSleep",
		"pNames": [],
		"pTypes": [],
		"shortDesc": "Puts the phone into sleep mode."
	},
	"HasSoftNav": {
		"desc": "Returns a boolean indicating whether the device has a soft navigation bar on the screen.",
		"isfunc": true,
		"name": "HasSoftNav",
		"pNames": [],
		"pTypes": [],
		"retval": "bin",
		"shortDesc": "Returns whether device has soft keys."
	},
	"HideKeyboard": {
		"desc": "Hides the device keyboard if it is currently shown.",
		"isfunc": true,
		"name": "HideKeyboard",
		"pNames": [],
		"pTypes": [],
		"shortDesc": "Hide the device keyboard."
	},
	"HideProgress": {
		"desc": "Hides a previously shown progress indicator.\nSee also @ShowProgress.",
		"isfunc": true,
		"name": "HideProgress",
		"pNames": [],
		"pTypes": [],
		"shortDesc": "Hide progress indicator."
	},
	"HideProgressBar": {
		"desc": "Hides a previously shown progress bar dialog.\nSee also @ShowProgressBar and @UpdateProgressBar.",
		"isfunc": true,
		"name": "HideProgressBar",
		"pNames": [],
		"pTypes": [],
		"shortDesc": "Hide progress bar dialog."
	},
	"HttpRequest": {
		"desc": "HttpRequest sends a request to a server. baseUrl and path will just be added to one string to get the address.\nMultiple parameters are available using pipes:\n\t“param1=value1|param2=value2”",
		"isfunc": true,
		"name": "HttpRequest",
		"pNames": ["type", "baseUrl", "path", "params", "callback", "headers"],
		"pTypes": ["str-GET|POST", "str_url", "str", "str", {
				"desc": "Callback",
				"isfunc": true,
				"name": "callback",
				"pNames": ["error", "reply"],
				"pTypes": ["bin", "str"],
				"shortDesc": "callback"
			}, "str"],
		"shortDesc": "Send Http request."
	},
	"InIDE": {
		"desc": "InIDE",
		"isfunc": true,
		"name": "InIDE",
		"pNames": [],
		"pTypes": [],
		"shortDesc": "InIDE"
	},
	"InstallWallpaper": {
		"desc": "Let the user install a device wallpaper located in the 'Wallpaper.js' script in the project root folder.\nSee also @CreateWallpaper.",
		"isfunc": true,
		"name": "InstallWallpaper",
		"pNames": ["packageName", "className"],
		"pTypes": ["str-this", "str-this"],
		"retval": "bin",
		"shortDesc": "Install Wallpaper.js as device wallpaper."
	},
	"IsAPK": {
		"desc": "Returns whether current app is an APK or not (case not it's a DroidScript Project).",
		"isfunc": true,
		"name": "IsAPK",
		"pNames": [],
		"pTypes": [],
		"retval": "bin",
		"shortDesc": "Returns true if ran from apk."
	},
	"IsAppInstalled": {
		"desc": "Returns a boolean indicating whether an app given by a package name is installed.\n\nSee also: @GetPackageName",
		"isfunc": true,
		"name": "IsAppInstalled",
		"pNames": ["packageName"],
		"pTypes": ["str"],
		"retval": "bin",
		"shortDesc": "Check if package is installed."
	},
	"IsBluetoothEnabled": {
		"desc": "Return whether bluetooth was enabled",
		"isfunc": true,
		"name": "IsBluetoothEnabled",
		"pNames": [],
		"pTypes": [],
		"retval": "bin",
		"shortDesc": "Check bluetooth enabled."
	},
	"IsBluetoothOn": {
		"desc": "Returns a boolean indicating whether bluetooth is enabled and on.",
		"isfunc": true,
		"name": "IsBluetoothOn",
		"pNames": [],
		"pTypes": [],
		"retval": "bin",
		"shortDesc": "Check if bluetooth is on."
	},
	"IsBtDevicePaired": {
		"desc": "Returns a boolean indicating whether a given bluetooth device was paired with the user device.",
		"isfunc": true,
		"name": "IsBtDevicePaired",
		"pNames": ["name"],
		"pTypes": ["str"],
		"retval": "bin",
		"shortDesc": "Check bt paired state to other device."
	},
	"IsCharging": {
		"desc": "Returns a boolean indicating whether phone is currently charging or not.",
		"isfunc": true,
		"name": "IsCharging",
		"pNames": [],
		"pTypes": [],
		"retval": "bin",
		"shortDesc": "Check whether device is charging."
	},
	"IsChrome": {
		"desc": "Returns a boolean indicating whether the device is running on ChromeOS.",
		"isfunc": true,
		"name": "IsChrome",
		"pNames": [],
		"pTypes": [],
		"retval": "bin",
		"shortDesc": "Check if device OS is ChromeOS."
	},
	"IsConnected": {
		"desc": "Returns a boolean indicating whether the device is connected to any network.",
		"isfunc": true,
		"name": "IsConnected",
		"pNames": [],
		"pTypes": [],
		"retval": "bin",
		"shortDesc": "Check if device is connected to any network."
	},
	"IsDebugEnabled": {
		"desc": "Returns a boolean indicating whether debugging is currently enabled.\nSee also @SettDebug.",
		"isfunc": true,
		"name": "IsDebugEnabled",
		"pNames": [],
		"pTypes": [],
		"retval": "bin",
		"shortDesc": "Check whether debug is enabled."
	},
	"IsDebugging": {
		"desc": "Returns a boolean indicating whether the app is currently debugging.\nSee also @SettDebug.",
		"isfunc": true,
		"name": "IsDebugging",
		"pNames": [],
		"pTypes": [],
		"retval": "bin",
		"shortDesc": "Check whether app is debugging."
	},
	"IsEngine": {
		"desc": "Returns a boolean indicating whether IsEngine",
		"isfunc": true,
		"name": "IsEngine",
		"pNames": [],
		"pTypes": [],
		"retval": "bin",
		"shortDesc": "IsEngine"
	},
	"IsFolder": {
		"desc": "Returns a boolean indicating whether the passed fs path leads to a folder.",
		"isfunc": true,
		"name": "IsFolder",
		"pNames": ["folder"],
		"pTypes": ["str_pth"],
		"retval": "bin",
		"shortDesc": "Check if path leads to a folder."
	},
	"IsKeyboardShown": {
		"desc": "Returns a boolean indicating whether the device keyboard is currently visible or not.",
		"isfunc": true,
		"name": "IsKeyboardShown",
		"pNames": [],
		"pTypes": [],
		"retval": "bin",
		"shortDesc": "Check whether device keyboard is shown."
	},
	"IsLocationEnabled": {
		"desc": "Returns a boolean indicating whether a specific location mode was enabled.",
		"isfunc": true,
		"name": "IsLocationEnabled",
		"pNames": ["mode"],
		"pTypes": ["str-GPS|Network"],
		"retval": "bin",
		"shortDesc": "Check if location method is enabled."
	},
	"IsNavBarOnRight": {
		"desc": "Returns a boolean indicating whether the Navigation Bar is on the righthand side of the display.",
		"isfunc": true,
		"name": "IsNavBarOnRight",
		"pNames": [],
		"pTypes": [],
		"retval": "bin",
		"shortDesc": "Check if NavBar is on righthand side."
	},
	"IsNewVersion": {
		"desc": "Returns a boolean indicating whether the apk version number increased compared to the last time started.",
		"isfunc": true,
		"name": "IsNewVersion",
		"pNames": [],
		"pTypes": [],
		"retval": "bin",
		"shortDesc": "Check if apk version increased."
	},
	"IsPremium": {
		"desc": "Returns a boolean indicating whether the user has a DroidScript premium subscription inside the IDE.",
		"isfunc": true,
		"name": "IsPremium",
		"pNames": [],
		"pTypes": [],
		"retval": "bin",
		"shortDesc": "Check if user has a DroidScript Premium subscription."
	},
	"IsScreenOn": {
		"desc": "Returns a boolean indicating whether the device screen is currently on.",
		"isfunc": true,
		"name": "IsScreenOn",
		"pNames": [],
		"pTypes": [],
		"retval": "bin",
		"shortDesc": "Check if device screen is on."
	},
	"IsService": {
		"desc": "Returns a boolean indicating whether the currently running app instance is a service.",
		"isfunc": true,
		"name": "IsService",
		"pNames": [],
		"pTypes": [],
		"retval": "bin",
		"shortDesc": "Check id app is a service."
	},
	"IsStarted": {
		"desc": "Returns a boolean indicating whether the app has finished loading. It will return true after OnStart has returned.",
		"isfunc": true,
		"name": "IsStarted",
		"pNames": [],
		"pTypes": [],
		"retval": "bin",
		"shortDesc": "Check if app has finished loading."
	},
	"IsTablet": {
		"desc": "Returns a boolean indicating whether the user device is a tablet.",
		"isfunc": true,
		"name": "IsTablet",
		"pNames": [],
		"pTypes": [],
		"retval": "bin",
		"shortDesc": "Check if user device is a tablet."
	},
	"IsThings": {
		"desc": "Returns a boolean indicating whether the OS is AndroidThings.",
		"isfunc": true,
		"name": "IsThings",
		"pNames": [],
		"pTypes": [],
		"retval": "bin",
		"shortDesc": "Check if OS is AndroidThings."
	},
	"IsWifiApEnabled": {
		"desc": "Returns a boolean indicating whether the mobile Wifi Access Point is enabled on the user device.",
		"isfunc": true,
		"name": "IsWifiApEnabled",
		"pNames": [],
		"pTypes": [],
		"retval": "bin",
		"shortDesc": "Check if the mobile Wifi Access Point is enabled."
	},
	"IsWifiEnabled": {
		"desc": "Returns a boolean indicating whether the Wifi adapter is enabled on the user device.",
		"isfunc": true,
		"name": "IsWifiEnabled",
		"pNames": [],
		"pTypes": [],
		"retval": "bin",
		"shortDesc": "Check if WiFi is enabled."
	},
	"KillApp": {
		"desc": "Kills a running app by its process ID. You can retreive a list of all running apps with their pids using the @GetRunningApps function of the **app** object.",
		"isfunc": true,
		"name": "KillApp",
		"pNames": ["pid"],
		"pTypes": ["num_int"],
		"shortDesc": "Kill an app by its pid."
	},
	"Language2Code": {
		"desc": "Convert the user language name to it's 2 character long language code. If no argument is passed, the current language code is returned.",
		"isfunc": true,
		"name": "Language2Code",
		"pNames": ["name"],
		"pTypes": ["str"],
		"retval": "str",
		"shortDesc": "Convert language name to its code or get current language code."
	},
	"ListFolder": {
		"desc": "The ListFolder method returns a list of all files and folders in a given folder.\nThe _filter_ **parameter** is an can be used to specify a filter pattern. For example to find only mp3 files, you would specify _“.mp3”_ as a filter\n\nThe You can also **option**ally sort the list in alphabetica order with the _“alphasort”_ option.",
		"isfunc": true,
		"name": "ListFolder",
		"pNames": ["path", "filter", "limit", "options"],
		"pTypes": ["str_pth", "str", "num_int", "str-Alphasort:sorts the paths in alphabetical order,FullPath:returns absolute paths to the listed items"],
        "retval": "lst-[ paths:str_pth ]",
		"shortDesc": "Get a list of files ans folders contained in a specific folder."
	},
	"LoadBoolean": {
		"desc": "Load a saved boolean value to remember varibale values between multiple app starts. See also: @SaveBoolean.",
		"isfunc": true,
		"name": "LoadBoolean",
		"pNames": ["name", "default", "file"],
		"pTypes": ["str", "bin", "str_pth"],
        "retval": "bin",
		"shortDesc": "Load saved boolean value."
	},
	"LoadNumber": {
		"desc": "Load a saved number value to remember varibale values between multiple app starts. See also: @SaveNumber.",
		"isfunc": true,
		"name": "LoadNumber",
		"pNames": ["name", "default", "file"],
		"pTypes": ["str", "num", "str_pth"],
        "retval": "num",
		"shortDesc": "Load saved boolean value."
	},
	"LoadPlugin": {
		"desc": "Import an installed plugin to your app. You can download plugins from [http://droidscript.org/plugins/](DroidScript's plugin page), [https://play.google.com/store/search?q=DroidScript+Plugin](Google Playstore) or you can create self-written plugins.\n\nYou can find instructions on how to create plugins on DroidScript.org) or on my [https://symbroson.blogspot.com/search/label/Plugins](BlogSpot page).",
		"isfunc": true,
		"name": "LoadPlugin",
		"pNames": ["url"],
		"pTypes": ["str_url"],
		"shortDesc": "Load an installed plugin to your app."
	},
	"LoadScript": {
		"desc": "Loads a local JavaScript file asynchronously to your app to make its functionality available in your app.",
		"isfunc": true,
		"name": "LoadScript",
		"pNames": ["path", "callback"],
		"pTypes": ["str_pth", {
				"desc": "Callback",
				"isfunc": true,
				"name": "callback",
				"pNames": ["info"],
				"pTypes": ["obj-{ isTrusted:bin }"],
				"shortDesc": "callback"
			}],
		"shortDesc": "Asynchronously import an external JavaScript file.\nSee Also: @Script."
	},
	"LoadText": {
		"desc": "Load saved text value to remember varibale values between multiple app starts. See also: @SaveText.",
		"isfunc": true,
		"name": "LoadText",
		"pNames": ["name", "default", "file"],
		"pTypes": ["str", "str", "str_pth"],
		"shortDesc": "Load saved text value."
	},
	"Lock": {
		"desc": "?",
		"isfunc": true,
		"name": "Lock",
		"pNames": [],
		"pTypes": [],
		"shortDesc": "Lock"
	},
	"LockDrawer": {
		"desc": "Make drawer on a specific side unaccessible for the app and the user, hiding it if necessary. You can only unlock it using the @UnlockDrawer method.",
		"isfunc": true,
		"name": "LockDrawer",
		"pNames": ["side"],
		"pTypes": ["str-left|right"],
		"shortDesc": "Hide and lock a drawer."
	},
	"MakeFolder": {
		"desc": "Creates a new folder in the local filesystem.",
		"isfunc": true,
		"name": "MakeFolder",
		"pNames": ["folder"],
		"pTypes": ["str_pth"],
		"shortDesc": "Create new folder in the local fs."
	},
	"Odroid": {
        "abbrev": "odr",
		"desc": "?",
		"isfunc": true,
		"name": "Odroid",
		"pNames": ["p1", "p2", "p3"],
		"pTypes": ["?", "?", "?"],
		"shortDesc": "Odroid",
        "subf": {}
	},
	"OpenDatabase": {
        "abbrev": "db",
        "desc": "OpenDatabase",
		"isfunc": true,
		"name": "OpenDatabase",
		"pNames": ["name"],
		"pTypes": ["str"],
        "retval": "Database",
		"shortDesc": "OpenDatabase",
		"subf": {
			"addTransaction": {
				"abbrev": "",
				"desc": "addTransaction",
				"isfunc": true,
				"name": "addTransaction",
				"pNames": ["t"],
				"pTypes": ["?"],
				"shortDesc": "addTransaction",
				"subf": {}
			},
			"close": {
				"abbrev": "",
				"desc": "close",
				"isfunc": true,
				"name": "close",
				"pNames": ["success", "error"],
				"pTypes": ["?", "?"],
				"shortDesc": "close",
				"subf": {}
			},
			"Close": {
				"abbrev": "",
				"desc": "Close",
				"isfunc": true,
				"name": "Close",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "Close",
				"subf": {}
			},
			"databaseFeatures": {
				"abbrev": "",
				"desc": "databaseFeatures",
				"isfunc": false,
				"name": "databaseFeatures",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "databaseFeatures",
				"subf": {}
			},
			"dbname": {
				"abbrev": "",
				"desc": "dbname",
				"isfunc": false,
				"name": "dbname",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "dbname",
				"subf": {}
			},
			"Delete": {
				"abbrev": "",
				"desc": "Delete",
				"isfunc": true,
				"name": "Delete",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "Delete",
				"subf": {}
			},
			"executeSql": {
				"abbrev": "",
				"desc": "executeSql",
				"isfunc": true,
				"name": "executeSql",
				"pNames": ["statement", "params", "success", "error"],
				"pTypes": ["?", "?", "?", "?"],
				"shortDesc": "executeSql",
				"subf": {}
			},
			"ExecuteSql": {
				"abbrev": "",
				"desc": "ExecuteSql",
				"isfunc": true,
				"name": "ExecuteSql",
				"pNames": ["sql", "params", "success", "error"],
				"pTypes": ["?", "?", "?", "?"],
				"shortDesc": "ExecuteSql",
				"subf": {}
			},
			"GetName": {
				"abbrev": "",
				"desc": "GetName",
				"isfunc": true,
				"name": "GetName",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "GetName",
				"subf": {}
			},
			"GetType": {
				"abbrev": "",
				"desc": "GetType",
				"isfunc": true,
				"name": "GetType",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "GetType",
				"subf": {}
			},
			"name": {
				"abbrev": "",
				"desc": "name",
				"isfunc": false,
				"name": "name",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "name",
				"subf": {}
			},
			"open": {
				"abbrev": "",
				"desc": "open",
				"isfunc": true,
				"name": "open",
				"pNames": ["success", "error"],
				"pTypes": ["?", "?"],
				"shortDesc": "open",
				"subf": {}
			},
			"openargs": {
				"abbrev": "",
				"desc": "openargs",
				"isfunc": false,
				"name": "openargs",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "openargs",
				"subf": {}
			},
			"openDBs": {
				"abbrev": "",
				"desc": "openDBs",
				"isfunc": false,
				"name": "openDBs",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "openDBs",
				"subf": {}
			},
			"openError": {
				"abbrev": "",
				"desc": "openError",
				"isfunc": true,
				"name": "openError",
				"pNames": ["e"],
				"pTypes": ["?"],
				"shortDesc": "openError",
				"subf": {}
			},
			"openSuccess": {
				"abbrev": "",
				"desc": "openSuccess",
				"isfunc": true,
				"name": "openSuccess",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "openSuccess",
				"subf": {}
			},
			"readTransaction": {
				"abbrev": "",
				"desc": "readTransaction",
				"isfunc": true,
				"name": "readTransaction",
				"pNames": ["fn", "error", "success"],
				"pTypes": ["?", "?", "?"],
				"shortDesc": "readTransaction",
				"subf": {}
			},
			"startNextTransaction": {
				"abbrev": "",
				"desc": "startNextTransaction",
				"isfunc": true,
				"name": "startNextTransaction",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "startNextTransaction",
				"subf": {}
			},
			"transaction": {
				"abbrev": "",
				"desc": "transaction",
				"isfunc": true,
				"name": "transaction",
				"pNames": ["fn", "error", "success"],
				"pTypes": ["?", "?", "?"],
				"shortDesc": "transaction",
				"subf": {}
			}
		}
	},
	"OpenDrawer": {
		"desc": "Opens the drawer layout on the given side with slide animation.",
		"isfunc": true,
		"name": "OpenDrawer",
		"pNames": ["side"],
		"pTypes": ["str-left|right"],
		"shortDesc": "Opens the drawer layout on the given side."
	},
	"OpenFile": {
		"desc": "Allows the user to open a file with an external application on the device. The **choose** parameter shows the user a custom message in the choose dialog.\n\nSee also: @SendFile.",
		"isfunc": true,
		"name": "OpenFile",
		"pNames": ["file", "type", "choose"],
		"pTypes": ["str_pth", "str_mim", "str"],
		"shortDesc": "Allow user to open a file with an external app."
	},
	"OpenUrl": {
		"desc": "Allows the user to open an url with an external application on the device. The **choose** parameter shows the user a custom message in the choose dialog.",
		"isfunc": true,
		"name": "OpenUrl",
		"pNames": ["url", "type", "choose"],
		"pTypes": ["str_url", "str_mim", "str"],
		"shortDesc": "Allow user to open an url with an external app."
	},
	"PairBtDevice": {
		"desc": "Pairs a bluetooth device with yours.",
		"isfunc": true,
		"name": "PairBtDevice",
		"pNames": ["address", "callback"],
		"pTypes": ["str", {
				"desc": "Callback",
				"isfunc": true,
				"name": "callback",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "callback"
			}],
		"shortDesc": "PairBtDevice"
	},
	"PlayRingtone": {
		"desc": "PlayRingtone",
		"isfunc": true,
		"name": "Play a specific ringtone type based on the users device settings for ringtones. _Type_ can be _“Alarm”_, _“Norification”_ or _“Ringtone”_.",
		"pNames": ["type"],
		"pTypes": ["str-Alarm|Notification|Ringtone"],
		"shortDesc": "Play specific ringtone type."
	},
	"PlaySound": {
		"desc": "Plays a sound file stored remotely or on the local filesystem.",
		"isfunc": true,
		"name": "PlaySound",
		"pNames": ["file"],
		"pTypes": ["str_pth||str_url"],
		"shortDesc": "Plays a local or remote sound file."
	},
	"PreventScreenLock": {
		"desc": "The _PreventScreenLock_ method prevents the device screen from dimming and locking while your app is in the foreground.",
		"isfunc": true,
		"name": "PreventScreenLock",
		"pNames": ["mode"],
		"pTypes": ["bin||str-Full|Partial"],
		"shortDesc": "Prevent screen from locking after some time."
	},
	"PreventWifiSleep": {
		"desc": "Prevent the device WiFi from powering down.",
		"isfunc": true,
		"name": "PreventWifiSleep",
		"pNames": [],
		"pTypes": [],
		"shortDesc": "Prevent Wifi from powering down."
	},
	"QueryContent": {
		"desc": "?",
		"isfunc": true,
		"name": "QueryContent",
		"pNames": ["uri", "columns", "select", "args", "sort"],
		"pTypes": ["str_url", "str_com", "str_sql", "lst", "str-ASC|DESC"],
		"shortDesc": "QueryContent"
	},
	"Quit": {
		"desc": "Quits the app with showing an @Alert dialog box before exiting. The function will pause the program and exit before any further commands can be executed.",
		"isfunc": true,
		"name": "Quit",
		"pNames": ["msg", "title", "options"],
		"pTypes": ["str", "str", "str-NoDim,NoFocus"],
		"shortDesc": "Quit the app with showing a dialog and exit after closing."
	},
	"ReadFile": {
		"desc": "Reads a file from the local filesystem and returns its contents.\n\nSee also: @WriteFile",
		"isfunc": true,
		"name": "ReadFile",
		"pNames": ["file", "encoding"],
		"pTypes": ["str_pth", "str-US-ASCII|UTF-8|UTF-16|UTF-16BE|UTF-16LE|windows-1252|ISO-8859-1:Latin-1|base64"],
		"shortDesc": "Read the content of a local file."
	},
	"RemoveDrawer": {
		"desc": "Removes a drawer layout from a given side.\n\nSee also: @AddDrawer",
		"isfunc": true,
		"name": "RemoveDrawer",
		"pNames": ["side"],
		"pTypes": ["str-left|right"],
		"shortDesc": "Remove drawer layout from a given side."
	},
	"RemoveLayout": {
		"desc": "Removes a layout added to the app.\n\nSee also: @AddLayout",
		"isfunc": true,
		"name": "RemoveLayout",
		"pNames": ["layout"],
		"pTypes": ["dso_lay"],
		"shortDesc": "RemoveLayout"
	},
	"RenameFile": {
		"desc": "Renames a file on the local filesystem. This method can also be used to move a file to a whole other destination.\n\nSee Also: @WriteFile, @CopyFile, @DeleteFile",
		"isfunc": true,
		"name": "RenameFile",
		"pNames": ["source", "destination"],
		"pTypes": ["str_pth", "str_pth"],
		"shortDesc": "Rename or move a local file."
	},
	"RenameFolder": {
		"desc": "Renames a folder on the local filesystem. This method can also be used to move a folder to a whole other destination.\n\nSee Also: @MakeFolder, @CopyFolder, @DeleteFolder",
		"isfunc": true,
		"name": "RenameFolder",
		"pNames": ["source", "destination"],
		"pTypes": ["str_pth", "str_pth"],
		"shortDesc": "Rename or move a local folder."
	},
	"ReplaceInFile": {
		"desc": "Replaces text in a local file.",
		"isfunc": true,
		"name": "ReplaceInFile",
		"pNames": ["file", "txt", "rep", "options"],
		"pTypes": ["str_pth", "str", "str", "str"],
		"shortDesc": "Replace text in a local file."
	},
	"SaveBoolean": {
		"desc": "Save a boolean value to remember varibale values between multiple app starts. See also: @LoadBoolean.",
		"isfunc": true,
		"name": "SaveBoolean",
		"pNames": ["name", "value", "file"],
		"pTypes": ["str", "bin", "str_pth"],
		"shortDesc": "Save a boolean value across multiple starts."
	},
	"SaveCookies": {
		"desc": "Saves cookies for webviews or html apps.",
		"isfunc": true,
		"name": "SaveCookies",
		"pNames": [],
		"pTypes": [],
		"shortDesc": "Save web cookies."
	},
	"SaveNumber": {
		"desc": "Save a number value to remember varibale values between multiple app starts. See also: @LoadNumber.",
		"isfunc": true,
		"name": "SaveNumber",
		"pNames": ["name", "value", "file"],
		"pTypes": ["str", "num", "str_pth"],
		"shortDesc": "Save a number value across multiple starts."
	},
	"SaveText": {
		"desc": "Save a text value to remember varibale values between multiple app starts. See also: @LoadText.",
		"isfunc": true,
		"name": "SaveText",
		"pNames": ["name", "value", "file"],
		"pTypes": ["str", "str", "str_pth"],
		"shortDesc": "Save a text value across multiple starts."
	},
	"ScanFile": {
		"desc": "Forces android to scan an image file to appear in the phone's gallery.\n\nSee also: @CreateImage, @CreateCameraView, @ScreenShot.",
		"isfunc": true,
		"name": "ScanFile",
		"pNames": ["file"],
		"pTypes": ["str_pth"],
		"shortDesc": "Adds media files to phone gallery."
	},
	"ScreenShot": {
		"desc": "Takes a screen shot of your app and saves it to the specified path. Quality is an **option**al percentage value for jpg files defaulting to 95.",
		"isfunc": true,
		"name": "ScreenShot",
		"pNames": ["fileName", "quality"],
		"pTypes": ["str_pth", "num_prc"],
		"shortDesc": "Take a screen shot of your app."
	},
	"Script": {
		"desc": "Loads a local JavaScript file synchronously to your app to make its functionality available in your app.",
		"isfunc": true,
		"name": "Script",
		"pNames": ["file"],
		"pTypes": ["str_pth"],
		"shortDesc": "Synchronously import an external JavaScript file.\n\n@See Also: @LoadScript."
	},
	"SendFile": {
		"desc": "Send a file to a remote target, ie. via Email. The **subject** and **text** arguments will be auto filled and the **choose** text will be displayed when the user selects the target app. Default may be smth like _'Complete action using'_.",
		"isfunc": true,
		"name": "SendFile",
		"pNames": ["file", "subject", "text", "choose"],
		"pTypes": ["str_pth", "str", "str", "str"],
		"shortDesc": "Send a file to a remote target."
	},
	"SendIntent": {
		"desc": "Intens can be used to perform an operation between different applications or activities. _It is basically a passive data structure holding an abstract description of an action to be performed_.\n\n**package name** and **class name** can specify the intent target, but you can also leave them null and define a **category** instead to let the user choose an application of that categoy.\n\nIf you expect a **callback** you have to pass the “result” **option**. The **result code** can be\n\t-1: _operation succeeded_\n\t1: _user-defined activity results_\n\t0: _operation canceled_\n\nYou can find some common used examples for that in the [https://wiki.droidscript.me.uk/doku.php?id=intents:open_apps&s[]=sendintent](DroidScript Wiki)\nFor more information visit the [https://developer.android.com/reference/android/content/Intent.html](Android Developer Page). There you can find informations about the [https://developer.android.com/reference/android/content/Intent.html#standard-activity-actions](activity), [https://developer.android.com/reference/android/content/Intent.html#standard-categories](category) and [https://developer.android.com/reference/android/content/Intent.html#standard-extra-data](extra).",
		"isfunc": true,
		"name": "SendIntent",
		"pNames": ["packageName", "className", "action", "category", "uri", "type", "extras", "options", "callback"],
		"pTypes": ["str", "str", "str-android.intent.action.*", "str-android.intent.category.*", "str", "str_mim", "lst-[{name:str, type:str, value:str}]", "str-result", {
				"desc": "Callback",
				"isfunc": true,
				"name": "callback",
				"pNames": ["resultCode", "data"],
				"pTypes": ["num_int--1|0|1", "obj-{action:string, type:string, data:string, flags:integer, extras:object}"],
				"shortDesc": "callback"
			}],
		"shortDesc": "SendIntent"
	},
	"SendMail": {
		"desc": "Send an EMail to someune using the default mail application. The passed argumets will be auto-filled. %c",
		"isfunc": true,
		"name": "SendMail",
		"pNames": ["address", "subject", "body", "attach", "type", "options"],
		"pTypes": ["str", "str", "str", "str_pth", "str_mim", "str-SendTo"],
		"shortDesc": "Open the EMail app and autofill fields."
	},
	"SendMessage": {
		"desc": "Send a message from a Service to the main app.",
		"isfunc": true,
		"name": "SendMessage",
		"pNames": ["message"],
		"pTypes": ["str"],
		"shortDesc": "Send message from Service to main app."
	},
	"SendSMS": {
		"desc": "Send an SMS to someone using the default SMS application. The passed argumets will be auto-filled or requested by the SMS app otherwise. %c",
		"isfunc": true,
		"name": "SendSMS",
		"pNames": ["msg", "number"],
		"pTypes": ["str", "str_num||num"],
		"shortDesc": "Open the SMS app and autofill fields."
	},
	"SendText": {
        "desc": "This Method is used for sharing text between apps.\n\nIf choose is defined, an android dialog will appear with the **choose** value as info text.\nOtherwise the dialog will appear if the user did not specify an app which should be always opened for this type of data.\n\nThe **subject** parameter seems to be obsolete these times and is just kept for backwards compatibility.",
		"isfunc": true,
		"name": "SendText",
		"pNames": ["text", "subject", "choose"],
		"pTypes": ["str", "str", "str"],
		"shortDesc": "Share text between apps."
	},
	"SetAlarm": {
		"desc": "SetAlarm to start app automatically",
		"isfunc": true,
		"name": "SetAlarm",
		"pNames": ["type", "id", "callback", "time", "interval", "options"],
		"pTypes": ["str-Set|Repeat|Cancel", "str||num_int", {
				"desc": "Callback",
				"isfunc": true,
				"name": "callback",
				"pNames": ["id"],
				"pTypes": ["str||num_int"],
				"shortDesc": "callback"
			}, "num_dat", "num_mls", "str-ExactIdle|Exact:only works for single shot alarms,App:Opens main app if called from a service"],
		"shortDesc": "SetAlarm"
	},
	"SetAutoBoot": {
		"desc": "Causes the current running APK to be started automatically when your device boots.",
		"isfunc": true,
		"name": "SetAutoBoot",
		"pNames": ["auto"],
		"pTypes": ["bin"],
		"shortDesc": "Autostart APK when device boots."
	},
	"SetAutoStart": {
		"desc": "Set a DroidScript project name which will be launched automatically when DroidScript starts.",
		"isfunc": true,
		"name": "SetAutoStart",
		"pNames": ["appName"],
		"pTypes": ["str"],
		"shortDesc": "Autostart DroidScript Project on DS restart."
	},
	"SetAutoWifi": {
		"desc": "Automatically enables the use of the WiFi editor. This method is mainly useful for headless devices like AndroidTV which don't have a DroidScript UI.",
		"isfunc": true,
		"name": "SetAutoWifi",
		"pNames": ["auto"],
		"pTypes": ["bin"],
		"shortDesc": "Automatically enable the WiFi editor."
	},
	"SetBackColor": {
		"desc": "Changes the background color of the app.",
		"isfunc": true,
		"name": "SetBackColor",
		"pNames": ["color"],
		"pTypes": ["str_col"],
		"shortDesc": "Change the app's background color."
	},
	"SetBluetoothEnabled": {
		"desc": "Enables Bluetooth on the device.",
		"isfunc": true,
		"name": "SetBluetoothEnabled",
		"pNames": ["enable"],
		"pTypes": ["bin"],
		"shortDesc": "Enable Bluetooth on the device."
	},
	"SetClipboardText": {
		"desc": "The SetClipboardText method puts text data on the device clip board. This allows you to copy and paste text between different applications.",
		"isfunc": true,
		"name": "SetClipboardText",
		"pNames": ["text"],
		"pTypes": ["str"],
		"shortDesc": "Change the device clipboard text."
	},
	"SetData": {
		"desc": "Saves variables until the app closes. All saved data will be lost afterwards. %c",
		"isfunc": true,
		"name": "SetData",
		"pNames": ["name", "value"],
		"pTypes": ["str", "str"],
		"shortDesc": "Save data while app is running."
	},
	"SetDebug": {
		"desc": "SetDebug lets you control the debugging level. The availabe modes are:\nconsole: allows console.log messages\nds: allows app.Debug messages\nadb: allows adb debug messages (ie at apk startup)\ntrue: enable all debug messages\nfalse or “”: disable able all debug messages\n\nNote that debugging is disabled in apk release mode by default. Otherwise it is always enabled at start.",
		"isfunc": true,
		"name": "SetDebug",
		"pNames": ["switches"],
		"pTypes": ["str-console,ds,adb"],
		"shortDesc": "Control the debug level of the program."
	},
	"SetDebugEnabled": {
		"desc": "**deprecated** En/disable console logging while running app",
		"isfunc": true,
		"name": "SetDebugEnabled",
		"pNames": ["enable"],
		"pTypes": ["bin"],
		"shortDesc": "deprecated! En/disable console logging"
	},
	"SetDensity": {
		"desc": "Changes the dpi value (dots per inch) that affects the content of any control created afterwards. The smaller the value, the smaller the scaling.",
		"isfunc": true,
		"name": "SetDensity",
		"pNames": ["dpi"],
		"pTypes": ["int"],
		"shortDesc": "Changes the dpi value for any control creatred afterwards."
	},
	"SetInBackground": {
		"desc": "Set the current service to run in the background.\n\nSee Also: @StartSevice.",
		"isfunc": true,
		"name": "SetInBackground",
		"pNames": [],
		"pTypes": [],
		"shortDesc": "Set services to run in the background."
	},
	"SetInForeground": {
		"desc": "Set the current service to run in the foreground.\n\nSee Also: @StartSevice.",
		"isfunc": true,
		"name": "SetInForeground",
		"pNames": ["title", "text", "largeIcon", "smallIcon", "importance"],
		"pTypes": ["str", "str", "str_pth", "str_pth", "str-min|low|default|high|max"],
		"shortDesc": "Set services to run in the foreground."
	},
	"SetJoystickOptions": {
		"desc": "Set options for the connected joystick. The _“forwardkeys”_ **option** allows the joystick key presses to pass onto the child controls of the main activity. (They are normally prevented from reaching child controls).",
		"isfunc": true,
		"name": "SetJoystickOptions",
		"pNames": ["options"],
		"pTypes": ["str-ForwardKeys:allows the joystick key presses to pass onto the child controls of the main activity"],
		"shortDesc": "Set options for the connected joystick."
	},
	"SetKioskMode": {
		"desc": "Blocks android functionality to keep the rest of your phone safe while others may use your app.",
		"isfunc": true,
		"name": "SetKioskMode",
		"pNames": ["mode", "enable", "options"],
		"pTypes": ["str-Power,Status,Nav,NavRight", "bin", "str-Black,Tasks:prevents recent tasks button working"],
		"shortDesc": "Blocks android functionality outside your app."
	},
	"SetLanguage": {
		"desc": "Loads the current language code from the lang.json file in your project root folder. Make sure you use the [http://www.loc.gov/standards/iso639-2/php/code_list.php](standard 2 letter language codes).",
		"isfunc": true,
		"name": "SetLanguage",
		"pNames": ["name"],
		"pTypes": ["str"],
		"shortDesc": "Load the language code from lang.json"
	},
	"SetMenu": {
		"desc": "Set the app menu fields.\n\nSee Also: @ShowMenu.",
		"isfunc": true,
		"name": "SetMenu",
		"pNames": ["list", "iconPath"],
		"pTypes": ["str_com", "str_pth"],
		"shortDesc": "Set app menu."
	},
	"SetOnBroadcast": {
		"desc": "Define a callback function for incoming Broadcast messages.\n\nSee also: @Broadcast",
		"isfunc": true,
		"name": "SetOnBroadcast",
		"pNames": ["callback"],
		"pTypes": [
			{
				"desc": "Callback",
				"isfunc": true,
				"name": "callback",
				"pNames": ["type", "msg"],
				"pTypes": ["str", "str"],
				"shortDesc": "callback"
			}
		],
		"shortDesc": "Called on incoming Broadcasts."
	},
	"SetOnDebug": {
		"desc": "Define a callback function for debug messages.\n\nSee also: @Debug, @SetDebug",
		"isfunc": true,
		"name": "SetOnDebug",
		"pNames": ["callback"],
		"pTypes": [
			{
				"desc": "Callback",
				"isfunc": true,
				"name": "callback",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "callback"
			}
		],
		"shortDesc": "Called on app debug messages."
	},
	"SetOnError": {
		"desc": "Define a callback function to catch thrown errors messages.\n\nSee also: @Error",
		"isfunc": true,
		"name": "SetOnError",
		"pNames": ["callback"],
		"pTypes": [
			{
				"desc": "Callback",
				"isfunc": true,
				"name": "callback",
				"pNames": ["error"],
				"pTypes": ["str"],
				"shortDesc": "callback"
			}
		],
		"shortDesc": "Called on thrown JS errors."
	},
	"SetOnKey": {
		"desc": "You can use SetOnKey for receiving and handling all key events fired in the application.\n\nYou may want to use it with **DisableKeys** - i.e. for defining a custom _ENTER_ command for automatic control focussing.\n\nYou can find the complete list of keys and their codes on the [https://developer.android.com/reference/android/view/KeyEvent#summary](Android Developer Page).",
		"isfunc": true,
		"name": "SetOnKey",
		"pNames": ["callback"],
		"pTypes": [
			{
				"desc": "Callback",
				"isfunc": true,
				"name": "callback",
				"pNames": ["action", "name", "keycode", "extrakeys"],
				"pTypes": ["str-DOWN|UP", "str-ENTER,VOLUME_DOWN,VOLUME_UP,BACK,MENU,...", "num_int", "str-Shift,Ctrl,Alt,Meta"],
				"shortDesc": "callback"
			}
		],
		"shortDesc": "Catch key events fired in your app."
	},
	"SetOnShowKeyboard": {
		"desc": "Define a callback function to detect when keyboard visible state has changed.",
		"isfunc": true,
		"name": "SetOnShowKeyboard",
		"pNames": ["callback"],
		"pTypes": [
			{
				"desc": "Callback",
				"isfunc": true,
				"name": "callback",
				"pNames": ["shown"],
				"pTypes": ["bin"],
				"shortDesc": "callback"
			}
		],
		"shortDesc": "Called on keyboard visibility changes."
	},
	"SetOnWifiChange": {
		"desc": "Define a callback function to detect when the WiFi connected state has changed. The **state** parameter can be _“CONNECTING”_, _“CONNECTED”_, or _“DISCONNECTED”_. The WiFi ssid is passed on _“CONNECTED”_ only.",
		"isfunc": true,
		"name": "SetOnWifiChange",
		"pNames": ["callback"],
		"pTypes": [
			{
				"desc": "Callback",
				"isfunc": true,
				"name": "callback",
				"pNames": ["state", "ssid"],
				"pTypes": ["str-CONNECTING|CONNECTED|DISCONNECTED"],
				"shortDesc": "callback"
			}
		],
		"shortDesc": "Called on WiFi connected state changes."
	},
	"SetOptions": {
		"desc": "Define some global options for the app.",
		"isfunc": true,
		"name": "SetOptions",
		"pNames": ["options"],
		"pTypes": ["str-UseBrowser,NoKeys|ShowKeys,NoThemeAlerts,IgnoreSslErrors,TouchModal,NoTouch,NoFocus,Secure,ShowLocked,WakeScreen,ScreenOn"],
		"shortDesc": "Define global app options."
	},
	"SetOrientation": {
		"desc": "Set the display orientation to a fixed value. You can unlock it again passing _“Default”_ as **orientation**.",
		"isfunc": true,
		"name": "SetOrientation",
		"pNames": ["orient", "callback"],
		"pTypes": ["str-Default|Landscape|ReverseLandscape|Portrait|ReversePortrait", {
				"desc": "Callback",
				"isfunc": true,
				"name": "callback",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "callback"
			}],
		"shortDesc": "Fix display orientation."
	},
	"SetPosition": {
		"desc": "Change the main app's position and size. Mostly used for transparent apps.",
		"isfunc": true,
		"name": "SetPosition",
		"pNames": ["left", "top", "width", "height", "options"],
		"pTypes": ["num_srw", "num_srh", "num_srw", "num_srh", "str-px"],
		"shortDesc": "Change app position and size."
	},
	"SetPriority": {
		"desc": "?",
		"isfunc": true,
		"name": "SetPriority",
		"pNames": ["level"],
		"pTypes": ["str-Low|High"],
		"shortDesc": "SetPriority"
	},
	"SetRingerMode": {
		"desc": "?",
		"isfunc": true,
		"name": "SetRingerMode",
		"pNames": ["mode"],
		"pTypes": ["?"],
		"shortDesc": "SetRingerMode"
	},
	"SetScreenBrightness": {
		"desc": "SetScreenBrightness",
		"isfunc": true,
		"name": "SetScreenBrightness",
		"pNames": ["level"],
		"pTypes": ["num_prc"],
		"shortDesc": "SetScreenBrightness"
	},
	"SetScreenMode": {
		"desc": "SetScreenMode",
		"isfunc": true,
		"name": "SetScreenMode",
		"pNames": ["mode"],
		"pTypes": ["str-Game|Full|Normal|Default"],
		"shortDesc": "SetScreenMode"
	},
	"SetSharedApp": {
		"desc": "? define app started when app called via intent?",
		"isfunc": true,
		"name": "SetSharedApp",
		"pNames": ["name"],
		"pTypes": ["str"],
		"shortDesc": "SetSharedApp"
	},
	"SetSpeakerPhone": {
		"desc": "?",
		"isfunc": true,
		"name": "SetSpeakerPhone",
		"pNames": ["on"],
		"pTypes": ["bin"],
		"shortDesc": "SetSpeakerPhone"
	},
	"SetTheme": {
		"desc": "SetTheme",
		"isfunc": true,
		"name": "SetTheme",
		"pNames": ["theme"],
		"pTypes": ["str-light|dark|?"],
		"shortDesc": "SetTheme"
	},
	"SetTitle": {
		"desc": "SetTitle",
		"isfunc": true,
		"name": "SetTitle",
		"pNames": ["title"],
		"pTypes": ["str"],
		"shortDesc": "SetTitle"
	},
	"SetUserAgent": {
		"desc": "?",
		"isfunc": true,
		"name": "SetUserAgent",
		"pNames": ["agent"],
		"pTypes": ["?"],
		"shortDesc": "SetUserAgent"
	},
	"SetUserCreds": {
		"desc": "?",
		"isfunc": true,
		"name": "SetUserCreds",
		"pNames": ["name", "password"],
		"pTypes": ["str", "str"],
		"shortDesc": "SetUserCreds"
	},
	"SetVolume": {
		"desc": "SetVolume",
		"isfunc": true,
		"name": "SetVolume",
		"pNames": ["stream", "level", "options"],
		"pTypes": ["str-alarm|dtmf|music|notification|ring|system|voicecall", "num_prc", "str-ShowUI"],
		"shortDesc": "SetVolume"
	},
	"SetWifiApEnabled": {
		"desc": "SetWifiApEnabled",
		"isfunc": true,
		"name": "SetWifiApEnabled",
		"pNames": ["enable", "ssid", "key"],
		"pTypes": ["?", "?", "?"],
		"shortDesc": "SetWifiApEnabled"
	},
	"SetWifiEnabled": {
		"desc": "SetWifiEnabled",
		"isfunc": true,
		"name": "SetWifiEnabled",
		"pNames": ["enable"],
		"pTypes": ["bin"],
		"shortDesc": "SetWifiEnabled"
	},
	"ShowDebug": {
		"desc": "Show debug console",
		"isfunc": true,
		"name": "ShowDebug",
		"pNames": ["show"],
		"pTypes": ["bin"],
		"shortDesc": "ShowDebug"
	},
	"ShowKeyboard": {
		"desc": "ShowKeyboard",
		"isfunc": true,
		"name": "ShowKeyboard",
		"pNames": ["obj"],
		"pTypes": ["dso"],
		"retval": "bin",
		"shortDesc": "ShowKeyboard"
	},
	"ShowMenu": {
		"desc": "ShowMenu",
		"isfunc": true,
		"name": "ShowMenu",
		"pNames": [],
		"pTypes": [],
		"shortDesc": "ShowMenu"
	},
	"ShowPopup": {
		"desc": "ShowPopup",
		"isfunc": true,
		"name": "ShowPopup",
		"pNames": ["message", "options"],
		"pTypes": ["str", "str-top|bottom|short|?"],
		"shortDesc": "ShowPopup"
	},
	"ShowProgress": {
		"desc": "ShowProgress",
		"isfunc": true,
		"name": "ShowProgress",
		"pNames": ["message", "options"],
		"pTypes": ["str", "str-NoDim:Don't darken background"],
		"shortDesc": "ShowProgress"
	},
	"ShowProgressBar": {
		"desc": "ShowProgressBar",
		"isfunc": true,
		"name": "ShowProgressBar",
		"pNames": ["title", "percent", "options"],
		"pTypes": ["str", "num_prc", "?"],
		"shortDesc": "ShowProgressBar"
	},
	"ShowTextDialog": {
		"desc": "Equal to prompt()",
		"isfunc": true,
		"name": "ShowTextDialog",
		"pNames": ["title", "default", "callback"],
		"pTypes": ["str", "str", {
				"desc": "Callback",
				"isfunc": true,
				"name": "callback",
				"pNames": ["text"],
				"pTypes": ["str"],
				"shortDesc": "callback"
			}],
		"shortDesc": "ShowTextDialog"
	},
	"ShowTip": {
		"desc": "Show tooltip popup message on screen",
		"isfunc": true,
		"name": "ShowTip",
		"pNames": ["message", "left", "top", "timeOut", "options"],
		"pTypes": ["str", "num_srw", "num_srw", "num_mls", "?"],
		"shortDesc": "ShowTip"
	},
	"SimulateDrag": {
		"desc": "SimulateDrag",
		"isfunc": true,
		"name": "SimulateDrag",
		"pNames": ["obj", "x1", "y1", "x2", "y2", "step", "pause"],
		"pTypes": ["?", "?", "?", "?", "?", "?", "?"],
		"shortDesc": "SimulateDrag"
	},
	"SimulateKey": {
		"desc": "SimulateKey",
		"isfunc": true,
		"name": "SimulateKey",
		"pNames": ["obj", "keyName", "modifiers", "pause"],
		"pTypes": ["dso", "str-VOLUME_DOWN|VOLUME_UP|BACK|MENU", "?", "num"],
		"shortDesc": "SimulateKey"
	},
	"SimulateScroll": {
		"desc": "SimulateScroll",
		"isfunc": true,
		"name": "SimulateScroll",
		"pNames": ["obj", "x", "y", "dx", "dy", "count", "fling"],
		"pTypes": ["?", "?", "?", "?", "?", "?", "?"],
		"shortDesc": "SimulateScroll"
	},
	"SimulateTouch": {
		"desc": "SimulateTouch",
		"isfunc": true,
		"name": "SimulateTouch",
		"pNames": ["obj", "x", "y", "dir"],
		"pTypes": ["dso", "num_orw", "num_orh", "str-Down|Move|Up"],
		"shortDesc": "SimulateTouch"
	},
	"Start": {
		"desc": "Start app",
		"isfunc": true,
		"name": "Start",
		"pNames": [],
		"pTypes": [],
		"shortDesc": "Start"
	},
	"StartApp": {
		"desc": "StartApp",
		"isfunc": true,
		"name": "StartApp",
		"pNames": ["file", "options", "intent"],
		"pTypes": ["str_pth", "str-debug|?", "str-{actionstr-typestr-data", "{extras}}"],
		"shortDesc": "StartApp"
	},
	"StartDebugServer": {
		"desc": "?",
		"isfunc": true,
		"name": "StartDebugServer",
		"pNames": [],
		"pTypes": [],
		"shortDesc": "StartDebugServer"
	},
	"StartService": {
		"desc": "StartService",
		"isfunc": true,
		"name": "StartService",
		"pNames": ["packageName", "className"],
		"pTypes": ["?", "?"],
		"shortDesc": "StartService"
	},
	"StopApp": {
		"desc": "StopApp started via app.StartApp()",
		"isfunc": true,
		"name": "StopApp",
		"pNames": ["name"],
		"pTypes": ["str_pth"],
		"shortDesc": "StopApp"
	},
	"StopDebugServer": {
		"desc": "StopDebugServer",
		"isfunc": true,
		"name": "StopDebugServer",
		"pNames": [],
		"pTypes": [],
		"shortDesc": "StopDebugServer"
	},
	"StopService": {
		"desc": "StopService",
		"isfunc": true,
		"name": "StopService",
		"pNames": [],
		"pTypes": [],
		"shortDesc": "StopService"
	},
	"SysExec": {
		"desc": "SysExec",
		"isfunc": true,
		"name": "SysExec",
		"pNames": ["command", "options", "maxRead", "timeout"],
		"pTypes": ["str", "str-su|sh", "?", "?"],
		"shortDesc": "SysExec"
	},
	"TextToSpeech": {
		"desc": "Uses android TextToSpeech method",
		"isfunc": true,
		"name": "TextToSpeech",
		"pNames": ["text", "pitch", "rate", "callback", "stream", "locale", "engine"],
		"pTypes": ["str", "?", "?", {
				"desc": "Callback",
				"isfunc": true,
				"name": "callback",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "callback"
			}, "?", "?", "?"],
		"shortDesc": "TextToSpeech"
	},
	"ToBack": {
		"desc": "Close app and run it in background",
		"isfunc": true,
		"name": "ToBack",
		"pNames": [],
		"pTypes": [],
		"shortDesc": "ToBack"
	},
	"ToFront": {
		"desc": "ToFront",
		"isfunc": true,
		"name": "ToFront",
		"pNames": [],
		"pTypes": [],
		"shortDesc": "ToFront"
	},
	"Unlock": {
		"desc": "?",
		"isfunc": true,
		"name": "Unlock",
		"pNames": [],
		"pTypes": [],
		"shortDesc": "Unlock"
	},
	"UnlockDrawer": {
		"desc": "Unlock locked drawer",
		"isfunc": true,
		"name": "UnlockDrawer",
		"pNames": ["side"],
		"pTypes": ["str-left|right"],
		"shortDesc": "UnlockDrawer"
	},
	"UnpairBtDevice": {
		"desc": "UnpairBtDevice",
		"isfunc": true,
		"name": "UnpairBtDevice",
		"pNames": ["address", "callback"],
		"pTypes": ["str", {
				"desc": "Callback",
				"isfunc": true,
				"name": "callback",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "callback"
			}],
		"shortDesc": "UnpairBtDevice"
	},
	"UnzipFile": {
		"desc": "UnzipFile",
		"isfunc": true,
		"name": "UnzipFile",
		"pNames": ["source", "destination"],
		"pTypes": ["str_pth", "str_pth"],
		"shortDesc": "UnzipFile"
	},
	"UpdateProgressBar": {
		"desc": "UpdateProgressBar",
		"isfunc": true,
		"name": "UpdateProgressBar",
		"pNames": ["percent"],
		"pTypes": ["num_prc"],
		"shortDesc": "UpdateProgressBar"
	},
	"UploadFile": {
		"desc": "UploadFile to server",
		"isfunc": true,
		"name": "UploadFile",
		"pNames": ["url", "file", "name", "callback"],
		"pTypes": ["str_url", "str_pth", "str", {
				"desc": "Callback",
				"isfunc": true,
				"name": "callback",
				"pNames": [],
				"pTypes": [],
				"shortDesc": "callback"
			}],
		"shortDesc": "UploadFile"
	},
	"Uri2Path": {
		"desc": "?",
		"isfunc": true,
		"name": "Uri2Path",
		"pNames": ["uri"],
		"pTypes": ["?"],
		"shortDesc": "Uri2Path"
	},
	"Vibrate": {
		"desc": "Vibrate in milliseconds “pause,play,pause,play,...”",
		"isfunc": true,
		"name": "Vibrate",
		"pNames": ["pattern"],
		"pTypes": ["str_com"],
		"shortDesc": "Vibrate"
	},
	"Wait": {
		"desc": "Wait",
		"isfunc": true,
		"name": "Wait",
		"pNames": ["seconds"],
		"pTypes": ["num_sec"],
		"shortDesc": "Wait"
	},
	"WakeUp": {
		"desc": "?",
		"isfunc": true,
		"name": "WakeUp",
		"pNames": [],
		"pTypes": [],
		"shortDesc": "WakeUp"
	},
	"WifiConnect": {
		"desc": "?",
		"isfunc": true,
		"name": "WifiConnect",
		"pNames": ["ssid", "key"],
		"pTypes": ["?", "?"],
		"shortDesc": "WifiConnect"
	},
	"WifiScan": {
		"desc": "WifiScan",
		"isfunc": true,
		"name": "WifiScan",
		"pNames": ["callback"],
		"pTypes": ["?"],
		"shortDesc": "WifiScan"
	},
	"WriteFile": {
		"desc": "WriteFile",
		"isfunc": true,
		"name": "WriteFile",
		"pNames": ["file", "text", "mode", "encoding"],
		"pTypes": ["str_pth", "str", "str-Append|ASCII", "str"],
		"shortDesc": "WriteFile"
	},
	"ZipFile": {
		"desc": "ZipFile",
		"isfunc": true,
		"name": "ZipFile",
		"pNames": ["source", "destination"],
		"pTypes": ["str_pth", "str_pth"],
		"shortDesc": "ZipFile"
	},
	"ZipFolder": {
		"desc": "ZipFolder",
		"isfunc": true,
		"name": "ZipFolder",
		"pNames": ["source", "destination"],
		"pTypes": ["str_pth", "str_pth"],
		"shortDesc": "ZipFolder"
	}
}
